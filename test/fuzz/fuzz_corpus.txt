!!!true
!!(f32 > f64)
!!(half != greet)
!!(nil == add)
!!(ok or true)
!!false
!!not false
!!ok
!!true
!("bar" != "bar")
!("bar" != "foo")
!("bar" != nil)
!("bar" < "bar")
!("bar" < "foo")
!("bar" <= "bar")
!("bar" <= "foo")
!("bar" == "bar")
!("bar" == "foo")
!("bar" == nil)
!("bar" > "bar")
!("bar" > "foo")
!("bar" >= "bar")
!("bar" >= "foo")
!("bar" contains "foo")
!("bar" in foo)
!("bar" matches "foo")
!("bar" not contains "bar")
!("bar" not contains "foo")
!("bar" not endsWith "foo")
!("bar" not in foo)
!("bar" not matches "foo")
!("bar" not startsWith "bar")
!("bar" not startsWith "foo")
!("bar" startsWith "bar")
!("foo" != "bar")
!("foo" != "foo")
!("foo" != nil)
!("foo" < "bar")
!("foo" <= "bar")
!("foo" <= "foo")
!("foo" == "foo")
!("foo" == nil)
!("foo" > "bar")
!("foo" > "foo")
!("foo" >= "bar")
!("foo" >= "foo")
!("foo" contains "bar")
!("foo" contains "foo")
!("foo" endsWith "bar")
!("foo" endsWith "foo")
!("foo" in foo)
!("foo" matches "bar")
!("foo" matches "foo")
!("foo" not contains "bar")
!("foo" not contains "foo")
!("foo" not endsWith "bar")
!("foo" not endsWith "foo")
!("foo" not in foo)
!("foo" not matches "bar")
!("foo" not matches "foo")
!("foo" not startsWith "bar")
!("foo" not startsWith "foo")
!("foo" startsWith "bar")
!("foo" startsWith "foo")
!(0.5 != 0.5)
!(0.5 != 1)
!(0.5 != f32)
!(0.5 != f64)
!(0.5 != i)
!(0.5 != i32)
!(0.5 != i64)
!(0.5 != nil)
!(0.5 / i32 > i)
!(0.5 < 0.5)
!(0.5 < 1)
!(0.5 < f32)
!(0.5 < f64)
!(0.5 < i)
!(0.5 < i32)
!(0.5 < i64)
!(0.5 <= 0.5)
!(0.5 <= 1)
!(0.5 <= f32)
!(0.5 <= i)
!(0.5 <= i32)
!(0.5 <= i64)
!(0.5 == 0.5)
!(0.5 == 1)
!(0.5 == f32)
!(0.5 == f64)
!(0.5 == i)
!(0.5 == i32)
!(0.5 == i64)
!(0.5 == nil)
!(0.5 > 0.5)
!(0.5 > 1)
!(0.5 > f32)
!(0.5 > f64)
!(0.5 > i)
!(0.5 > i32)
!(0.5 > i64)
!(0.5 >= 0.5)
!(0.5 >= 1)
!(0.5 >= f32)
!(0.5 >= f64)
!(0.5 >= i)
!(0.5 >= i32)
!(0.5 >= i64)
!(0.5 ^ i64 < i64)
!(1 != 0.5)
!(1 != 1)
!(1 != f32)
!(1 != f64)
!(1 != i)
!(1 != i32)
!(1 != i64)
!(1 != nil)
!(1 < 0.5)
!(1 < 1)
!(1 < f32)
!(1 < f64)
!(1 < i)
!(1 < i32)
!(1 < i64)
!(1 <= 0.5)
!(1 <= 1)
!(1 <= f32)
!(1 <= f64)
!(1 <= i)
!(1 <= i32)
!(1 <= i64)
!(1 == 0.5)
!(1 == 1)
!(1 == f32)
!(1 == f64)
!(1 == i)
!(1 == i32)
!(1 == i64)
!(1 == nil)
!(1 > 0.5)
!(1 > 1)
!(1 > f64)
!(1 > i)
!(1 > i32)
!(1 > i64)
!(1 >= 0.5)
!(1 >= 1)
!(1 >= f32)
!(1 >= f64)
!(1 >= i)
!(1 >= i32)
!(1 >= i64)
!(1 in array)
!(1 not in array)
!(add != add)
!(add != div)
!(add != greet)
!(add != half)
!(add != nil)
!(add != score)
!(add == add)
!(add == div)
!(add == half)
!(add == nil)
!(add == score)
!(array != array)
!(array != nil)
!(array == array)
!(array == list)
!(array == nil)
!(div != add)
!(div != div)
!(div != greet)
!(div != half)
!(div != nil)
!(div != score)
!(div == add)
!(div == div)
!(div == greet)
!(div == half)
!(div == nil)
!(div == score)
!(f32 != 0.5)
!(f32 != 1)
!(f32 != f32)
!(f32 != i32)
!(f32 != i64)
!(f32 != nil)
!(f32 + i == 0.5 * i)
!(f32 < 0.5)
!(f32 < 1)
!(f32 < f32)
!(f32 < f64)
!(f32 < i)
!(f32 < i32)
!(f32 < i64)
!(f32 <= 0.5)
!(f32 <= 1)
!(f32 <= f32)
!(f32 <= f64)
!(f32 <= i)
!(f32 <= i32)
!(f32 <= i64)
!(f32 == 0.5)
!(f32 == 1)
!(f32 == f32)
!(f32 == f64)
!(f32 == i)
!(f32 == i32)
!(f32 == i64)
!(f32 == nil)
!(f32 > 0.5)
!(f32 > 1)
!(f32 > f32)
!(f32 > f64)
!(f32 > i)
!(f32 > i32)
!(f32 > i64)
!(f32 >= 0.5)
!(f32 >= 1)
!(f32 >= f32)
!(f32 >= f64)
!(f32 >= i)
!(f32 >= i64)
!(f64 != 0.5)
!(f64 != 1)
!(f64 != f32)
!(f64 != f64)
!(f64 != i32)
!(f64 != i64)
!(f64 != nil)
!(f64 < 0.5)
!(f64 < 1)
!(f64 < f32)
!(f64 < f64)
!(f64 < i)
!(f64 < i32)
!(f64 < i64)
!(f64 <= 0.5)
!(f64 <= 1)
!(f64 <= f32)
!(f64 <= f64)
!(f64 <= i)
!(f64 <= i32)
!(f64 <= i64)
!(f64 == 0.5)
!(f64 == 1)
!(f64 == f32)
!(f64 == i32)
!(f64 == i64)
!(f64 == nil)
!(f64 > 0.5)
!(f64 > 1)
!(f64 > f64)
!(f64 > i32)
!(f64 > i64)
!(f64 >= 0.5)
!(f64 >= 1)
!(f64 >= f32)
!(f64 >= f64)
!(f64 >= i)
!(f64 >= i32)
!(f64 >= i64)
!(false != false)
!(false != nil)
!(false != ok)
!(false != true)
!(false && false)
!(false && ok)
!(false == false)
!(false == nil)
!(false == ok)
!(false and ok)
!(false or ok)
!(false or true)
!(false || false)
!(false || ok)
!(false || true)
!(foo != foo)
!(foo != nil)
!(foo == foo)
!(foo == nil)
!(foo in list)
!(foo not in list)
!(greet != div)
!(greet != greet)
!(greet != half)
!(greet != nil)
!(greet != score)
!(greet == add)
!(greet == div)
!(greet == greet)
!(greet == half)
!(greet == nil)
!(greet == score)
!(half != add)
!(half != div)
!(half != greet)
!(half != half)
!(half != nil)
!(half != score)
!(half == add)
!(half == div)
!(half == greet)
!(half == half)
!(half == nil)
!(half == score)
!(i != 0.5)
!(i != 1)
!(i != f32)
!(i != f64)
!(i != i)
!(i != i32)
!(i != i64)
!(i != nil)
!(i < 0.5)
!(i < 1)
!(i < f32)
!(i < f64)
!(i < i)
!(i < i32)
!(i < i64)
!(i <= 0.5)
!(i <= 1)
!(i <= f32)
!(i <= f64)
!(i <= i)
!(i <= i32)
!(i <= i64)
!(i == 0.5)
!(i == 1)
!(i == f32)
!(i == f64)
!(i == i)
!(i == i32)
!(i == i64)
!(i == nil)
!(i > 0.5)
!(i > 1)
!(i > f32)
!(i > f64)
!(i > i)
!(i > i32)
!(i > i64)
!(i >= 0.5)
!(i >= 1)
!(i >= f32)
!(i >= f64)
!(i >= i32)
!(i >= i64)
!(i in array)
!(i32 != 0.5)
!(i32 != 1)
!(i32 != f64)
!(i32 != i)
!(i32 != i32)
!(i32 != i64)
!(i32 != nil)
!(i32 * 0.5 != i32)
!(i32 < 0.5)
!(i32 < 1)
!(i32 < f32)
!(i32 < f64)
!(i32 < i)
!(i32 < i32)
!(i32 < i64)
!(i32 <= 0.5)
!(i32 <= 1)
!(i32 <= f32)
!(i32 <= f64)
!(i32 <= i)
!(i32 <= i32)
!(i32 <= i64)
!(i32 == 0.5)
!(i32 == 1)
!(i32 == f64)
!(i32 == i)
!(i32 == i32)
!(i32 == i64)
!(i32 == nil)
!(i32 > 0.5)
!(i32 > 1)
!(i32 > f64)
!(i32 > i)
!(i32 > i32)
!(i32 > i64)
!(i32 >= 0.5)
!(i32 >= 1)
!(i32 >= f32)
!(i32 >= f64)
!(i32 >= i)
!(i32 >= i32)
!(i32 >= i64)
!(i32 in array)
!(i32 not in array)
!(i64 != 0.5)
!(i64 != 1)
!(i64 != f32)
!(i64 != f64)
!(i64 != i)
!(i64 != i32)
!(i64 != nil)
!(i64 < 0.5)
!(i64 < 1)
!(i64 < f32)
!(i64 < f64)
!(i64 < i)
!(i64 < i32)
!(i64 < i64)
!(i64 <= 0.5)
!(i64 <= 1)
!(i64 <= f32)
!(i64 <= f64)
!(i64 <= i)
!(i64 <= i32)
!(i64 <= i64)
!(i64 == 0.5)
!(i64 == 1)
!(i64 == f32)
!(i64 == f64)
!(i64 == i)
!(i64 == i32)
!(i64 == nil)
!(i64 > 0.5)
!(i64 > 1)
!(i64 > f32)
!(i64 > f64)
!(i64 > i)
!(i64 > i32)
!(i64 > i64)
!(i64 >= 0.5)
!(i64 >= 1)
!(i64 >= f32)
!(i64 >= f64)
!(i64 >= i)
!(i64 >= i32)
!(i64 in array)
!(i64 not in array)
!(list != array)
!(list != list)
!(list != nil)
!(list == array)
!(list == list)
!(list == nil)
!(nil != "bar")
!(nil != "foo")
!(nil != 0.5)
!(nil != 1)
!(nil != add)
!(nil != array)
!(nil != div)
!(nil != f32)
!(nil != f64)
!(nil != false)
!(nil != foo)
!(nil != greet)
!(nil != half)
!(nil != i)
!(nil != i32)
!(nil != i64)
!(nil != list)
!(nil != nil)
!(nil != ok)
!(nil != score)
!(nil != true)
!(nil == "bar")
!(nil == "foo")
!(nil == 0.5)
!(nil == 1)
!(nil == array)
!(nil == div)
!(nil == f32)
!(nil == f64)
!(nil == foo)
!(nil == greet)
!(nil == half)
!(nil == i)
!(nil == i32)
!(nil == i64)
!(nil == list)
!(nil == nil)
!(nil == ok)
!(nil == score)
!(nil == true)
!(nil in array)
!(nil in list)
!(nil not in array)
!(nil not in list)
!(ok != false)
!(ok != nil)
!(ok != ok)
!(ok != true)
!(ok && false)
!(ok && ok)
!(ok && true)
!(ok == false)
!(ok == nil)
!(ok == ok)
!(ok and ok)
!(ok and true)
!(ok or ok)
!(ok || false)
!(ok || ok)
!(score != add)
!(score != div)
!(score != greet)
!(score != half)
!(score != nil)
!(score != score)
!(score == add)
!(score == div)
!(score == greet)
!(score == half)
!(score == nil)
!(true != false)
!(true != nil)
!(true != ok)
!(true != true)
!(true && false)
!(true && ok)
!(true && true)
!(true == false)
!(true == nil)
!(true == ok)
!(true == true)
!(true and false)
!(true and ok)
!(true and true)
!(true or true)
!(true || ok)
!(true || true)
!all(array, false)
!all(array, ok)
!all(array, true)
!all(list, false)
!all(list, ok)
!all(list, true)
!any(array, false)
!any(array, ok)
!any(array, true)
!any(list, # != #)
!any(list, ok)
!false && ok
!false ? "bar" : i
!false ? "foo" : false
!false ? 0.5 : "bar"
!false ? 0.5 : 1
!false ? 0.5 : div
!false ? 0.5 : i64
!false ? 1 : add
!false ? 1 : true
!false ? add : array
!false ? add : nil
!false ? array : array
!false ? div : 0.5
!false ? div : foo
!false ? div : map(list, #)
!false ? div : nil
!false ? f32 : 0.5
!false ? f32 : greet
!false ? f64 : 1
!false ? f64 : half
!false ? false : f32
!false ? false : false
!false ? foo : 1
!false ? foo : i64
!false ? greet : array
!false ? greet : i32
!false ? half : nil
!false ? half : ok
!false ? i : foo
!false ? i32 : "foo"
!false ? i64 : f32
!false ? i64 : nil
!false ? list : list
!false ? nil : 1
!false ? nil : add
!false ? nil : f64
!false ? nil : foo
!false ? ok : ok
!false ? true : array
!false and (true or false)
!false and ok
!false or 0.5 != 1
!false || not false
!hasSuffix("bar", "bar")
!none(array, false)
!none(array, true)
!none(list, false)
!none(list, ok)
!none(list, true)
!not (1 != i)
!not (i64 != 0.5)
!not any(list, ok)
!not false
!not ok
!not true
!not true ? i64 : true
!ok
!ok != ok
!ok && (ok || ok)
!ok == !ok
!ok == ok
!ok ? "bar" : 0.5
!ok ? "foo" : nil
!ok ? 0.5 : "foo"
!ok ? 1 : 0.5
!ok ? 1 : 1
!ok ? 1 : div
!ok ? 1 : foo
!ok ? 1 : greet
!ok ? 1 : ok
!ok ? add : f32
!ok ? add : false
!ok ? add : i
!ok ? add : score
!ok ? f32 : "foo"
!ok ? f32 : 1
!ok ? f64 : i
!ok ? false : "foo"
!ok ? false : half
!ok ? greet : "bar"
!ok ? greet : add
!ok ? greet : false
!ok ? half : array
!ok ? i : foo
!ok ? i : greet
!ok ? i : true
!ok ? i64 : list
!ok ? list : "foo"
!ok ? list : true
!ok ? nil : i
!ok ? nil : true
!ok ? ok : 1
!ok ? ok : i64
!ok ? ok : score
!ok ? score : array
!ok ? score : i
!ok ? true : greet
!ok and i != f32
!ok and ok
!ok or none(array, ok)
!one(array, ok)
!one(array, true)
!one(list, false)
!one(list, ok)
!one(list, true)
!true != false ? ok : 0.5
!true != nil == nil
!true != ok
!true && ok
!true == ok
!true ? "bar" : false
!true ? "bar" : i
!true ? "foo" : ok
!true ? 0.5 : 1
!true ? 0.5 : div
!true ? 0.5 : i
!true ? add : div
!true ? add : greet
!true ? array : foo
!true ? array : i
!true ? array : i64
!true ? array : score
!true ? div : f32
!true ? div : ok
!true ? f32 : 0.5
!true ? f32 : add
!true ? f32 : foo
!true ? f32 : i32
!true ? f64 : "bar"
!true ? f64 : f64
!true ? f64 : i32
!true ? foo : 1
!true ? greet : array
!true ? greet : list
!true ? half : add
!true ? half : greet
!true ? i32 : i64
!true ? i64 : score
!true ? list : div
!true ? list : score
!true ? nil : 0.5
!true ? nil : f32
!true ? nil : f64
!true ? nil : foo
!true ? nil : half
!true ? nil : i
!true ? ok : list
!true ? score : array
!true ? score : nil
!true and ok
!true or !false
!true or nil != ok
!true || ok
"bar" != foo.Bar
"bar" != foo?.Bar
"bar" != foo?.String()
"bar" != nil and true ? i64 : 0.5
"bar" + "foo" not endsWith greet("bar")
"bar" + foo.Bar
"bar" + foo?.Bar
"bar" + foo?.String()
"bar" < foo.Bar
"bar" < foo?.Bar
"bar" <= foo.Bar
"bar" <= foo.String()
"bar" <= foo?.Bar
"bar" == foo.Bar
"bar" == foo?.Bar
"bar" > foo.Bar
"bar" > foo.String()
"bar" > foo?.Bar
"bar" contains "bar" == ok
"bar" contains "foo" ? array : f64
"bar" contains foo.Bar
"bar" contains foo?.Bar
"bar" contains foo?.String()
"bar" endsWith foo.Bar
"bar" endsWith foo?.Bar
"bar" endsWith foo?.String()
"bar" in foo || ok
"bar" matches "bar" != ok
"bar" matches foo.Bar
"bar" matches foo?.Bar
"bar" not contains foo.Bar
"bar" not contains foo.String()
"bar" not contains foo?.Bar
"bar" not endsWith foo.Bar
"bar" not endsWith foo?.Bar
"bar" not endsWith foo?.String()
"bar" not in list[i]
"bar" not matches "foo" ? i32 < 0.5 : ok
"bar" not matches foo.Bar
"bar" not matches foo.String()
"bar" not matches foo?.Bar
"bar" not startsWith "foo" ? add : ok
"bar" not startsWith foo.Bar
"bar" not startsWith foo?.Bar
"bar" startsWith foo.Bar
"bar" startsWith foo?.Bar
"foo" != "bar" != ok
"foo" != foo.Bar
"foo" != foo?.Bar
"foo" != foo?.String()
"foo" + "foo" not in foo
"foo" + foo.Bar
"foo" + foo.String()
"foo" + foo?.Bar
"foo" + foo?.String()
"foo" < "bar" and i32 != 0.5
"foo" < "foo" ? list : f32
"foo" < foo.Bar
"foo" < foo?.Bar
"foo" <= foo.Bar
"foo" <= foo?.Bar
"foo" == "foo" && i32 > 1
"foo" == foo.Bar
"foo" == foo.String()
"foo" == foo?.String()
"foo" == nil ? foo : f64
"foo" > "bar" && ok
"foo" > "foo" == not false
"foo" > foo?.Bar
"foo" > foo?.String()
"foo" >= foo.Bar
"foo" >= foo?.Bar
"foo" contains foo.Bar
"foo" contains foo?.Bar
"foo" endsWith foo.Bar
"foo" endsWith foo.String()
"foo" endsWith foo?.Bar
"foo" endsWith foo?.String()
"foo" in foo && nil == 1
"foo" matches "bar" ? f64 > f64 : half
"foo" matches foo.Bar
"foo" matches foo.String()
"foo" matches foo?.Bar
"foo" not contains foo.Bar
"foo" not contains foo?.Bar
"foo" not endsWith foo.Bar
"foo" not endsWith foo?.Bar
"foo" not endsWith foo?.String()
"foo" not matches foo.Bar
"foo" not matches foo.String()
"foo" not matches foo?.Bar
"foo" not startsWith foo.Bar
"foo" not startsWith foo?.String()
"foo" startsWith foo.Bar
"foo" startsWith foo?.Bar
"foo" startsWith foo?.String()
("bar" not endsWith "bar") and i64 < i32
("bar" not endsWith "foo") == ok
("bar" not in foo) == ok
("foo" not matches "bar") and false ? f64 : array
(0.5 * 0.5) ** f32
(0.5 * 0.5) ** i
(0.5 * 0.5) ** i64
(0.5 * 0.5) ^ f32
(0.5 * 0.5) ^ i32
(0.5 * f32) ** i
(0.5 * f64) ^ f32
(0.5 * i32) ** f32
(0.5 + 1) * i
(0.5 + 1) ** i64
(0.5 + 1) / i
(0.5 + i64) / f32
(0.5 - 0.5) ^ half(f64)
(0.5 - 1) * i64
(0.5 - 1) ** i64
(0.5 - f32) ** (0.5 * f64)
(0.5 - f64) * f64
(0.5 - f64) / f32
(0.5 - i) ^ f32
(0.5 - i32) ** i64
(0.5 - i32) ^ f64
(0.5 / 0.5) ^ f64
(0.5 / f32) ** f32
(0.5 / f32) ^ i32
(0.5 / f64) ** i
(0.5 / f64) ** i32
(0.5 / i32) ** i
(0.5 / i64) ** f32
(1 % i) ** f32
(1 % i) ^ i
(1 % i64) ** f32
(1 * 1) ** f64
(1 * 1) ^ i
(1 * f32) ** f32
(1 * i32) ** i
(1 * i64) ** i32
(1 + 0.5) * f64
(1 + 0.5) ^ i32
(1 + 1) / i32
(1 + 1) ^ i
(1 + f32) / f32 / i64
(1 + f64) ** i64
(1 + f64) / i32
(1 + f64) ^ f64
(1 + i32) / f32
(1 + i64) / f64
(1 - 0.5) / f64
(1 - 0.5) ^ i32
(1 - 1) * i
(1 - 1) * i32
(1 - 1) ** f32
(1 - 1) / i
(1 - f64) * 1 * i
(1 - f64) ^ i32
(1 - i) ** i
(1 - i) / i64
(1 - i32) ** i ^ 0.5
(1 - i64) % i64
(1 / 0.5) ^ f32
(1 / 0.5) ^ f64
(1 / 1) ** i32
(1 / 1) ^ i32
(1 / f64) ** f64
(1 / i) ** i64
(1 not in array) and none(list, true)
(f32 * 1) ** f32
(f32 * 1) ** i64
(f32 * i) ^ i64
(f32 * i32) ** i
(f32 * i64) ** i64
(f32 * i64) ^ i
(f32 + 0.5) / 0.5 ** 0.5
(f32 + 1) ** i
(f32 + 1) / i
(f32 + 1) / i64
(f32 + i32) ** i64
(f32 + i64) ** i32
(f32 - 0.5) * f64
(f32 - 0.5) * i
(f32 - f32) ** f32
(f32 - i) / f64
(f32 - i) ^ i64
(f32 - i64) * i64
(f32 - i64) ** i64
(f32 - i64) / i64
(f32 / f64) ^ f32
(f32 / f64) ^ i
(f32 / i32) ^ i32
(f64 * 0.5) ^ i
(f64 * f64) ** i32
(f64 * i64) ** i32
(f64 + f32) ** i64
(f64 + i32) * f32
(f64 + i64) / i32
(f64 - 0.5) * -i
(f64 - 0.5) * i
(f64 - 0.5) / f32
(f64 - 0.5) / i64
(f64 - 0.5) ^ i
(f64 - 0.5) ^ i64
(f64 - 1) * f32
(f64 - f32) * i64
(f64 - f64) / i32
(f64 - i) * i32 ** 1
(f64 - i64) / i64
(f64 / 0.5) ** f64
(f64 / i) ^ i64
(false || ok) and ok
(i % 1) ** -f32
(i % 1) ** f64
(i % i) ** f32
(i * 1) ** i
(i * f32) ** i32
(i * f32) ^ f64
(i * i) ^ count(array, true)
(i + 0.5) ** i32
(i + 0.5) ^ f32
(i + 1) % i32
(i + 1) / i64
(i + f64) ^ (f32 * f64)
(i + i) * -f64
(i + i32) ^ i64
(i - 0.5) / f32
(i - 0.5) ^ f64
(i - 1) ** i64
(i - 1) / f32
(i - 1) ^ f64
(i - i64) ** f64
(i - i64) ^ i
(i / 0.5) ^ i32
(i / 1) ** f64
(i / 1) ** i64
(i / i32) ^ f32
(i < i32 ? nil : f64) ** f64
(i32 * 1) ** f32
(i32 * f32) ^ i64
(i32 * i) ^ i
(i32 * i32) ** f64
(i32 + 0.5) / f64
(i32 + 0.5) ^ i64
(i32 + 1) * f64
(i32 + 1) ** float(1)
(i32 + 1) / i
(i32 + 1) / i64
(i32 + f32) ** f32
(i32 + f64) ** i
(i32 + i32) * i32
(i32 + i32) / i64
(i32 + i64) ^ i
(i32 - 0.5) * i64
(i32 - f32) * i32
(i32 - i32) ** i
(i32 - i32) ** i64
(i32 / 0.5) ^ i32
(i32 / i32) ^ f32
(i32 / i32) ^ i
(i64 * 0.5) ^ f32
(i64 * 1) ** i64
(i64 * 1) ^ f32
(i64 * 1) ^ f64
(i64 * f32) ** findIndex(list, ok)
(i64 + 1) * i32
(i64 + f32) ^ f64
(i64 + f64) / 1 * 1
(i64 + f64) ^ f64
(i64 + i) ^ i64
(i64 + i32) * f32
(i64 - 0.5) * i64
(i64 - 0.5) / i32
(i64 - i) % i32
(i64 - i32) / len(array)
(i64 - i64) / i64
(i64 / f64) ** f32
(i64 / i32) ** f32
(i64 / i32) ** i
(i64 / i32) ^ -1
(i64 not in array) && ok
(ok && ok) == ok
(ok or false) and ok
(ok or ok) == not false
(ok || true) && i32 >= f64
-(0.5 * 0.5)
-(0.5 * 1)
-(0.5 * f32)
-(0.5 * f64)
-(0.5 * i)
-(0.5 * i32)
-(0.5 * i64)
-(0.5 ** 0.5)
-(0.5 ** 1)
-(0.5 ** f32)
-(0.5 ** f64)
-(0.5 ** i)
-(0.5 ** i32)
-(0.5 ** i64)
-(0.5 + 0.5)
-(0.5 + 1)
-(0.5 + f32)
-(0.5 + f64)
-(0.5 + i)
-(0.5 + i32)
-(0.5 + i64)
-(0.5 - 0.5)
-(0.5 - 1)
-(0.5 - f32)
-(0.5 - f64)
-(0.5 - i)
-(0.5 - i32)
-(0.5 - i64)
-(0.5 / 0.5)
-(0.5 / 0.5) < i32
-(0.5 / 1)
-(0.5 / f32)
-(0.5 / f64)
-(0.5 / i)
-(0.5 / i32)
-(0.5 / i64)
-(0.5 ^ 0.5)
-(0.5 ^ 1)
-(0.5 ^ f32)
-(0.5 ^ f64)
-(0.5 ^ i)
-(0.5 ^ i32)
-(0.5 ^ i64)
-(1 % 1)
-(1 % i)
-(1 % i32)
-(1 % i64)
-(1 * 0.5)
-(1 * 1)
-(1 * f32)
-(1 * i)
-(1 * i32)
-(1 * i64)
-(1 ** 0.5)
-(1 ** 1)
-(1 ** f32)
-(1 ** f64)
-(1 ** i)
-(1 ** i32)
-(1 ** i64)
-(1 + 0.5)
-(1 + 1)
-(1 + f32)
-(1 + f64)
-(1 + i)
-(1 + i32)
-(1 + i64)
-(1 - 0.5)
-(1 - 1)
-(1 - f32)
-(1 - f64)
-(1 - i)
-(1 - i32)
-(1 - i64)
-(1 / 0.5)
-(1 / 1)
-(1 / f32)
-(1 / f64)
-(1 / i)
-(1 / i32)
-(1 / i64)
-(1 ^ 0.5)
-(1 ^ 1)
-(1 ^ f32)
-(1 ^ f64)
-(1 ^ i)
-(1 ^ i32)
-(1 ^ i64)
-(f32 * 0.5)
-(f32 * 1)
-(f32 * f32)
-(f32 * f64)
-(f32 * i)
-(f32 * i32)
-(f32 * i64)
-(f32 ** 0.5)
-(f32 ** 1)
-(f32 ** f32)
-(f32 ** f64)
-(f32 ** i)
-(f32 ** i32)
-(f32 ** i64)
-(f32 + 0.5)
-(f32 + 1)
-(f32 + f32)
-(f32 + f64)
-(f32 + i)
-(f32 + i32)
-(f32 + i64)
-(f32 - 0.5)
-(f32 - 1)
-(f32 - f64)
-(f32 - i - f32)
-(f32 - i)
-(f32 - i32)
-(f32 - i64)
-(f32 / 0.5)
-(f32 / 1)
-(f32 / f32)
-(f32 / f64)
-(f32 / i)
-(f32 / i32)
-(f32 / i64)
-(f32 ^ 0.5)
-(f32 ^ 1)
-(f32 ^ f32)
-(f32 ^ i)
-(f32 ^ i32)
-(f32 ^ i64)
-(f64 * 0.5)
-(f64 * 1)
-(f64 * f32)
-(f64 * f64)
-(f64 * i)
-(f64 * i32)
-(f64 * i64)
-(f64 ** 0.5)
-(f64 ** 1)
-(f64 ** f32)
-(f64 ** f64)
-(f64 ** i)
-(f64 ** i32)
-(f64 ** i32) > i32
-(f64 ** i64)
-(f64 + 0.5)
-(f64 + 1)
-(f64 + f32)
-(f64 + i)
-(f64 + i32)
-(f64 + i64)
-(f64 - 0.5)
-(f64 - 1)
-(f64 - f32)
-(f64 - f64)
-(f64 - i)
-(f64 - i32)
-(f64 - i64)
-(f64 / 0.5)
-(f64 / 1)
-(f64 / f32)
-(f64 / f64)
-(f64 / i)
-(f64 / i32)
-(f64 / i64)
-(f64 ^ 0.5)
-(f64 ^ 1)
-(f64 ^ f32)
-(f64 ^ f64)
-(f64 ^ i)
-(f64 ^ i32)
-(f64 ^ i64)
-(i % 1)
-(i % i)
-(i % i32)
-(i % i64)
-(i % score(1))
-(i * 0.5)
-(i * 1)
-(i * f32)
-(i * f64)
-(i * i)
-(i * i32)
-(i * i64)
-(i ** 1)
-(i ** f32)
-(i ** f64)
-(i ** i)
-(i ** i32)
-(i ** i64)
-(i ** int(i))
-(i + 0.5)
-(i + 1)
-(i + f32)
-(i + f64)
-(i + i)
-(i + i64)
-(i - 0.5)
-(i - 1)
-(i - f32)
-(i - f64)
-(i - i)
-(i - i32)
-(i / 0.5)
-(i / 1)
-(i / f32)
-(i / f64)
-(i / i)
-(i / i32)
-(i ^ 0.5)
-(i ^ 1)
-(i ^ f32)
-(i ^ f64)
-(i ^ i)
-(i32 % 1 % i)
-(i32 % 1)
-(i32 % i)
-(i32 % i32)
-(i32 % i64)
-(i32 * 0.5)
-(i32 * 1)
-(i32 * f32)
-(i32 * f64)
-(i32 * i)
-(i32 * i32)
-(i32 * i64)
-(i32 ** 0.5)
-(i32 ** 1)
-(i32 ** f32)
-(i32 ** i)
-(i32 ** i32)
-(i32 ** i64)
-(i32 + 0.5)
-(i32 + 1 ^ i64)
-(i32 + 1)
-(i32 + f32)
-(i32 + f64)
-(i32 + i)
-(i32 + i32)
-(i32 + i64)
-(i32 - 0.5)
-(i32 - 1)
-(i32 - f32)
-(i32 - f64)
-(i32 - i)
-(i32 - i32)
-(i32 - i64)
-(i32 / 0.5)
-(i32 / 1)
-(i32 / f32)
-(i32 / f64)
-(i32 / i)
-(i32 / i32)
-(i32 / i64)
-(i32 ^ 0.5)
-(i32 ^ 1)
-(i32 ^ f32)
-(i32 ^ f64)
-(i32 ^ i)
-(i64 % 1)
-(i64 % i)
-(i64 % i32)
-(i64 % i64)
-(i64 * 0.5)
-(i64 * 1)
-(i64 * f32)
-(i64 * f64)
-(i64 * i)
-(i64 * i32)
-(i64 * i64)
-(i64 ** 0.5)
-(i64 ** 1)
-(i64 ** f32)
-(i64 ** f64)
-(i64 ** i)
-(i64 ** i32)
-(i64 ** i64)
-(i64 + 0.5)
-(i64 + 1)
-(i64 + f32)
-(i64 + f64)
-(i64 + i)
-(i64 + i32)
-(i64 + i64)
-(i64 - 0.5)
-(i64 - 1)
-(i64 - f64)
-(i64 - i)
-(i64 - i32)
-(i64 - i64)
-(i64 / 0.5)
-(i64 / 1 / 1)
-(i64 / 1)
-(i64 / f32)
-(i64 / f64)
-(i64 / i)
-(i64 / i32)
-(i64 / i64)
-(i64 ^ 0.5)
-(i64 ^ 1)
-(i64 ^ f32)
-(i64 ^ f64)
-(i64 ^ i)
-(i64 ^ i32)
-(i64 ^ i64)
-(max(0.5) + i64)
--(1 * i64)
--(i64 * 1)
---1
---i
--0.5
--1
--abs(f64)
--f32
--f64
--i
--i32
--i64
--max(0.5)
-0.5 != 1 ? array : f64
-0.5 != f32
-0.5 != f64 ** 0.5
-0.5 != i32
-0.5 != max(i64)
-0.5 * f64
-0.5 * i
-0.5 * i32
-0.5 * i64
-0.5 * len(array)
-0.5 ** f32
-0.5 ** i
-0.5 ** i32
-0.5 ** i64
-0.5 + f32
-0.5 + f64
-0.5 + f64 / f64
-0.5 + i
-0.5 + i32
-0.5 - -i32
-0.5 - 1 + 1
-0.5 - f32
-0.5 - f64
-0.5 - i
-0.5 - i32
-0.5 - i32 * i
-0.5 / (f32 + 0.5)
-0.5 / -i32
-0.5 / f32
-0.5 / f64
-0.5 / float(f64)
-0.5 / i
-0.5 / i64
-0.5 / i64 ** 1
-0.5 < f32
-0.5 < f64
-0.5 < i32
-0.5 < i32 ? false : "bar"
-0.5 < i32 ^ f64
-0.5 <= 1 == false
-0.5 <= f32
-0.5 <= f64
-0.5 <= f64 + f32
-0.5 <= i64
-0.5 == f32
-0.5 == f64 / 0.5
-0.5 == i
-0.5 == i32
-0.5 == i64
-0.5 > f32
-0.5 > f64
-0.5 > i32
-0.5 > i64
-0.5 >= f64
-0.5 >= i
-0.5 >= i32
-0.5 >= i64
-0.5 ^ f32
-0.5 ^ f64
-0.5 ^ i
-0.5 ^ i32
-0.5 ^ i64
-1 != f64
-1 != i
-1 != i64
-1 != i64 * f32
-1 % i32
-1 % i64
-1 * 1 ** i64
-1 * f32
-1 * i32
-1 * i64
-1 ** f32
-1 ** i
-1 ** i64
-1 + 1 + 0.5
-1 + f32
-1 + half(f64)
-1 + i
-1 + i64
-1 - f32
-1 - i
-1 - i32
-1 - i64
-1 .. i
-1 .. i32
-1 .. i64
-1 / 1 * 1
-1 / f32
-1 / i32
-1 < 0.5 ^ i64
-1 < f32
-1 < f64 * 1
-1 < i32
-1 < i64
-1 <= f32
-1 <= f32 == true
-1 <= f64
-1 <= i32
-1 == f32
-1 == f64
-1 == nil != nil
-1 > -i32
-1 > f32
-1 > half(0.5)
-1 > i
-1 > i32
-1 > i64
-1 > i64 ? array : nil
-1 >= 0.5 * 0.5
-1 >= f32
-1 >= f64
-1 >= i32
-1 >= i32 - 1
-1 >= i64
-1 ^ f32
-1 ^ f64
-1 ^ i64
-1 in array
-1 not in array
-abs(0.5 * f64)
-abs(0.5)
-abs(1)
-abs(1) .. i
-abs(f32)
-abs(f64)
-abs(i)
-abs(i32)
-abs(i64)
-add(1, 1)
-add(i, 1)
-array[1]
-array[i32]
-array[i64]
-array[i]
-count(array, false)
-count(array, ok)
-count(array, true)
-count(list, ok)
-count(list, true)
-div(1, 1)
-div(1, i)
-div(i, i)
-f32
-f32 != 1 / i
-f32 != f32
-f32 != f64
-f32 != i64
-f32 * 1 ** i32
-f32 * f32
-f32 ** f32
-f32 ** f32 ** 1
-f32 ** i64
-f32 + f32
-f32 + i32
-f32 + i64
-f32 - f32
-f32 - f64
-f32 - i
-f32 - i32
-f32 - i64
-f32 / f32
-f32 / i32
-f32 / i64
-f32 < f64
-f32 < i32
-f32 < i64
-f32 <= i
-f32 <= i32
-f32 == f32
-f32 == f64
-f32 == i
-f32 == i32
-f32 == i64
-f32 > f32
-f32 > f64
-f32 > i
-f32 > i64
-f32 >= 1 / f32
-f32 >= f32
-f32 >= f64
-f32 >= i64
-f32 ^ f32
-f32 ^ f64
-f32 ^ i64
-f32 ^ min(f64)
-f64
-f64 != f64
-f64 != i
-f64 != i64
-f64 * f64
-f64 ** f32
-f64 ** i32
-f64 ** i64
-f64 + f32
-f64 + i32
-f64 + i64
-f64 - 0.5 / i32
-f64 - f64
-f64 - i32
-f64 / f64
-f64 / i
-f64 / i64
-f64 < f32
-f64 < i
-f64 <= f32
-f64 <= f64
-f64 <= i32
-f64 == f32
-f64 == i
-f64 == i32
-f64 > f64
-f64 > i32
-f64 > i64
-f64 >= f64
-f64 >= f64 ^ 0.5
-f64 >= i
-f64 ^ 0.5 ** i64
-f64 ^ f32
-f64 ^ f64
-f64 ^ i
-f64 ^ i32
-f64 ^ i64
-find(array, ok)
-find(array, true)
-findIndex(array, ok)
-findIndex(array, true)
-findIndex(list, ok)
-findLast(array, ok)
-findLast(array, true)
-findLastIndex(array, ok)
-findLastIndex(array, true)
-findLastIndex(list, ok)
-findLastIndex(list, true)
-first(array)
-float(-1)
-float(0.5)
-float(1)
-float(f32 ** 0.5)
-float(f32)
-float(f64)
-float(i)
-float(i32)
-float(i64)
-get(array, 1)
-get(array, i)
-get(array, i32)
-get(array, i64)
-half(-1)
-half(0.5)
-half(f64)
-i
-i != f64
-i != i32
-i != i32 * 1
-i != i64
-i % i
-i % i32
-i % i64
-i * f32
-i * f64
-i * i32
-i * i64
-i ** f32
-i ** f64
-i ** i32
-i ** i64
-i + f32
-i + i
-i + i32
-i + i64
-i - f32
-i - f64
-i - i
-i - i64
-i .. i32
-i / f64
-i / i
-i / i32
-i / i64
-i < f32
-i < i64
-i <= f32
-i <= i32
-i == -0.5
-i == 1 ** f64
-i == 1 + 0.5
-i > f32
-i > i
-i > i32
-i >= f32
-i >= i32
-i ^ -i
-i ^ f64
-i ^ i32
-i not in array
-i32
-i32 != f32
-i32 != f64
-i32 != i
-i32 != i64
-i32 % i32
-i32 % i64
-i32 * f32
-i32 * f64
-i32 * i
-i32 * i32
-i32 ** f64
-i32 ** i32
-i32 ** i64
-i32 + 1 + i
-i32 + f32
-i32 + f64
-i32 + i
-i32 + i32
-i32 - i32
-i32 - i64
-i32 .. i
-i32 .. i64
-i32 / (i32 - f64)
-i32 / f64
-i32 / i
-i32 < 0.5 * 1
-i32 < f32
-i32 < f64 - f64
-i32 < i32
-i32 < i64
-i32 <= 0.5 ? f64 : 1
-i32 <= f32
-i32 <= f64
-i32 <= f64 + i
-i32 == f32
-i32 == i32
-i32 > i
-i32 > i32
-i32 > i64
-i32 >= f32
-i32 >= f64
-i32 >= i64
-i32 ^ (i - 0.5)
-i32 ^ i
-i32 ^ i32
-i32 ^ i64
-i32 ^ i64 ** i32
-i32 in array
-i32 not in array
-i64
-i64 != i
-i64 != i ? i : foo
-i64 != i64
-i64 % i
-i64 % i32
-i64 * f32
-i64 * f64
-i64 * i
-i64 * i32
-i64 * i64
-i64 ** f64
-i64 ** i64
-i64 + 0.5 * i32
-i64 + f64
-i64 + i
-i64 - f32
-i64 - f64
-i64 - i32
-i64 - i64
-i64 .. i
-i64 .. i32
-i64 / f32
-i64 / i
-i64 / i64
-i64 / i64 * f32
-i64 < -0.5
-i64 < f32
-i64 < f64
-i64 < i
-i64 < i32
-i64 < i64
-i64 <= i32
-i64 <= i64
-i64 == f32
-i64 == i
-i64 == i32
-i64 == i64
-i64 > f32
-i64 > f64
-i64 > i32
-i64 >= i
-i64 >= i32
-i64 >= i64
-i64 ^ f64
-i64 ^ i32
-i64 ^ i64
-i64 not in array
-i64 not in sort(array)
-int(0.5)
-int(1)
-int(f32)
-int(f64)
-int(i)
-int(i32)
-int(i64 - i)
-int(i64)
-int(int(1))
-last(array)
-len("bar")
-len("foo")
-len([foo])
-len(array)
-len(false ? greet : "foo")
-len(list)
-max(0.5 * i)
-max(0.5)
-max(0.5, 1)
-max(1)
-max(f32)
-max(f32, 0.5, f32)
-max(f32, i64)
-max(f64)
-max(i)
-max(i, 1)
-max(i, i64)
-max(i32)
-max(i32, 0.5)
-max(i64)
-max(score(1))
-min(0.5)
-min(0.5, 1)
-min(0.5, i32)
-min(1)
-min(1, f32)
-min(f32)
-min(f32, 0.5)
-min(f64)
-min(f64, 0.5)
-min(f64, f32)
-min(f64, i64)
-min(i)
-min(i, i)
-min(i32)
-min(i32, 1)
-min(i32, f64)
-min(i64)
-min(i64, f32)
-min(i64, f64)
-score(1)
-score(1, 1)
-score(1, i)
-score(i)
-score(i, 1)
-score(i32 * i)
0.5 != 0.5 ? f64 : half
0.5 != 0.5 ? i64 : f64
0.5 != 0.5 ? list : array
0.5 != 0.5 or ok
0.5 != f32 || 0.5 > 0.5
0.5 != i && i64 > 1
0.5 != i64 != ok
0.5 != i64 ? -f32 : add
0.5 != nil or ok
0.5 * 0.5 != i / 1
0.5 * 0.5 * i
0.5 * 0.5 * i32
0.5 * 0.5 + i32
0.5 * 0.5 - i
0.5 * 0.5 / f64
0.5 * 0.5 / i32
0.5 * 0.5 < f32
0.5 * 0.5 < i
0.5 * 0.5 > i32
0.5 * 1 + f32
0.5 * 1 + half(f64)
0.5 * 1 < f64
0.5 * 1 > f64
0.5 * 1 > i32
0.5 * f32 / i64
0.5 * f32 == i32
0.5 * f64 * f64
0.5 * f64 + i64
0.5 * f64 > i
0.5 * f64 >= i
0.5 * f64 >= i64
0.5 * i - i
0.5 * i / i64
0.5 * i / i64 ^ 0.5
0.5 * i == f32
0.5 * i32 < i32
0.5 * i32 in [f64]
0.5 * i64 != f32
0.5 * i64 != i
0.5 * i64 + f32
0.5 * i64 <= i64
0.5 ** 0.5 != i
0.5 ** 0.5 ** f32
0.5 ** 0.5 / f32
0.5 ** 0.5 / i
0.5 ** 0.5 < i / i32
0.5 ** 0.5 == f32
0.5 ** 0.5 == i32
0.5 ** 1 + i64
0.5 ** 1 / f32
0.5 ** f32 < 1 / f64
0.5 ** f32 < i
0.5 ** f32 < i32
0.5 ** f32 < min(i64)
0.5 ** f32 == f64
0.5 ** f32 ^ f32
0.5 ** f32 ^ i64
0.5 ** f64 * f32
0.5 ** f64 + -i
0.5 ** i * 0.5 ** i
0.5 ** i < f32
0.5 ** i <= i32
0.5 ** i > f32
0.5 ** i ^ f64
0.5 ** i32 != f64
0.5 ** i32 <= i32
0.5 ** i32 ^ f32
0.5 ** i64 != f32
0.5 ** i64 - f32
0.5 ** i64 - i64
0.5 ** i64 ^ min(i)
0.5 + 0.5 != i32
0.5 + 0.5 - f32
0.5 + 0.5 - i64
0.5 + 0.5 < 1 ? f32 : score
0.5 + 0.5 <= f32
0.5 + 0.5 == f64
0.5 + 0.5 > i64
0.5 + 0.5 >= i64
0.5 + 1 != i
0.5 + 1 < f32
0.5 + 1 >= i
0.5 + f32 != i
0.5 + f32 != i + i64
0.5 + f32 >= i
0.5 + f64 == i32
0.5 + f64 > f64
0.5 + i > f32
0.5 + i32 + i64
0.5 + i32 < f32
0.5 + i64 + f64
0.5 + i64 < f64
0.5 + i64 <= 0.5 + 1
0.5 + i64 == i32
0.5 + i64 >= i64
0.5 - 0.5 != i64
0.5 - 0.5 + i32
0.5 - 0.5 - f64
0.5 - 0.5 < 0.5 * f32
0.5 - 0.5 == f32
0.5 - 1 != i ? "foo" : div
0.5 - 1 + f32
0.5 - 1 - f64
0.5 - 1 <= i32
0.5 - 1 <= i64
0.5 - f32 + i
0.5 - f64 <= i32
0.5 - i - i32
0.5 - i > f64
0.5 - i > i
0.5 - i32 + 0.5 ^ i
0.5 - i32 + f32
0.5 - i32 < i
0.5 - i32 <= i64
0.5 - i64 == f64
0.5 - i64 > f32
0.5 - i64 >= f64
0.5 - i64 >= i
0.5 / 0.5 != i32
0.5 / 0.5 / i
0.5 / 0.5 / i32
0.5 / 0.5 < i
0.5 / 0.5 == i
0.5 / 0.5 >= i32
0.5 / 0.5 >= min(i32)
0.5 / 1 != i32 == nil
0.5 / 1 - i
0.5 / 1 < f32
0.5 / 1 < i32
0.5 / 1 == i64
0.5 / 1 > 1 ** 0.5
0.5 / f32 != i32
0.5 / f32 * f64
0.5 / f64 / i
0.5 / f64 <= f64
0.5 / f64 == i
0.5 / f64 == i64
0.5 / f64 >= f64 ^ 1
0.5 / i < f64 ? i64 : i64
0.5 / i <= i
0.5 / i == i64 - f32
0.5 / i32 + i32
0.5 / i32 < f32
0.5 / i64 * i32
0.5 < 0.5 == nil ? true : foo
0.5 < 0.5 || ok
0.5 < 1 and ok
0.5 < 1 or fromJSON("foo")?.Bar
0.5 < f32 ? map(list, i32) : i
0.5 < f64 != false ? f32 : score
0.5 < f64 ? list : greet
0.5 < f64 || ok
0.5 < i ? f64 : foo
0.5 < i32 or i32 == 1
0.5 < i64 or ok
0.5 <= 0.5 and ok
0.5 <= 1 ? half : greet
0.5 <= array[i32]
0.5 <= f32 or ok
0.5 <= f64 and !true
0.5 <= f64 or ok
0.5 <= i == ok
0.5 <= i and nil == list
0.5 <= i32 and i < i64
0.5 <= i64 && f64 >= f64
0.5 == 0.5 ? score : i
0.5 == 1 == ok
0.5 == 1 == ok ? "foo" : div
0.5 == 1 or ok
0.5 == 1 || nil != score
0.5 == f32 ? score : i32
0.5 == f64 && ok
0.5 == nil || div != score
0.5 == nil || ok
0.5 > 1 == ok
0.5 > 1 or ok
0.5 > f32 or !true
0.5 > f64 != ok
0.5 >= 0.5 == ok
0.5 >= 0.5 || ok
0.5 >= 1 != ok
0.5 >= 1 and ok
0.5 >= i32 && i > f32
0.5 >= i64 and ok
0.5 ^ 0.5 != i32
0.5 ^ 0.5 + i32
0.5 ^ 0.5 / i
0.5 ^ 0.5 < f64
0.5 ^ 0.5 > i
0.5 ^ 0.5 > i64
0.5 ^ 0.5 >= i32
0.5 ^ 1 * f64
0.5 ^ 1 * i
0.5 ^ 1 + i64
0.5 ^ 1 - -i
0.5 ^ 1 / i
0.5 ^ 1 == f32
0.5 ^ 1 == i32
0.5 ^ f32 + i32
0.5 ^ f32 <= i32
0.5 ^ f32 > f64 ? array : nil
0.5 ^ f32 >= f64
0.5 ^ f32 ^ i32
0.5 ^ f64 - i32
0.5 ^ f64 > f32
0.5 ^ f64 >= f32
0.5 ^ f64 >= f64
0.5 ^ f64 >= i
0.5 ^ f64 ^ i64
0.5 ^ i == i64
0.5 ^ i >= i32
0.5 ^ i32 * i
0.5 ^ i32 * score(i)
0.5 ^ i32 / i
0.5 ^ i32 == i
0.5 ^ i64 < i
0.5 ^ i64 <= f32
0.5 ^ i64 == f64
0.5 ^ i64 > f64
0.5 ^ i64 > i
0.5 ^ i64 > i32
0.5 ^ i64 >= f32
1 != 1 != hasPrefix("bar", "bar")
1 != array[i - 1]
1 != f32 && i32 <= 0.5
1 != f32 == ok
1 != f32 ? i64 : foo
1 != f32 and i in array
1 != f64 != ok
1 != i32 ? score : greet
1 != i64 && ok
1 != i64 ? f32 : greet
1 != nil && ok
1 != nil ? half : foo
1 % 1 != f64
1 % 1 * f32
1 % 1 < f32
1 % 1 > f32
1 % 1 > i
1 % 1 >= i64
1 % i / i32
1 % i < f64
1 % i < i32
1 % i == f32
1 % i32 * i64
1 % i32 < max(i64)
1 % i64 != f32
1 % i64 * f64
1 % i64 + f32
1 % i64 .. i64
1 % i64 <= i64
1 % i64 > f32
1 % i64 > i32
1 * 0.5 + i
1 * 0.5 - -i
1 * 0.5 <= f32
1 * 0.5 > f32
1 * 1 % i
1 * 1 + i32
1 * 1 <= f64
1 * array[i64]
1 * f32 < i
1 * f32 < i32
1 * f32 <= i32
1 * f64 * -i
1 * f64 * f32
1 * f64 + i
1 * i % i
1 * i + f32
1 * i < int(1)
1 * i <= 1 % 1
1 * i > f32
1 * i not in array
1 * i32 % i64
1 * i32 * i32
1 * i32 / i32
1 * i32 > f32
1 * i64 + f64
1 * i64 == i32
1 * i64 > i64
1 ** 0.5 * f64
1 ** 0.5 - i
1 ** 0.5 > i32
1 ** 0.5 ^ f64
1 ** 1 != i
1 ** 1 != i64
1 ** 1 - i
1 ** 1 / i64
1 ** 1 < i64
1 ** 1 == i32
1 ** 1 >= i
1 ** f32 != i64
1 ** f32 / i
1 ** f64 != i64
1 ** f64 ** i64
1 ** f64 + i
1 ** f64 / f32
1 ** f64 < i
1 ** i != i
1 ** i ** i64
1 ** i < f64
1 ** i < i32
1 ** i > f64
1 ** i32 ** (1 / 1)
1 ** i32 == i
1 ** i32 > i
1 ** i64 ** f64
1 ** i64 - f64
1 + 0.5 != i
1 + 0.5 <= f64 / f32
1 + 0.5 <= i32
1 + 1 - i32
1 + 1 < i
1 + 1 == f64
1 + 1 == i64
1 + 1 >= i64
1 + f32 != i
1 + f32 > i
1 + f64 != f64
1 + f64 - i
1 + f64 >= i32
1 + i <= f64
1 + i in map(list, i32)
1 + i32 - i64
1 + i32 < i
1 + i64 >= f32
1 - 0.5 != half(0.5)
1 - 0.5 + i
1 - 0.5 + i32
1 - 0.5 - i64
1 - 0.5 <= f64
1 - 0.5 == i64
1 - 1 .. i64
1 - 1 < i64
1 - 1 == f64
1 - 1 > -f32
1 - f32 != i
1 - f32 <= f64
1 - f32 <= i32
1 - f64 - f32
1 - f64 - f64
1 - f64 < i64
1 - f64 <= i
1 - i .. i64
1 - i < min(f64)
1 - i32 < f64
1 - i32 <= f64
1 - i32 <= i32
1 - i32 >= f64
1 - i64 + i
1 - i64 - f32
1 .. 1 == list
1 .. array[i]
1 .. i == list
1 .. i64 == list
1 / 0.5 + f64
1 / 0.5 - array[i64]
1 / 0.5 < f64
1 / 1 + -0.5
1 / 1 + i32
1 / 1 - -0.5
1 / 1 / f64
1 / 1 < f32
1 / 1 <= f32
1 / 1 <= i
1 / 1 == f64
1 / 1 == i
1 / 1 == i32
1 / 1 > f32
1 / 1 > i64
1 / f32 + -1
1 / f64 * i
1 / f64 * i32
1 / f64 + i32
1 / f64 / f32
1 / f64 == f32
1 / f64 == i
1 / f64 > i
1 / i * i
1 / i < f64 ? ok : add
1 / i32 <= f32
1 / i32 == i
1 / i32 == i64
1 / i32 > i
1 / i64 + i64
1 / i64 == i64
1 / i64 > i
1 / i64 >= i32
1 < array[i64]
1 < f64 != ok
1 < i32 and 1 == nil
1 < i64 ? "foo" not endsWith "foo" : i
1 <= 0.5 and i32 == 1
1 <= 0.5 || ok
1 <= 1 && greet != greet
1 <= 1 and ok
1 <= f32 != ok
1 <= f32 == !ok
1 <= f64 ? add : f64
1 <= i64 or nil == f32
1 == array[i]
1 > 0.5 != ok
1 > 1 and ok
1 > 1 || ok
1 > f32 and ok
1 > f64 == ok
1 > f64 and ok
1 > i32 == ok
1 > i64 || i32 < i
1 >= 1 || ok
1 >= i || ok
1 >= i64 or nil in list
1 ^ 0.5 - f32
1 ^ 0.5 <= f32
1 ^ 0.5 <= i64
1 ^ 0.5 ^ i32
1 ^ 1 - f64
1 ^ 1 - i32
1 ^ 1 - i64
1 ^ 1 / f32
1 ^ 1 < f32
1 ^ 1 < i64 / f32
1 ^ 1 <= 1 ** f64
1 ^ 1 == f64
1 ^ 1 >= f32
1 ^ 1 >= i64
1 ^ f32 == i64
1 ^ f32 > max(f32)
1 ^ f64 != i32
1 ^ f64 * f32
1 ^ f64 ** f64
1 ^ i != findLast(array, false)
1 ^ i != i
1 ^ i * f64
1 ^ i < i32
1 ^ i <= f32
1 ^ i == abs(1)
1 ^ i32 + i
1 ^ i32 < i
1 ^ i32 < i64
1 ^ i32 >= i32
1 ^ i64 ** f64
1 ^ i64 ** i32
1 ^ i64 + i
1 ^ i64 <= i
1 ^ i64 <= i32
1 ^ i64 > i
1 ^ i64 >= i64
[!false]
[!ok]
["foo" != nil]
["foo" endsWith "bar"]
[-0.5]
[-f32]
[-f64]
[-i32]
[-i64, add]
[-i64]
[0.5 * 1]
[0.5 + 0.5]
[0.5 / i]
[0.5 <= f64]
[0.5 <= i, -1]
[0.5 >= i]
[0.5 ^ 1]
[1 != 1]
[1 % 1, !true]
[1 < 0.5]
[1 == i]
[abs(0.5)]
[add != div]
[add == nil]
[add, array]
[add, f32]
[add, f64]
[add, greet]
[add, half]
[add, i64]
[add, score]
[add, toJSON(array)]
[add]
[array == list]
[array, f32]
[array, f64]
[array, greet]
[array, half]
[array, list]
[array, ok]
[array, score]
[array[1]]
[array[i64]]
[array]
[div == half]
[div, f32]
[div, greet]
[div, map(list, half)]
[div, ok]
[div, score]
[div]
[f32 + 1]
[f32 - 0.5]
[f32 < i]
[f32 ^ 0.5]
[f32 ^ f64]
[f32, f64]
[f32, half]
[f32, max(f64)]
[f32]
[f64 != 1]
[f64 != i32]
[f64 * f64]
[f64 < f32]
[f64 >= 1]
[f64, f64]
[f64, foo]
[f64, i32]
[f64, i64]
[f64, list]
[f64, score]
[f64]
[false ? f64 : f32]
[findIndex(array, true)]
[first(array)]
[float(i64)]
[foo, add]
[foo, f32]
[foo, foo]
[foo, i]
[foo, list]
[foo.Qux]
[foo.String(), greet]
[foo.String()]
[foo?.Bar]
[foo?.Qux]
[foo]
[greet, div]
[greet, f32 ^ 0.5]
[greet, f32]
[greet, f64]
[greet, half]
[greet, i32]
[greet, i64]
[greet, list]
[greet]
[half, div]
[half, foo]
[half, greet]
[half]
[i != i64]
[i != i]
[i - 1]
[i .. 1]
[i / 0.5]
[i < f32]
[i > f64]
[i, add]
[i, half]
[i32 * 1]
[i32 <= 0.5]
[i32 == 0.5]
[i32 > 1]
[i32 > f32]
[i32, i]
[i32, score]
[i32]
[i64 / f64]
[i64 == i32]
[i64 >= 1]
[i64 ^ i, i32]
[i64, add]
[i64, div]
[i64, foo]
[i64, i32]
[i64, ok]
[i64]
[i64] == array
[i]
[int(1)]
[len(array)]
[list == list]
[list, div]
[list, f64]
[list, i]
[list]
[map(array, #)]
[map(array, 1 >= i32)]
[map(array, foo)]
[map(list, #)]
[map(list, half)]
[map(list, ok)]
[max(1)]
[max(i32)]
[min(0.5)]
[min(f64)]
[min(i32)]
[nil != ok, foo]
[nil == 0.5]
[nil not in list]
[not false]
[not ok]
[not true]
[ok && ok]
[ok, f32]
[ok, half]
[ok, score]
[ok]
[score != add]
[score(1)]
[score(i)]
[score, array, foo]
[score, f32]
[score, f64]
[score, greet]
[score]
[string(0.5), foo]
[string(f64)]
[string(i32)]
[toJSON(1)]
[toJSON(nil)]
[type(0.5)]
[type(1)]
[type(add)]
[type(false)]
[type(i32)]
[{"foo": foo}]
abs(-0.5)
abs(-1)
abs(-f32)
abs(-f64)
abs(-i)
abs(-i32)
abs(-i64)
abs(0.5 * 0.5)
abs(0.5 * 1)
abs(0.5 * f64)
abs(0.5 * i32)
abs(0.5 * i64)
abs(0.5 ** 0.5)
abs(0.5 ** 1)
abs(0.5 ** f32)
abs(0.5 ** f64)
abs(0.5 ** i64)
abs(0.5 + 0.5)
abs(0.5 + f32)
abs(0.5 + i)
abs(0.5 + i64)
abs(0.5 - 0.5)
abs(0.5 - f32)
abs(0.5 - i)
abs(0.5 - i64)
abs(0.5 / 0.5)
abs(0.5 / 1)
abs(0.5 / f32)
abs(0.5 / f64)
abs(0.5 / i)
abs(0.5 / i64)
abs(0.5 ^ 0.5)
abs(0.5 ^ 1)
abs(0.5 ^ f64)
abs(0.5 ^ i32)
abs(0.5) * i
abs(0.5) - i
abs(0.5) - i64
abs(0.5) / i32
abs(0.5) < f32
abs(0.5) == i32
abs(0.5) > f32
abs(0.5) >= f32
abs(0.5) >= i
abs(0.5) >= i32
abs(0.5) ^ f64
abs(1 % 1)
abs(1 % i)
abs(1 * 0.5)
abs(1 * 1)
abs(1 * f32)
abs(1 ** 1)
abs(1 ** i)
abs(1 + 1)
abs(1 + f64)
abs(1 - 0.5)
abs(1 - i)
abs(1 - i32)
abs(1 / 0.5)
abs(1 / 1)
abs(1 / f32)
abs(1 / f64)
abs(1 / i32)
abs(1 / i64)
abs(1 ^ 0.5)
abs(1 ^ 1)
abs(1 ^ f64)
abs(1) * f64
abs(1) * i
abs(1) ** f64
abs(1) + f64
abs(1) + i
abs(1) - f64
abs(1) .. i
abs(1) / f32
abs(1) < f32
abs(1) < i
abs(1) == f64 ? 1 : foo
abs(1) > i
abs(1) ^ f32
abs(1) ^ i32
abs(abs(0.5))
abs(abs(1))
abs(abs(abs(i)))
abs(abs(f32))
abs(abs(f64))
abs(abs(i))
abs(abs(i32))
abs(abs(i64))
abs(array[1])
abs(array[i])
abs(count(list, true))
abs(f32 * 0.5)
abs(f32 * 1)
abs(f32 * f64)
abs(f32 ** 0.5)
abs(f32 ** 1)
abs(f32 ** i32)
abs(f32 + 0.5)
abs(f32 + 1)
abs(f32 + f32)
abs(f32 + f64)
abs(f32 + i)
abs(f32 + i32)
abs(f32 - 0.5)
abs(f32 - 1)
abs(f32 - f32)
abs(f32 / 1)
abs(f32 / f32)
abs(f32 / f64)
abs(f32 / i32)
abs(f32 ^ 1)
abs(f32 ^ f64)
abs(f32 ^ i32)
abs(f32 ^ i64)
abs(f32)
abs(f32) != i64 / i64
abs(f32) * i32
abs(f32) + i32
abs(f32) <= i64
abs(f32) == i
abs(f32) ^ f64
abs(f64 * 1)
abs(f64 * f32)
abs(f64 * i32)
abs(f64 ** 1)
abs(f64 ** f32)
abs(f64 ** i32)
abs(f64 + 0.5)
abs(f64 + 1)
abs(f64 + i32)
abs(f64 + i64)
abs(f64 - 0.5)
abs(f64 - 1)
abs(f64 - f32)
abs(f64 - i32)
abs(f64 / 0.5)
abs(f64 / f64)
abs(f64 / i)
abs(f64 / i64)
abs(f64 ^ i32)
abs(f64)
abs(f64) * i64
abs(f64) - f32
abs(f64) - i64 - i32
abs(f64) / i
abs(f64) / i64
abs(f64) < f64
abs(f64) <= abs(i32)
abs(f64) <= i
abs(f64) <= i32
abs(f64) == i
abs(false ? 1 : f32)
abs(false ? f64 : 0.5)
abs(false ? false : i64)
abs(findIndex(array, # > i32))
abs(findIndex(array, ok))
abs(findIndex(array, true))
abs(findIndex(list, true))
abs(findLastIndex(array, ok))
abs(findLastIndex(array, true))
abs(findLastIndex(list, ok))
abs(first(array))
abs(float(0.5))
abs(float(1))
abs(float(f32))
abs(float(f64))
abs(float(i))
abs(float(i32))
abs(float(i64))
abs(get(array, i32))
abs(get(array, i64))
abs(half(0.5))
abs(half(f64))
abs(i % i64)
abs(i * 1)
abs(i * i)
abs(i * i32)
abs(i ** 0.5)
abs(i ** 1)
abs(i ** i32)
abs(i + 1)
abs(i + i32)
abs(i - 0.5)
abs(i - 1)
abs(i / 1)
abs(i / i32)
abs(i ^ 0.5)
abs(i ^ f32)
abs(i ^ i32)
abs(i)
abs(i) != float(0.5)
abs(i) % i64
abs(i) * f32
abs(i) ** i
abs(i) ** max(1)
abs(i) / i64
abs(i) <= i32
abs(i) <= i64
abs(i) > f64
abs(i32 % i64)
abs(i32 * 0.5)
abs(i32 * 1)
abs(i32 * i32)
abs(i32 * i64)
abs(i32 ** 0.5)
abs(i32 ** 1)
abs(i32 ** f64)
abs(i32 ** i)
abs(i32 ** i64)
abs(i32 + 0.5)
abs(i32 + f64)
abs(i32 + i32)
abs(i32 - 1)
abs(i32 - f32)
abs(i32 - f64)
abs(i32 - i64)
abs(i32 / 1)
abs(i32 / i)
abs(i32 / i32)
abs(i32 ^ 0.5)
abs(i32 ^ 1)
abs(i32 ^ i)
abs(i32 ^ i64)
abs(i32)
abs(i32) % i32
abs(i32) ** i64
abs(i32) / -f32
abs(i32) < f32
abs(i32) > min(i64, f64, i32)
abs(i32) ^ f64
abs(i32) not in array
abs(i64 % 1)
abs(i64 % i32)
abs(i64 * 1)
abs(i64 * f32)
abs(i64 * i)
abs(i64 * i32)
abs(i64 * i64)
abs(i64 ** 0.5)
abs(i64 ** 1)
abs(i64 ** i64)
abs(i64 + 0.5)
abs(i64 + 1)
abs(i64 + i)
abs(i64 + i32)
abs(i64 + i64)
abs(i64 - 1)
abs(i64 - f64)
abs(i64 - i32)
abs(i64 / i32)
abs(i64 ^ i64)
abs(i64)
abs(i64) != f64
abs(i64) - f64
abs(i64) - i64
abs(i64) .. i64
abs(i64) == f32
abs(i64) == i
abs(i64) == i32
abs(i64) == nil ? i : f64
abs(i64) > i64
abs(i64) >= f64
abs(i64) in array
abs(int(0.5))
abs(int(1))
abs(int(f32))
abs(int(f64))
abs(int(i))
abs(int(i32))
abs(int(i64))
abs(last(array))
abs(len("bar"))
abs(len("foo"))
abs(len(array))
abs(len(list))
abs(max(0.5))
abs(max(1))
abs(max(1, 1))
abs(max(1, i64, f64))
abs(max(f32))
abs(max(f64))
abs(max(i))
abs(max(i32))
abs(max(i64))
abs(min(0.5))
abs(min(0.5, 1))
abs(min(1))
abs(min(1, f32))
abs(min(f32))
abs(min(f64))
abs(min(i))
abs(min(i32))
abs(min(i64))
abs(ok ? 1 : "foo")
abs(ok ? f32 : 1)
abs(ok ? i : "bar")
abs(score(1))
abs(score(i))
abs(true ? f32 : "bar")
abs(true ? f64 : i32)
add
add != add
add != div
add != div ? foo : i64
add != div and ok
add != foo.Qux
add != foo.String
add != foo?.Qux
add != foo?.String
add != greet
add != greet ? score : f32
add != half
add != half == nil
add != half ? 0.5 : ok
add != nil == nil
add != nil ? "bar" : f32
add != nil ? half : f32
add != score
add == add
add == add == ok
add == div
add == div ? i32 : f64
add == div or ok
add == foo.Qux
add == foo.String
add == foo?.Qux
add == foo?.String
add == greet
add == greet ? 1 : 1
add == half
add == nil && ok
add == nil ? "foo" : list
add == nil ? add : half
add == nil ? add : score
add == nil ? i32 : div
add == nil ? score : i64
add == nil || ok
add == score
add == score != true
add == score and i32 >= 1
add == score or 0.5 < 1
add in [div]
add not in sort(array)
add(1, 1) ** i
add(1, 1) ^ i
add(1, i) .. i64
add(i, 1 - i32)
add(i, abs(i))
add(i, i)
add(i, i64 % 1)
add(i, min(i))
add(min(1, 1), i32 * 1)
add(score(i, i), i)
all(1 .. i32, ok)
all(array, !(# <= #))
all(array, !false)
all(array, !ok)
all(array, !true or 0.5 < #)
all(array, "bar" in foo)
all(array, "bar" matches "bar")
all(array, # != #)
all(array, # != 1)
all(array, # != f32)
all(array, # != f64)
all(array, # != i64)
all(array, # != nil)
all(array, # + # >= 0.5 + i)
all(array, # < #)
all(array, # < 0.5)
all(array, # < 1)
all(array, # <= #)
all(array, # <= 0.5)
all(array, # <= f64)
all(array, # <= i)
all(array, # == #)
all(array, # == 0.5)
all(array, # == i32)
all(array, # == i64)
all(array, # == nil)
all(array, # > #)
all(array, # > 0.5)
all(array, # > 1)
all(array, # > f32)
all(array, # > f64)
all(array, # > i)
all(array, # > i64)
all(array, # >= #)
all(array, # >= 0.5)
all(array, # >= f64)
all(array, # >= i)
all(array, # ^ # == i64)
all(array, # in array)
all(array, # not in array)
all(array, 0.5 != #)
all(array, 0.5 != f32)
all(array, 0.5 + 0.5 >= #)
all(array, 0.5 < #)
all(array, 0.5 < 1)
all(array, 0.5 < i64)
all(array, 0.5 <= #)
all(array, 0.5 == #)
all(array, 0.5 == f32)
all(array, 0.5 > #)
all(array, 0.5 > 1)
all(array, 0.5 >= #)
all(array, 1 != #)
all(array, 1 != i)
all(array, 1 != i64)
all(array, 1 != nil)
all(array, 1 < #)
all(array, 1 <= #)
all(array, 1 == #)
all(array, 1 > #)
all(array, 1 in array)
all(array, all(array, add != score))
all(array, all(array, false))
all(array, all(list, false))
all(array, f32 >= #)
all(array, f64 != #)
all(array, f64 != i32)
all(array, f64 < #)
all(array, f64 <= #)
all(array, f64 == #)
all(array, f64 > #)
all(array, false or ok)
all(array, i != f32)
all(array, i == #)
all(array, i > #)
all(array, i >= #)
all(array, i32 != i64)
all(array, i32 < #)
all(array, i32 <= #)
all(array, i32 <= i32)
all(array, i32 > #)
all(array, i32 >= 1 % #)
all(array, i64 < #)
all(array, i64 < 1)
all(array, i64 < i64)
all(array, i64 == #)
all(array, i64 == 0.5)
all(array, i64 > #)
all(array, list != list)
all(array, nil != #)
all(array, nil != i)
all(array, nil == "foo")
all(array, nil == div)
all(array, nil in list)
all(array, not (nil in array))
all(array, not false)
all(array, not true)
all(array, ok)
all(array, one(array, ok))
all(array, score == add)
all(array, score(#) > f32)
all(array, true || false)
all(array, true) or ok
all(false ? greet : "foo", # == i32)
all(filter(array, ok), # < #)
all(filter(array, true), ok)
all(i32 .. 1, 0.5 < i32)
all(i64 .. i64, # != #)
all(list, !any(array, false))
all(list, !false)
all(list, !ok)
all(list, "bar" not in #)
all(list, "foo" >= "foo")
all(list, # != #)
all(list, # != foo)
all(list, # == #)
all(list, # == foo)
all(list, 0.5 != f64)
all(list, 0.5 != nil)
all(list, 0.5 <= f64)
all(list, 0.5 > 1)
all(list, 1 != 0.5)
all(list, 1 != i)
all(list, 1 < f32)
all(list, 1 < i)
all(list, 1 <= 0.5)
all(list, 1 == 1)
all(list, 1 > f32)
all(list, 1 >= i64)
all(list, all(array, true))
all(list, array != nil)
all(list, div != div)
all(list, f32 != 0.5)
all(list, f32 == f64)
all(list, f64 < 1)
all(list, f64 <= 1)
all(list, f64 <= i)
all(list, f64 <= i32)
all(list, f64 >= 1)
all(list, false) or 0.5 <= 1
all(list, foo != #)
all(list, greet != half)
all(list, greet == score)
all(list, i <= i64)
all(list, i32 != i64)
all(list, i32 < i64)
all(list, i32 <= 0.5)
all(list, i32 <= f64)
all(list, int(i32) != i32)
all(list, list != nil)
all(list, nil != 1)
all(list, nil != foo)
all(list, nil == #)
all(list, nil == greet)
all(list, nil in list)
all(list, none(array, ok))
all(list, not false)
all(list, not ok)
all(list, not true)
all(list, ok and false)
all(list, ok)
all(list, ok) or ok
all(list, true != false)
all(list, true != true)
all(list, true ? true : 1)
all(list[i64:i32], !false)
all(map(array, #), # != #)
all(map(array, #), # != 0.5)
all(map(array, #), # >= #)
all(map(array, #), i64 == #)
all(map(array, #), true or false)
all(map(array, 1), ok)
all(map(array, i), f64 > #)
all(map(array, ok), #)
all(map(list, "bar"), ok)
all(map(list, #), "bar" not in #)
all(map(list, #), f32 > 1)
all(map(list, 1), ok)
all(map(list, false), #)
all(map(list, i64), # <= #)
all(map(list, ok), #)
all(map(list, true), # == #)
all(map(list, true), #)
all(map(list, true), ok)
any([0.5, add, 0.5], # == #)
any([1], i64 >= #)
any(array, !false)
any(array, "foo" <= "foo")
any(array, # != #)
any(array, # != 0.5)
any(array, # != 1)
any(array, # != i)
any(array, # != i32)
any(array, # != i64)
any(array, # != nil)
any(array, # < #)
any(array, # < 0.5)
any(array, # < 1)
any(array, # < f32)
any(array, # < f64)
any(array, # < i)
any(array, # < i32)
any(array, # <= #)
any(array, # <= 0.5)
any(array, # <= 1 ^ #)
any(array, # <= 1)
any(array, # <= i)
any(array, # <= i32)
any(array, # == #)
any(array, # == 1)
any(array, # == f64)
any(array, # == i)
any(array, # == i32)
any(array, # == i64)
any(array, # == nil)
any(array, # > #)
any(array, # > 1)
any(array, # > i32)
any(array, # > i64)
any(array, # >= #)
any(array, # >= 0.5)
any(array, # >= 1)
any(array, # >= f64)
any(array, # >= i)
any(array, # >= i32)
any(array, # in array)
any(array, # not in array)
any(array, 0.5 != #)
any(array, 0.5 != f64)
any(array, 0.5 != i)
any(array, 0.5 < 0.5)
any(array, 0.5 <= #)
any(array, 0.5 == #)
any(array, 0.5 == 0.5)
any(array, 0.5 > #)
any(array, 0.5 > f32)
any(array, 1 < #)
any(array, 1 <= i64)
any(array, 1 == #)
any(array, 1 > f64)
any(array, 1 >= i)
any(array, 1 >= i32)
any(array, all(list, true))
any(array, array == array)
any(array, div != nil)
any(array, f32 < #)
any(array, f32 > #)
any(array, f64 != #)
any(array, f64 != 1)
any(array, f64 < #)
any(array, f64 <= 0.5)
any(array, f64 <= f32)
any(array, f64 == #)
any(array, f64 > #)
any(array, f64 > 0.5)
any(array, f64 >= i64)
any(array, false != nil)
any(array, false) and f32 != f32
any(array, greet != half)
any(array, half != div)
any(array, half != nil)
any(array, i != 1)
any(array, i < # ** #)
any(array, i <= #)
any(array, i == #)
any(array, i == i)
any(array, i > #)
any(array, i >= #)
any(array, i32 != #)
any(array, i32 != i64)
any(array, i32 <= #)
any(array, i32 == #)
any(array, i32 > #)
any(array, i32 >= i64)
any(array, i64 != #)
any(array, i64 != i64)
any(array, i64 <= 0.5)
any(array, i64 == #)
any(array, i64 > #)
any(array, i64 > 1)
any(array, i64 > f32)
any(array, i64 >= i)
any(array, nil != #)
any(array, nil != f64)
any(array, nil != greet)
any(array, nil == #)
any(array, nil == 1)
any(array, not ok)
any(array, not true)
any(array, ok)
any(array, one(list, false))
any(array, true ? ok : f32)
any(array, true) and ok
any(filter(array, ok), ok)
any(filter(list, false), ok)
any(filter(list, true), # == #)
any(list, !true)
any(list, "bar" contains "foo")
any(list, "bar" matches "foo")
any(list, "bar" not in #)
any(list, "bar" not startsWith "foo")
any(list, # != #)
any(list, # != foo)
any(list, # != nil)
any(list, # == #)
any(list, # == nil)
any(list, # in list)
any(list, # not in list)
any(list, 0.5 < 1)
any(list, 0.5 <= f32)
any(list, 0.5 == 0.5)
any(list, 0.5 >= 0.5)
any(list, 0.5 >= f32)
any(list, 0.5 >= i64)
any(list, 1 <= 0.5)
any(list, 1 == f32)
any(list, f32 != i)
any(list, f32 == nil)
any(list, f32 >= i)
any(list, f64 <= 1)
any(list, f64 > 0.5)
any(list, false ? nil : false)
any(list, foo == foo)
any(list, greet == div)
any(list, half != nil)
any(list, i != 1)
any(list, i < f32)
any(list, i < f64)
any(list, i > i64)
any(list, i32 != i32)
any(list, i32 < 0.5)
any(list, i32 == f64)
any(list, i64 < 1)
any(list, i64 < f64)
any(list, i64 < i64)
any(list, i64 <= i32)
any(list, i64 >= 1)
any(list, i64 >= f32)
any(list, list != nil)
any(list, nil != #)
any(list, nil != #?.String())
any(list, nil != nil)
any(list, nil == #)
any(list, nil == 1)
any(list, nil == i64)
any(list, nil == nil)
any(list, not false)
any(list, not ok)
any(list, ok and foo != #)
any(list, ok)
any(list, ok) && i <= 1
any(list, ok) ? array : foo
any(list, true or ok)
any(list, true) ? f64 : foo.Bar
any(map(array, #), # == #)
any(map(array, #), ok)
any(map(array, 0.5), # <= #)
any(map(array, f64), # < #)
any(map(array, false), #)
any(map(array, ok), #)
any(map(list, #), i == f64)
any(map(list, #), ok)
any(map(list, 1), # != #)
any(map(list, array), ok)
any(map(list, foo), # != #)
any(map(list, greet), # == #)
any(ok ? "bar" : half, ok)
any(splitAfter("bar", "foo"), # not startsWith #)
array
array != [array]
array != array
array != filter(list, true)
array != list
array != map(array, i)
array != nil != ok
array != nil ? 0.5 : i32
array != nil ? true : nil
array != nil or nil == f32
array != nil || ok
array != sort(array)
array != {"bar": f32, "foo": 1}.ok
array == array
array == array ? "foo" : 0.5
array == list
array == list ? i : half
array == map(array, #)
array == map(array, add)
array == nil != nil
array == nil != true ? 0.5 : 0.5
array == nil && (false || ok)
array[-1]
array[-i32]
array[-i64]
array[-i]
array[1 % 1]
array[1 % i:i64]
array[1] != f32
array[1] != score(i)
array[1] <= f64
array[1] == f32
array[1] == i64
array[1] ^ 0.5 ^ f64
array[1] ^ i32
array[false ? half : 0.5]
array[false ? i : i32]
array[i - i64]
array[i32:i32]
array[i32]
array[i32] - f64
array[i32] .. i32
array[i64 % 1]
array[i64:i32]
array[i64:i]
array[i64]
array[i64] ** f32
array[i64] / i
array[i64] < i
array[i64] == f64
array[i64] > f32
array[i64] >= -i64
array[i:i64]
array[i:i]
array[i]
array[i] ** i64
array[i] + f32
array[i] < i
array[i] == min(i32, i)
array[i] > i32
array[int(1)]
array[int(i32)]
array[max(i64)]
array[min(1)]
array[min(i32)]
array[min(i64)]
array[score(1)]
array[score(i)]
count([list], false or ok)
count(array, !ok)
count(array, "bar" != "bar")
count(array, "bar" not endsWith "bar")
count(array, # != #)
count(array, # != f32)
count(array, # != i32)
count(array, # < #)
count(array, # < 0.5)
count(array, # < 1)
count(array, # < f32)
count(array, # < f64)
count(array, # < i)
count(array, # < i64)
count(array, # <= #)
count(array, # <= 0.5)
count(array, # <= f32)
count(array, # <= f64)
count(array, # <= i)
count(array, # <= i32)
count(array, # == #)
count(array, # == 1)
count(array, # == f32)
count(array, # == i)
count(array, # == i64)
count(array, # == nil)
count(array, # > #)
count(array, # > 0.5)
count(array, # > i)
count(array, # > i64)
count(array, # >= # / #)
count(array, # >= #)
count(array, # >= 0.5)
count(array, # >= 1)
count(array, # >= f64)
count(array, # >= i)
count(array, # >= i64)
count(array, 0.5 != #)
count(array, 0.5 <= #)
count(array, 0.5 == #)
count(array, 0.5 > #)
count(array, 0.5 > 1)
count(array, 0.5 >= #)
count(array, 0.5 >= 0.5)
count(array, 0.5 >= i)
count(array, 1 != #)
count(array, 1 < #)
count(array, 1 < 0.5)
count(array, 1 < 1)
count(array, 1 <= #)
count(array, 1 > #)
count(array, 1 >= #)
count(array, add == half)
count(array, f32 != i)
count(array, f32 < # ? true : half)
count(array, f32 < #)
count(array, f32 < 0.5)
count(array, f32 <= #)
count(array, f32 <= 1)
count(array, f32 <= i)
count(array, f32 == #)
count(array, f32 == 1)
count(array, f64 != #)
count(array, f64 < #)
count(array, f64 <= #)
count(array, f64 == #)
count(array, f64 > #)
count(array, false == true)
count(array, false) != f64
count(array, false) / i
count(array, false) >= f32
count(array, foo not in list)
count(array, greet != greet)
count(array, greet == score)
count(array, i != f32)
count(array, i == nil)
count(array, i > #)
count(array, i >= #)
count(array, i32 != 1)
count(array, i32 < #)
count(array, i32 < 0.5)
count(array, i32 == #)
count(array, i32 > i)
count(array, i32 >= #)
count(array, i32 >= 1)
count(array, i64 != #)
count(array, i64 < #)
count(array, i64 <= 1)
count(array, i64 <= f64)
count(array, i64 == #)
count(array, i64 == i64)
count(array, i64 > 1)
count(array, i64 > f32)
count(array, nil != #)
count(array, nil == #)
count(array, nil == foo)
count(array, not ok)
count(array, ok)
count(array, ok) + i64
count(array, ok) - i64
count(array, ok) .. i64
count(array, one(array, false))
count(array, true ? false : 0.5)
count(array, true) != 1 ^ f32
count(array, true) ** f32
count(array, true) / int(0.5)
count(array, true) >= f64 / 0.5
count(filter(list, false), ok)
count(i .. 1, # > #)
count(i .. i32, # > #)
count(i32 .. 1, # == #)
count(i64 .. i, div == nil)
count(i64 .. i, ok)
count(list, !false)
count(list, !ok)
count(list, "bar" == "bar")
count(list, "bar" in #)
count(list, "bar" matches "foo")
count(list, "bar" not in #)
count(list, "foo" in #)
count(list, "foo" not in #)
count(list, # != #)
count(list, # != nil)
count(list, # == #)
count(list, # == nil)
count(list, 0.5 == f32)
count(list, 0.5 > 0.5)
count(list, 0.5 >= i32)
count(list, 1 != 1)
count(list, 1 != f32)
count(list, 1 < 0.5)
count(list, 1 <= i)
count(list, 1 >= f32)
count(list, 1 >= i32)
count(list, all(list, true))
count(list, f32 <= i32)
count(list, f64 != i)
count(list, false ? # : ok)
count(list, false or ok)
count(list, false || false)
count(list, false) .. i32
count(list, false) > i64
count(list, foo != #)
count(list, half == div)
count(list, i == i64)
count(list, i32 == i)
count(list, i32 == i32)
count(list, list == array)
count(list, nil != #)
count(list, nil != score)
count(list, nil == #)
count(list, nil == add)
count(list, nil == true)
count(list, none(list, ok))
count(list, not false)
count(list, not ok)
count(list, not true)
count(list, ok == nil)
count(list, ok)
count(list, ok) - i32
count(list, ok) < f64
count(list, ok) > -0.5
count(list, ok) >= i
count(list, true and ok)
count(list, true) ** i64
count(list, true) == f64
count(list, true) ^ i64
count(map(array, #), # != #)
count(map(array, #), # > #)
count(map(array, #), i == #)
count(map(array, #), ok)
count(map(array, add), ok)
count(map(array, div), ok)
count(map(array, foo), ok)
count(map(array, i32), 0.5 == f32)
count(map(array, i32), 1 != #)
count(map(array, i64), # == 0.5)
count(map(array, true), #)
count(map(list, #), "bar" in #)
count(map(list, #), # == #)
count(map(list, #), # == nil)
count(map(list, 0.5), # != nil)
count(map(list, f32), # <= #)
count(map(list, true), #)
count(sort(array), foo == #)
count(sort(array), ok)
date("bar", "bar")?.String
div
div != add
div != add != ok
div != div
div != div ? score : 0.5
div != div or half != greet
div != foo.Qux
div != foo.String
div != foo?.Qux
div != greet
div != half
div != half ? f32 : ok
div != half and !ok
div != nil != ok
div != nil ? array : add
div != nil ? i : i64
div != score
div == add
div == div
div == div ? 0.5 : half
div == div ? nil : i
div == div || true ? f32 : add
div == foo.Qux
div == foo.String
div == foo?.Qux
div == foo?.String
div == greet
div == greet != ok
div == greet || !false
div == half
div == nil ? greet : foo
div == nil ? half : half
div == nil ? score : i64
div == nil || ok
div == score
div == score == ok
div == score ? true : "bar"
div in map(list, add)
div not in [add]
div not in [half, f32, false]
div not in map(array, div)
div(-1, i)
div(1, 1) > i64
div(1, i) >= i64
div(i, 1) / f32
div(i, 1) == i
div(i, i)
f32
f32 != --f64
f32 != -1
f32 != 0.5 * f32
f32 != 0.5 + i64
f32 != 0.5 / i64
f32 != 0.5 == ok
f32 != 0.5 ? array : ok
f32 != 0.5 ? list : 1
f32 != 0.5 ^ i32
f32 != 1 % i32
f32 != 1 * 1
f32 != 1 * i64
f32 != 1 ** 0.5
f32 != 1 - i
f32 != 1 ? "foo" : foo
f32 != 1 ^ f32
f32 != abs(i64)
f32 != f32
f32 != f32 + f64
f32 != f32 - f64
f32 != f64
f32 != f64 ** i32
f32 != f64 + i32
f32 != f64 - f32
f32 != f64 ^ i32
f32 != findIndex(list, ok)
f32 != float(i)
f32 != i
f32 != i * i64
f32 != i - f64
f32 != i32
f32 != i64
f32 != i64 * 1
f32 != i64 ? f64 : f32
f32 != len(array)
f32 != max(i)
f32 != min(1)
f32 != min(f64)
f32 != nil ? half : greet
f32 != score(1)
f32 * (1 - f32)
f32 * (i + 1)
f32 * (i32 + f32)
f32 * (i64 + f32)
f32 * (i64 - i64)
f32 * -0.5
f32 * -f32
f32 * -f64
f32 * -i32
f32 * 0.5 != f32
f32 * 0.5 ** f32
f32 * 0.5 - f32
f32 * 0.5 < f64
f32 * 0.5 < i32
f32 * 0.5 <= f32
f32 * 0.5 <= f32 ? "bar" : array
f32 * 0.5 <= i64
f32 * 1 != f32
f32 * 1 * 1
f32 * 1 ** f64
f32 * 1 + i
f32 * 1 - i
f32 * 1 / i64
f32 * 1 < f64
f32 * 1 <= f32
f32 * 1 >= i32
f32 * array[i64]
f32 * count(array, ok)
f32 * f32
f32 * f32 * i
f32 * f32 ^ i64
f32 * f64
f32 * f64 * i64
f32 * f64 + f32
f32 * f64 - i
f32 * f64 ^ f32
f32 * findIndex(list, true)
f32 * float(0.5)
f32 * i
f32 * i < f64
f32 * i <= -i64
f32 * i <= min(0.5, f64)
f32 * i32
f32 * i32 ** 1
f32 * i32 - i64
f32 * i64
f32 * i64 ** 0.5
f32 * i64 ** i64
f32 * i64 < f64
f32 * i64 < half(f64)
f32 * i64 ^ i
f32 * i64 ^ i64
f32 * int(f64)
f32 * max(f32)
f32 * min(0.5)
f32 * min(f64)
f32 * score(1)
f32 ** (0.5 + i)
f32 ** (0.5 - 0.5)
f32 ** (1 - i64)
f32 ** (1 / 0.5)
f32 ** (f32 * i)
f32 ** (f32 + 0.5)
f32 ** (f32 + i64)
f32 ** (f32 - 1)
f32 ** (f64 - i32)
f32 ** (i32 * 1)
f32 ** (i32 * i)
f32 ** -0.5
f32 ** -1
f32 ** -f64
f32 ** -i
f32 ** -i32
f32 ** -i64
f32 ** 0.5 >= i64
f32 ** 0.5 ^ i64
f32 ** 1 * f32
f32 ** 1 ** 0.5
f32 ** 1 / i32
f32 ** 1 <= i
f32 ** array[i64]
f32 ** f32
f32 ** f32 * i ^ f64
f32 ** f32 + f32
f32 ** f32 - 0.5 + 1
f32 ** f32 ^ 1
f32 ** f32 ^ i
f32 ** f64
f32 ** f64 + i64
f32 ** f64 <= f64
f32 ** f64 >= f32
f32 ** float(i64)
f32 ** half(f64)
f32 ** i
f32 ** i * f64
f32 ** i / f64
f32 ** i == score(i)
f32 ** i32
f32 ** i32 ** i32
f32 ** i32 >= i32
f32 ** i64
f32 ** i64 * i32
f32 ** i64 + i64
f32 ** i64 / i64
f32 ** int(0.5)
f32 ** int(1)
f32 ** len("foo")
f32 ** len(list)
f32 ** max(f32)
f32 ** max(f64)
f32 ** max(i64)
f32 + -0.5
f32 + -1
f32 + -f32
f32 + -i
f32 + -i64
f32 + 0.5 + 1
f32 + 0.5 + f32
f32 + 1 * 0.5
f32 + 1 * i32
f32 + 1 ** f64
f32 + 1 - f32
f32 + 1 - i64
f32 + 1 < i32
f32 + abs(0.5)
f32 + abs(f32)
f32 + count(array, true)
f32 + f32
f32 + f32 + i32
f32 + f32 == 0.5 ^ i
f32 + f64
f32 + f64 - 0.5
f32 + f64 - f32
f32 + f64 / f64
f32 + f64 < f32
f32 + f64 ^ f32
f32 + find(array, ok)
f32 + float(f64)
f32 + half(0.5)
f32 + i
f32 + i != i
f32 + i - i
f32 + i ^ f64
f32 + i32
f32 + i32 * 0.5
f32 + i32 + 0.5
f32 + i32 >= f32
f32 + i64
f32 + i64 % 1
f32 + i64 - 1
f32 + i64 - f32
f32 + int(1)
f32 + int(f64)
f32 + int(i32)
f32 + len(array)
f32 + max(0.5)
f32 + max(f64)
f32 + max(i64)
f32 + min(1)
f32 + min(f32)
f32 + min(i32)
f32 + min(i64, 1, 1)
f32 + score(1)
f32 + score(i)
f32 - -0.5
f32 - -1
f32 - -f64
f32 - -i
f32 - -i32
f32 - 0.5 + f64
f32 - 0.5 - i32
f32 - 0.5 - i64
f32 - 0.5 <= f64
f32 - 0.5 <= i64
f32 - 0.5 >= i64
f32 - 0.5 ^ f64
f32 - 0.5 ^ i32
f32 - 1 != i64
f32 - 1 % 1
f32 - 1 % i64
f32 - 1 + 1
f32 - 1 + i32 % i
f32 - 1 - f32
f32 - abs(i32)
f32 - array[i]
f32 - f32
f32 - f32 - f64
f32 - f32 - i32
f32 - f32 == i
f32 - f32 == min(1)
f32 - f32 >= i
f32 - f64
f32 - f64 * 1
f32 - f64 ** i32
f32 - f64 + f32
f32 - f64 + i64
f32 - f64 - f32
f32 - f64 - i
f32 - f64 <= f32
f32 - f64 ^ 1
f32 - float(0.5)
f32 - float(1)
f32 - float(i32)
f32 - half(0.5)
f32 - i
f32 - i % 1
f32 - i * f32
f32 - i + i32 % 1
f32 - i + i32 ** 0.5
f32 - i - 0.5
f32 - i32
f32 - i32 * 1
f32 - i32 ** f32
f32 - i32 ** i32
f32 - i32 + 1
f32 - i32 >= i
f32 - i32 ^ i
f32 - i64
f32 - i64 - 1
f32 - i64 <= i32
f32 - i64 ^ 1
f32 - int(0.5)
f32 - int(i64)
f32 - len("bar")
f32 - len(list)
f32 - max(i32)
f32 - min(1)
f32 - min(i64)
f32 - score(i)
f32 / (0.5 + i64)
f32 / (1 - i)
f32 / (i64 - f64)
f32 / -0.5
f32 / -f32
f32 / -f64
f32 / -i
f32 / -i32
f32 / 0.5 * 0.5
f32 / 0.5 * i
f32 / 0.5 - f64
f32 / 0.5 - i
f32 / 0.5 - i64
f32 / 0.5 > f64
f32 / 1 != f64
f32 / 1 * i64
f32 / 1 ** f32
f32 / 1 - f64 - i64
f32 / 1 >= f32
f32 / 1 ^ 0.5
f32 / 1 ^ i
f32 / abs(1)
f32 / abs(f32)
f32 / f32
f32 / f32 / f32
f32 / f32 < f32
f32 / f64
f32 / f64 ^ 0.5
f32 / float(i64)
f32 / get(array, 1)
f32 / half(0.5)
f32 / i
f32 / i <= i64
f32 / i32
f32 / i32 != i
f32 / i32 ** i
f32 / i32 / f64
f32 / i32 >= i
f32 / i64
f32 / i64 * i64
f32 / i64 > i32
f32 / i64 ^ 1
f32 / i64 ^ i
f32 / int(f32)
f32 / int(f64)
f32 / int(i)
f32 / int(i32)
f32 / last(array)
f32 / max(0.5)
f32 / max(1)
f32 / min(f32)
f32 < -0.5
f32 < -f32
f32 < -f64
f32 < -i32
f32 < -i64
f32 < 0.5 != true
f32 < 0.5 ? array : array
f32 < 0.5 ? false : score
f32 < 0.5 ? i64 : i32
f32 < 0.5 ? ok : f32
f32 < 0.5 ^ f32
f32 < 1 != ok
f32 < 1 * f32
f32 < 1 ** 1
f32 < 1 ** i
f32 < 1 - i
f32 < 1 / 0.5
f32 < 1 ? f32 : i64
f32 < 1 ? foo : i
f32 < 1 ? i64 : foo
f32 < 1 || not ok
f32 < abs(1)
f32 < abs(i)
f32 < array[i64]
f32 < array[i]
f32 < div(1, 1)
f32 < f32
f32 < f32 ** 1
f32 < f32 ^ 0.5
f32 < f64
f32 < f64 != ok
f32 < f64 / f64
f32 < f64 == nil
f32 < f64 == true
f32 < f64 ? "foo" : half
f32 < float(f32)
f32 < float(i64)
f32 < half(f64)
f32 < i
f32 < i * 1
f32 < i - i32
f32 < i ? greet : "foo"
f32 < i32
f32 < i32 ** 0.5
f32 < i32 or ok
f32 < i32 || ok
f32 < i64
f32 < i64 != nil
f32 < i64 && ok
f32 < i64 * i32
f32 < i64 - f32
f32 < int(f64)
f32 < max(1)
f32 < score(1)
f32 < score(i)
f32 <= -0.5
f32 <= -1
f32 <= -f32
f32 <= -f64
f32 <= -i
f32 <= -i64
f32 <= -min(i64)
f32 <= 0.5 * 0.5
f32 <= 0.5 ** i32
f32 <= 0.5 - 1
f32 <= 0.5 / 0.5
f32 <= 0.5 == ok
f32 <= 0.5 == true
f32 <= 1 != nil
f32 <= 1 % i
f32 <= 1 * 0.5
f32 <= 1 * i32
f32 <= 1 == ok
f32 <= abs(1)
f32 <= f32
f32 <= f32 ** i64
f32 <= f32 ? 0.5 : foo
f32 <= f64
f32 <= f64 ? ok : f64
f32 <= f64 ^ f32
f32 <= f64 and ok
f32 <= findIndex(list, ok)
f32 <= first(array)
f32 <= half(0.5)
f32 <= i
f32 <= i != nil
f32 <= i % i64
f32 <= i ** i32
f32 <= i - 0.5
f32 <= i / f32
f32 <= i == ok
f32 <= i32
f32 <= i32 * i64
f32 <= i32 ** i32
f32 <= i32 + i32
f32 <= i32 - 1
f32 <= i32 / 1
f32 <= i32 ? 0.5 : i32
f32 <= i32 and ok
f32 <= i64
f32 <= i64 * i
f32 <= i64 ? true : array
f32 <= i64 or ok
f32 <= int(0.5)
f32 <= int(i)
f32 <= len("foo")
f32 <= max(f32)
f32 <= max(i64)
f32 <= min(i64, i32)
f32 <= score(1)
f32 <= score(i)
f32 == --f64
f32 == -0.5
f32 == -1
f32 == -f32
f32 == -i32
f32 == -i64
f32 == 0.5 && i32 == i32
f32 == 0.5 * i32
f32 == 0.5 ** 1
f32 == 0.5 and ok
f32 == 1 && ok ? add : f32
f32 == 1 ^ i
f32 == abs(1)
f32 == array[1]
f32 == count(array, ok)
f32 == f32
f32 == f32 ** f32
f32 == f32 - i32
f32 == f32 ? 1 : greet
f32 == f32 ? list : "bar"
f32 == f64
f32 == f64 - 1
f32 == f64 - f64
f32 == f64 ? ok : i64
f32 == find(array, ok)
f32 == findLast(array, ok)
f32 == findLastIndex(list, true)
f32 == get(array, 1)
f32 == i
f32 == i * i64
f32 == i + f64 + 0.5
f32 == i - f64
f32 == i - i32
f32 == i / 0.5
f32 == i ? "foo" : i64
f32 == i ? i : 0.5
f32 == i32
f32 == i32 % 1
f32 == i32 - 0.5
f32 == i64
f32 == i64 % i
f32 == i64 * 0.5
f32 == int(1)
f32 == max(0.5, 1)
f32 == max(i)
f32 == min(0.5)
f32 == min(i64)
f32 == nil ? "foo" : div
f32 == nil ? i32 : greet
f32 == score(1)
f32 > -0.5
f32 > -f64
f32 > -i
f32 > -i32
f32 > -i64
f32 > 0.5 != false
f32 > 0.5 != ok
f32 > 0.5 - 0.5
f32 > 0.5 / 0.5
f32 > 0.5 ? foo : f64
f32 > 0.5 ? greet : half
f32 > 1 % 1
f32 > 1 ** 0.5
f32 > 1 + f32
f32 > 1 / i64
f32 > 1 == true
f32 > 1 ? nil : half
f32 > 1 ^ i32
f32 > array[i32]
f32 > f32
f32 > f32 ** f32
f32 > f32 - i
f32 > f32 == true
f32 > f64
f32 > f64 - i32
f32 > f64 / i64
f32 > f64 ? array : false
f32 > f64 ? true : array
f32 > f64 or ok
f32 > i
f32 > i * 0.5
f32 > i + f32
f32 > i32
f32 > i32 != ok
f32 > i32 * i
f32 > i64
f32 > i64 ? 1 : f64
f32 > i64 ? ok : greet
f32 > int(0.5)
f32 > int(f64)
f32 > max(i32)
f32 > max(i32, 1)
f32 > min(f64)
f32 > score(1)
f32 > score(i)
f32 >= -f64
f32 >= -i
f32 >= -i32
f32 >= -i64
f32 >= 0.5 ** f64
f32 >= 0.5 - 0.5
f32 >= 0.5 == ok
f32 >= 1 != ok
f32 >= 1 != true
f32 >= 1 % 1
f32 >= 1 % i
f32 >= 1 - 1
f32 >= 1 - i
f32 >= 1 - i64
f32 >= 1 ? "foo" endsWith "foo" : f64
f32 >= abs(1)
f32 >= f32
f32 >= f32 ** 1
f32 >= f32 ** f32
f32 >= f32 + i32
f32 >= f64
f32 >= f64 + i32
f32 >= first(array)
f32 >= float(i32)
f32 >= float(i64)
f32 >= half(f64)
f32 >= i
f32 >= i != true
f32 >= i * 0.5
f32 >= i ** 0.5
f32 >= i ** i32
f32 >= i + f64
f32 >= i ? "bar" : nil
f32 >= i ? ok : i
f32 >= i32
f32 >= i32 * 0.5
f32 >= i32 ? array : foo
f32 >= i32 ^ i32
f32 >= i64
f32 >= i64 % i64
f32 >= i64 ** 0.5
f32 >= i64 ? 1 : i32
f32 >= i64 ? i64 : add
f32 >= i64 || ok
f32 >= len("foo")
f32 >= max(i)
f32 >= min(i)
f32 >= score(1)
f32 ^ (1 * f32)
f32 ^ (1 + 1)
f32 ^ (1 - 0.5)
f32 ^ (f32 * 0.5)
f32 ^ (f32 / 1)
f32 ^ (i + i)
f32 ^ (i32 % 1)
f32 ^ (i32 % i64)
f32 ^ (i32 / 1)
f32 ^ (i32 / f64)
f32 ^ (i64 - f32)
f32 ^ -0.5
f32 ^ -1
f32 ^ -f32
f32 ^ -i
f32 ^ -i32
f32 ^ -i64
f32 ^ 0.5 != i64
f32 ^ 0.5 + f32
f32 ^ 0.5 + i64
f32 ^ 0.5 - f64
f32 ^ 0.5 <= 0.5 ^ 0.5
f32 ^ 0.5 ^ f32
f32 ^ 1 - i
f32 ^ 1 - i32
f32 ^ 1 <= 1 * 1
f32 ^ 1 <= i32
f32 ^ 1 ^ 0.5
f32 ^ f32
f32 ^ f32 ** i
f32 ^ f32 + f32
f32 ^ f32 / f32
f32 ^ f64
f32 ^ f64 < f64
f32 ^ f64 < i64
f32 ^ f64 <= f64
f32 ^ f64 == f64
f32 ^ f64 > i
f32 ^ half(f64)
f32 ^ i
f32 ^ i ** i32
f32 ^ i32
f32 ^ i32 + f32
f32 ^ i64
f32 ^ last(array)
f32 ^ max(0.5)
f32 ^ max(f32)
f32 ^ max(i64)
f32 ^ min(1)
f32 ^ min(1, 1)
f32 ^ score(i)
f32 in [false, list]
f32 in [nil]
f32 not in sort(array)
f64
f64 != -(0.5 ** 0.5)
f64 != -1
f64 != -f64
f64 != -i
f64 != -i32
f64 != 0.5 && ok
f64 != 0.5 + 1
f64 != 0.5 + f64
f64 != 0.5 == nil
f64 != 0.5 == true
f64 != 0.5 ? false : array
f64 != 0.5 and ok
f64 != 1 ? list : false
f64 != 1 ^ i64
f64 != abs(f32)
f64 != array[i64]
f64 != f32
f64 != f32 * i32
f64 != f64
f64 != f64 * f32
f64 != f64 ^ 1
f64 != findLastIndex(list, ok)
f64 != first(array)
f64 != get(array, i32)
f64 != half(0.5)
f64 != half(f64)
f64 != i
f64 != i && ok
f64 != i + 1
f64 != i32
f64 != i32 + f64
f64 != i32 ? "bar" : nil
f64 != i32 ? add : 1
f64 != i32 ^ 0.5
f64 != i64
f64 != i64 ** 0.5
f64 != int(i64)
f64 != max(i64)
f64 != min(1)
f64 != min(i32)
f64 != nil == ok
f64 != score(1)
f64 != score(i)
f64 * (0.5 - f32)
f64 * (0.5 - i64)
f64 * (f32 + i32)
f64 * (i32 - 0.5)
f64 * (i64 - f64)
f64 * -1
f64 * -f32
f64 * -f64
f64 * -i32
f64 * -i64
f64 * 0.5 * 0.5 ^ i64
f64 * 0.5 / i32
f64 * 0.5 ^ 1
f64 * 1 ** 0.5
f64 * 1 + i64
f64 * 1 / i32
f64 * 1 < 0.5 * 0.5
f64 * abs(i)
f64 * f32
f64 * f32 * f32
f64 * f32 - f32
f64 * f32 - f64
f64 * f32 / f64
f64 * f32 >= f64
f64 * f64
f64 * f64 / i
f64 * f64 < f64
f64 * f64 >= score(1)
f64 * float(i)
f64 * i
f64 * i != i
f64 * i * 0.5
f64 * i * i
f64 * i * i64
f64 * i - f64
f64 * i32
f64 * i32 * 1
f64 * i32 > f64
f64 * i64
f64 * i64 + f32
f64 * i64 + i
f64 * i64 - f32
f64 * i64 ^ i32
f64 * int(0.5)
f64 * int(f32)
f64 * int(f64)
f64 * last(array)
f64 * len(list)
f64 * max(i64)
f64 * min(i32)
f64 * score(1)
f64 * score(i)
f64 ** (0.5 * i32)
f64 ** (0.5 + 1)
f64 ** (0.5 + i)
f64 ** (1 + 1)
f64 ** (1 + f64)
f64 ** (1 - 1)
f64 ** (1 / i64)
f64 ** (f32 * i)
f64 ** (f64 + 0.5)
f64 ** (f64 + f64)
f64 ** (f64 + i)
f64 ** (i % 1)
f64 ** (i % i32)
f64 ** (i32 * 1)
f64 ** (i32 + 0.5)
f64 ** (i32 - f32)
f64 ** (i64 * 1)
f64 ** (i64 + 0.5)
f64 ** (i64 / i)
f64 ** -0.5
f64 ** -1
f64 ** -f32
f64 ** -f64
f64 ** -i
f64 ** -i32
f64 ** -i64
f64 ** 0.5 ** i64
f64 ** 0.5 <= 1 - 1
f64 ** 1 ** 0.5 ** 0.5
f64 ** 1 < 1 - i64
f64 ** 1 == f64 + f32
f64 ** 1 ^ i
f64 ** 1 ^ i64
f64 ** abs(1)
f64 ** abs(f64)
f64 ** f32
f64 ** f32 ** 0.5
f64 ** f32 == i64
f64 ** f64
f64 ** f64 != f32
f64 ** f64 ** 0.5
f64 ** f64 / f32
f64 ** f64 < f64
f64 ** f64 <= f64
f64 ** f64 ^ f64
f64 ** f64 ^ i32
f64 ** float(i32)
f64 ** get(array, i64)
f64 ** half(0.5)
f64 ** i
f64 ** i != i
f64 ** i - i32
f64 ** i / f32
f64 ** i >= i32
f64 ** i ^ i32
f64 ** i32
f64 ** i32 != max(f64, 0.5)
f64 ** i32 ** 1
f64 ** i32 ^ 1
f64 ** i64
f64 ** i64 ** i64
f64 ** i64 / f64
f64 ** i64 ^ i
f64 ** int(0.5)
f64 ** int(1)
f64 ** max(i32)
f64 ** min(1)
f64 ** min(f32)
f64 ** score(1, 1)
f64 + -0.5
f64 + -f64
f64 + -i
f64 + -i32
f64 + -i64
f64 + 0.5 * 1
f64 + 0.5 * i32
f64 + 0.5 / f32
f64 + 0.5 == i64
f64 + 1 != f64
f64 + 1 + f64
f64 + 1 - 0.5
f64 + 1 < i64
f64 + 1 > 0.5 ? 1 : 0.5
f64 + 1 > i64
f64 + 1 >= f32
f64 + abs(i)
f64 + abs(i64)
f64 + array[1]
f64 + array[i64]
f64 + count(array, ok)
f64 + f32
f64 + f32 * i32
f64 + f32 - i64
f64 + f64
f64 + f64 + i64
f64 + f64 == i32
f64 + f64 > i32
f64 + f64 ^ 0.5
f64 + float(i64)
f64 + half(0.5)
f64 + half(f64)
f64 + i
f64 + i ** 0.5
f64 + i + 1
f64 + i / 0.5
f64 + i32
f64 + i32 ** i64
f64 + i32 + i32
f64 + i32 / 1
f64 + i32 <= i
f64 + i32 >= i64
f64 + i64
f64 + i64 - f64
f64 + i64 ^ f32
f64 + int(0.5)
f64 + int(i32)
f64 + len(array)
f64 + min(0.5, 0.5)
f64 + min(f32)
f64 + score(i)
f64 - -0.5
f64 - -1
f64 - -f64
f64 - -i
f64 - -i32
f64 - -i64
f64 - 0.5 != f64
f64 - 0.5 * 0.5
f64 - 0.5 ** i
f64 - 0.5 + f32
f64 - 0.5 + i
f64 - 0.5 + i32
f64 - 0.5 >= -0.5
f64 - 1 * f32
f64 - 1 ** f32
f64 - 1 ** i32
f64 - 1 + 1
f64 - 1 - f64
f64 - 1 / 0.5
f64 - 1 < f32
f64 - 1 ^ 0.5
f64 - 1 ^ 1
f64 - abs(0.5)
f64 - abs(i)
f64 - array[i64]
f64 - f32
f64 - f32 * f64
f64 - f32 + 1 + 0.5
f64 - f32 - f64
f64 - f32 < f64
f64 - f32 >= i32
f64 - f64
f64 - f64 - 0.5
f64 - f64 - i32
f64 - f64 <= i
f64 - f64 == f64
f64 - f64 > f32
f64 - f64 >= get(array, i64)
f64 - get(array, i)
f64 - half(0.5)
f64 - i
f64 - i % i32
f64 - i + 1
f64 - i / 1
f64 - i < i32
f64 - i < i64
f64 - i == i
f64 - i == i64
f64 - i > f64
f64 - i32
f64 - i32 + i
f64 - i32 - i64
f64 - i32 >= i32
f64 - i64
f64 - i64 * 0.5
f64 - i64 * 1
f64 - i64 - f32
f64 - int(0.5)
f64 - int(i32)
f64 - max(1)
f64 - min(1)
f64 - min(i32, i64)
f64 - score(i)
f64 / (0.5 + f32)
f64 / (0.5 - 0.5)
f64 / (0.5 - f64)
f64 / (0.5 - i32)
f64 / (1 + i32)
f64 / (1 - 1)
f64 / (i32 + f64)
f64 / (i32 - 1)
f64 / (i64 - i64)
f64 / -0.5
f64 / -1
f64 / -f32
f64 / -i
f64 / -i32
f64 / 0.5 * i
f64 / 0.5 ** 0.5
f64 / 0.5 ** f64
f64 / 0.5 / f64
f64 / 0.5 / i64
f64 / 0.5 > f64
f64 / 0.5 ^ i
f64 / 1 != i
f64 / 1 * abs(i64)
f64 / 1 * i
f64 / 1 ** 0.5
f64 / 1 ^ i64
f64 / array[i32]
f64 / array[i]
f64 / f32
f64 / f32 != f64
f64 / f32 * i
f64 / f32 > f64
f64 / f32 ^ i32
f64 / f32 in [f32]
f64 / f64
f64 / f64 != f32
f64 / f64 * f32
f64 / f64 - f32
f64 / f64 - f64
f64 / get(array, i64)
f64 / half(0.5)
f64 / i
f64 / i * i32
f64 / i ** 0.5
f64 / i ** i32
f64 / i + i64
f64 / i < f64
f64 / i > 1 ** 1
f64 / i > f64
f64 / i >= f64
f64 / i32
f64 / i32 / i32
f64 / i32 < f64
f64 / i64
f64 / i64 * i64 ^ i
f64 / i64 - f32
f64 / i64 / 0.5
f64 / i64 / i64
f64 / i64 <= f64
f64 / i64 > i
f64 / int(f32)
f64 / int(i64)
f64 / max(i)
f64 / min(0.5)
f64 / score(i)
f64 < -0.5
f64 < -1
f64 < -i32
f64 < -i64
f64 < 0.5 ** f32
f64 < 0.5 == true
f64 < 0.5 ? 0.5 : foo
f64 < 0.5 ? 1 : array
f64 < 0.5 ? greet : false
f64 < 0.5 ^ 1
f64 < 0.5 or ok
f64 < 1 == not ok
f64 < 1 ? 1 : half
f64 < 1 ? 1 : i
f64 < 1 ? ok : i
f64 < 1 and nil == i32
f64 < abs(1)
f64 < abs(i32)
f64 < array[i32]
f64 < count(list, true)
f64 < f32
f64 < f32 * 0.5
f64 < f32 * f64
f64 < f32 ** i32
f64 < f32 - 1
f64 < f32 ? array : 0.5
f64 < f64
f64 < f64 * f32
f64 < get(array, i)
f64 < half(0.5)
f64 < i
f64 < i - f64
f64 < i == ok
f64 < i ? false : nil
f64 < i32
f64 < i32 % i32
f64 < i32 % i64
f64 < i32 == ok
f64 < i32 and ok
f64 < i64
f64 < i64 * i
f64 < int(0.5)
f64 < max(1, i64)
f64 < min(1)
f64 < min(f64)
f64 < min(i64)
f64 <= -0.5
f64 <= -1
f64 <= -f32
f64 <= -i
f64 <= -i32
f64 <= 0.5 != ok
f64 <= 0.5 - 1
f64 <= 0.5 / 0.5
f64 <= 0.5 == true
f64 <= 0.5 ? foo : list
f64 <= 0.5 ? nil : add
f64 <= 1 != true
f64 <= 1 ** 0.5
f64 <= 1 + 0.5
f64 <= 1 == false
f64 <= 1 ? array : foo
f64 <= 1 ^ i64
f64 <= abs(f32)
f64 <= abs(i)
f64 <= array[i]
f64 <= f32
f64 <= f32 + f64
f64 <= f32 - 0.5
f64 <= f32 ? false : "foo"
f64 <= f32 ? false : i
f64 <= f32 ? i64 : false
f64 <= f64
f64 <= f64 + f64
f64 <= f64 - 0.5
f64 <= f64 - f64
f64 <= f64 ^ 0.5
f64 <= find(array, true)
f64 <= float(f64)
f64 <= half(0.5)
f64 <= i
f64 <= i * i32
f64 <= i ? false : false
f64 <= i ? foo : false
f64 <= i32
f64 <= i32 == true
f64 <= i32 ? "bar" : nil
f64 <= i32 ? add : ok
f64 <= i32 ? i32 : false
f64 <= i64
f64 <= i64 % 1
f64 <= i64 - f32
f64 <= i64 - i64
f64 <= i64 ^ 1
f64 <= i64 and ok
f64 <= int(1)
f64 <= int(f64)
f64 <= int(i)
f64 <= max(f32)
f64 <= min(0.5)
f64 <= score(1)
f64 == -0.5
f64 == -1
f64 == -f32
f64 == -f64
f64 == -i
f64 == -i32
f64 == 0.5 != ok
f64 == 0.5 ** 0.5
f64 == 0.5 ** i32
f64 == 0.5 / i
f64 == 0.5 / i32
f64 == 0.5 ? i64 : div
f64 == 1 * f64
f64 == 1 == nil
f64 == 1 ? false : "foo"
f64 == abs(1)
f64 == abs(i32)
f64 == array[i32]
f64 == array[i64]
f64 == f32
f64 == f32 + i64
f64 == f32 - 1
f64 == f32 / 0.5
f64 == f64
f64 == f64 ** i32
f64 == f64 - 1
f64 == f64 / 1
f64 == float(0.5)
f64 == float(i)
f64 == get(array, i64)
f64 == half(f64)
f64 == i
f64 == i ** f32
f64 == i + 0.5
f64 == i / i32
f64 == i ? false : f32
f64 == i ^ f32
f64 == i32
f64 == i32 * 1
f64 == i32 + f64
f64 == i32 / 1
f64 == i32 ? greet : array
f64 == i64
f64 == i64 - f32
f64 == i64 == true
f64 == int(0.5)
f64 == int(f32)
f64 == min(0.5)
f64 == min(i64)
f64 == nil == ok
f64 == nil ? i32 : div
f64 == nil ? nil : 0.5
f64 == score(1)
f64 > -0.5
f64 > -1
f64 > -f32
f64 > -f64
f64 > -i
f64 > -i32
f64 > 0.5 - f64
f64 > 0.5 / 0.5
f64 > 0.5 ? 0.5 : nil
f64 > 0.5 ? score(1, 1) : nil == nil
f64 > 0.5 ^ 1
f64 > 0.5 || ok
f64 > 1 != ok
f64 > 1 != true
f64 > 1 % i
f64 > 1 * 0.5
f64 > 1 - 0.5
f64 > 1 - i32
f64 > 1 / 0.5
f64 > 1 / f64
f64 > 1 ? 0.5 : ok
f64 > 1 ? false : true
f64 > 1 ^ 1
f64 > abs(0.5)
f64 > abs(1)
f64 > abs(i)
f64 > abs(i32)
f64 > count(array, true)
f64 > f32
f64 > f32 - 0.5
f64 > f64
f64 > f64 ** 0.5
f64 > f64 ? f64 : list
f64 > f64 ^ 0.5
f64 > findIndex(array, ok)
f64 > float(1)
f64 > float(f32)
f64 > half(0.5)
f64 > i
f64 > i != ok
f64 > i ** i32
f64 > i - i32
f64 > i32
f64 > i32 ** f32
f64 > i32 - f32
f64 > i32 == ok
f64 > i32 ? i : 0.5
f64 > i64
f64 > i64 ** i64
f64 > int(0.5)
f64 > int(i64)
f64 > max(0.5)
f64 > max(i64)
f64 > min(1)
f64 > min(f64)
f64 > min(i)
f64 > min(i32)
f64 > score(i)
f64 >= -0.5
f64 >= -1
f64 >= -f64
f64 >= -i32
f64 >= -i64
f64 >= 0.5 * 1
f64 >= 0.5 ** 0.5
f64 >= 0.5 ** i32
f64 >= 0.5 + 0.5
f64 >= 0.5 + i
f64 >= 0.5 - i
f64 >= 0.5 - i32
f64 >= 0.5 ? nil : 0.5
f64 >= 0.5 ^ 0.5
f64 >= 1 * i
f64 >= 1 - 0.5
f64 >= 1 / i64
f64 >= 1 == ok
f64 >= 1 ^ 1
f64 >= 1 || ok
f64 >= abs(1)
f64 >= abs(f32)
f64 >= abs(f64)
f64 >= count(list, true)
f64 >= f32
f64 >= f32 != true
f64 >= f32 - f32
f64 >= f32 ? true : nil
f64 >= f64
f64 >= f64 * 0.5
f64 >= f64 ? nil : f64
f64 >= f64 ? score : f32
f64 >= half(f64)
f64 >= i
f64 >= i - 1
f64 >= i32
f64 >= i32 != nil
f64 >= i32 ** 0.5
f64 >= i32 + f32
f64 >= i32 + i64
f64 >= i32 ^ f32
f64 >= i64
f64 >= i64 * 0.5
f64 >= i64 * f64
f64 >= i64 * i64
f64 >= i64 ? list : i >= f32
f64 >= i64 ? ok : true
f64 >= i64 || ok
f64 >= max(f64)
f64 >= min(0.5)
f64 >= score(1)
f64 >= score(i)
f64 ^ (0.5 * 1)
f64 ^ (0.5 * f32)
f64 ^ (0.5 / i)
f64 ^ (1 + i)
f64 ^ (1 - f32)
f64 ^ (1 / 0.5)
f64 ^ (1 / i64)
f64 ^ -1
f64 ^ 0.5 != f32
f64 ^ 0.5 * i64
f64 ^ 0.5 + f64
f64 ^ 0.5 < 0.5 ^ 0.5
f64 ^ 0.5 <= i64
f64 ^ 0.5 > i == nil
f64 ^ 0.5 >= i32 / i64
f64 ^ 1 != i
f64 ^ 1 ** i
f64 ^ 1 + i
f64 ^ 1 / f32
f64 ^ 1 / i64
f64 ^ 1 <= i32
f64 ^ 1 ^ i
f64 ^ abs(i32)
f64 ^ count(array, true)
f64 ^ f32
f64 ^ f32 != i32
f64 ^ f32 * f32
f64 ^ f32 ** i
f64 ^ f32 + f64
f64 ^ f32 / i64
f64 ^ f32 < i
f64 ^ f32 >= i64
f64 ^ f32 ^ i64
f64 ^ f64
f64 ^ f64 != f32
f64 ^ f64 * i
f64 ^ f64 + int(0.5)
f64 ^ float(i64)
f64 ^ half(0.5)
f64 ^ half(f64)
f64 ^ i
f64 ^ i ** i32
f64 ^ i / i
f64 ^ i <= f32
f64 ^ i32
f64 ^ i32 ** i
f64 ^ i32 + f64
f64 ^ i32 >= i
f64 ^ i32 ^ f64
f64 ^ i64
f64 ^ i64 + i64
f64 ^ i64 - i
f64 ^ i64 < i
f64 ^ i64 >= i32
f64 ^ int(f64)
f64 ^ last(array)
f64 ^ len(list)
f64 ^ max(0.5)
f64 ^ score(1)
false != true || 1 > f64
false && ok or ok
false ? "bar" : 0.5 == f32
false ? "bar" : 1 != i
false ? "bar" : foo.Qux
false ? 0.5 : foo.Qux
false ? 1 : half != div
false ? 1 : true != ok
false ? add : foo?.Bar
false ? f32 : foo.Bar
false ? f32 : foo?.String()
false ? f32 : i .. i32
false ? f64 : 0.5 >= f64
false ? f64 : f32 / f32
false ? false : 0.5 + i32
false ? false : i64 >= i
false ? foo : foo.Qux
false ? greet : i64 != i
false ? half : 0.5 > 1 + i64
false ? half : f32 > min(0.5)
false ? i : 1 != i
false ? i32 : 1 >= f64
false ? i64 : "foo" < toJSON(f64)
false ? i64 : foo?.Qux
false ? list : 1 < f32
false ? list : f32 ** i32
false ? list : foo.Bar
false ? nil : 1 >= get(array, 1)
false ? nil : foo?.Qux
false ? ok : foo.String
false ? score : 0.5 == i
false ? score : 1 / i64
false ? score : f64 - -f32
false ? true : 0.5 == f32
false or ok ? string(1) : f64 == f32
filter(1 .. 1, # == 0.5)
filter(1 .. i64, ok)
filter([div], any(array, true))
filter([i32, i], # <= f64)
filter(array, !false)
filter(array, !ok)
filter(array, "bar" == "bar")
filter(array, "bar" matches "bar")
filter(array, "foo" not matches "bar")
filter(array, # != #)
filter(array, # != f64)
filter(array, # != i)
filter(array, # != i32)
filter(array, # != i64)
filter(array, # < #)
filter(array, # < 1)
filter(array, # < f32)
filter(array, # < f64)
filter(array, # < i)
filter(array, # < i32)
filter(array, # <= #)
filter(array, # <= 0.5)
filter(array, # <= 1)
filter(array, # <= f64)
filter(array, # <= i)
filter(array, # <= i32)
filter(array, # == #)
filter(array, # == 1)
filter(array, # == f32)
filter(array, # == f64)
filter(array, # == i)
filter(array, # == nil)
filter(array, # > #)
filter(array, # > 1)
filter(array, # > i)
filter(array, # >= #)
filter(array, # >= 1)
filter(array, # >= f32)
filter(array, # >= f64)
filter(array, # >= i32)
filter(array, # in array)
filter(array, # not in array)
filter(array, 0.5 != #)
filter(array, 0.5 < #)
filter(array, 0.5 < f32)
filter(array, 0.5 < f64)
filter(array, 0.5 == #)
filter(array, 0.5 > 0.5)
filter(array, 0.5 >= #)
filter(array, 1 != #)
filter(array, 1 != f32)
filter(array, 1 < #)
filter(array, 1 < f64)
filter(array, 1 <= #)
filter(array, 1 == #)
filter(array, 1 > #)
filter(array, 1 > 0.5)
filter(array, add == div)
filter(array, all(list, ok))
filter(array, f32 != #)
filter(array, f32 < i32)
filter(array, f32 <= f32)
filter(array, f32 == #)
filter(array, f32 > 1)
filter(array, f32 >= #)
filter(array, f64 != #)
filter(array, f64 != 0.5)
filter(array, f64 <= #)
filter(array, f64 == #)
filter(array, f64 > #)
filter(array, f64 >= 1)
filter(array, foo == nil)
filter(array, greet == add)
filter(array, greet == half)
filter(array, i <= 1)
filter(array, i <= f64)
filter(array, i == f32)
filter(array, i >= 1)
filter(array, i >= f64 != false)
filter(array, i32 != #)
filter(array, i32 <= #)
filter(array, i32 == #)
filter(array, i32 == 1)
filter(array, i32 > # % #)
filter(array, i32 > #)
filter(array, i32 > 0.5)
filter(array, i32 >= #)
filter(array, i64 != #)
filter(array, i64 < #)
filter(array, i64 < 1)
filter(array, i64 < i64)
filter(array, i64 <= #)
filter(array, i64 == 1)
filter(array, nil != #)
filter(array, nil != greet)
filter(array, nil == #)
filter(array, nil == f32)
filter(array, nil in list)
filter(array, none(array, ok))
filter(array, ok)
filter(array, score(#) != #)
filter(array, true && ok)
filter(array, true or false)
filter(array, true)[i:i32]
filter(filter(array, true), i >= f32)
filter(filter(list, false), "bar" in #)
filter(filter(list, ok), ok)
filter(i .. 1, not ok)
filter(i32 .. i32, nil == true)
filter(i32 .. i64, ok)
filter(list, !false)
filter(list, !ok)
filter(list, !true)
filter(list, "bar" not in #)
filter(list, "bar" not matches "foo")
filter(list, "bar" startsWith "bar")
filter(list, "foo" in #)
filter(list, "foo" not in #)
filter(list, # != #)
filter(list, # != foo)
filter(list, # != nil)
filter(list, # == #)
filter(list, # == foo)
filter(list, # == nil)
filter(list, 0.5 != f64)
filter(list, 0.5 != i)
filter(list, 0.5 > f32)
filter(list, 1 != 0.5)
filter(list, 1 != i32)
filter(list, 1 != nil)
filter(list, 1 < 0.5)
filter(list, 1 < 1)
filter(list, all(array, false))
filter(list, all(array, true))
filter(list, div == half)
filter(list, f32 < 0.5)
filter(list, f32 <= f32)
filter(list, f32 == i64)
filter(list, f32 >= 1)
filter(list, f64 >= 0.5)
filter(list, false == ok)
filter(list, foo != #)
filter(list, foo == #)
filter(list, foo == foo)
filter(list, foo in list)
filter(list, greet != nil)
filter(list, half != half)
filter(list, i <= 0.5)
filter(list, i <= i)
filter(list, i == f32)
filter(list, i == i32)
filter(list, i == i64)
filter(list, i >= i32)
filter(list, i32 != 1)
filter(list, i32 != nil)
filter(list, i32 < i64)
filter(list, i32 <= i32)
filter(list, i32 == i)
filter(list, i64 > f32)
filter(list, nil != f64)
filter(list, nil != score)
filter(list, nil != true)
filter(list, nil == #)
filter(list, not ok)
filter(list, ok or true)
filter(list, ok || true)
filter(list, ok)
filter(list, true == nil)
filter(map(array, "bar"), # >= #)
filter(map(array, "foo"), ok)
filter(map(array, #), # != 0.5)
filter(map(array, #), ok)
filter(map(array, 0.5 >= #), ok)
filter(map(list, "bar"), i >= i)
filter(map(list, "foo"), "bar" not matches #)
filter(map(list, #), # != #)
filter(map(list, #), ok)
filter(map(list, 1), f32 != #)
filter(map(list, false), #)
filter(sort(array), ok)
filter(split("foo", "bar"), ok)
find(1 .. 1, # <= #)
find([nil], 0.5 == 0.5)
find([ok], #)
find(array, !ok)
find(array, !true)
find(array, "bar" startsWith "foo")
find(array, # != #)
find(array, # != 0.5)
find(array, # != f32)
find(array, # != i32)
find(array, # - # != #)
find(array, # < #)
find(array, # < 0.5)
find(array, # < 1)
find(array, # < f32)
find(array, # < f64)
find(array, # < i32)
find(array, # <= #)
find(array, # <= 0.5)
find(array, # <= 1)
find(array, # <= f32)
find(array, # <= i)
find(array, # == #)
find(array, # == 0.5)
find(array, # == 1)
find(array, # == f32)
find(array, # == f64)
find(array, # == i)
find(array, # == i32)
find(array, # == nil)
find(array, # > #)
find(array, # > 0.5)
find(array, # > i)
find(array, # > i64)
find(array, # >= #)
find(array, # >= 1)
find(array, # >= i)
find(array, # >= i32)
find(array, 0.5 < i64)
find(array, 0.5 <= #)
find(array, 0.5 == #)
find(array, 0.5 > #)
find(array, 0.5 > 1)
find(array, 1 <= #)
find(array, 1 <= 0.5)
find(array, 1 == f32)
find(array, 1 == i64)
find(array, 1 > #)
find(array, 1 > 0.5)
find(array, 1 > i32)
find(array, 1 > i64)
find(array, 1 >= #)
find(array, 1 >= i)
find(array, add != div)
find(array, add != nil)
find(array, any(array, true))
find(array, array == list)
find(array, div == half)
find(array, f32 <= #)
find(array, f32 > #)
find(array, f32 > 0.5)
find(array, f32 >= #)
find(array, f32 >= 1)
find(array, f64 != #)
find(array, f64 != i32)
find(array, f64 != nil)
find(array, f64 < #)
find(array, f64 == nil)
find(array, f64 >= 0.5)
find(array, false == false)
find(array, false) != i32
find(array, i < #)
find(array, i <= #)
find(array, i == #)
find(array, i > #)
find(array, i >= #)
find(array, i >= i64)
find(array, i32 != #)
find(array, i32 != 1)
find(array, i32 < #)
find(array, i32 <= #)
find(array, i32 <= f32)
find(array, i32 <= f64)
find(array, i32 == #)
find(array, i32 == 1)
find(array, i32 == f64)
find(array, i32 > #)
find(array, i64 != #)
find(array, i64 < #)
find(array, nil != "bar")
find(array, nil != #)
find(array, nil == #)
find(array, nil not in array)
find(array, not false)
find(array, not true)
find(array, ok && ok)
find(array, ok == nil)
find(array, ok)
find(array, ok) * f64
find(array, ok) ** i64
find(array, ok) ^ i32
find(array, score(#) >= #)
find(array, true) / get(array, i64)
find(array, true) > i
find(array, true) ^ i32
find(filter(array, ok), # >= #)
find(filter(array, true), # != #)
find(i32 .. 1, # > 0.5)
find(i64 .. 1, ok)
find(list, !true)
find(list, "bar" startsWith "foo")
find(list, "foo" < "foo")
find(list, "foo" in #)
find(list, "foo" not in #)
find(list, # != #)
find(list, # == #)
find(list, # == nil)
find(list, # not in list)
find(list, 0.5 < f64)
find(list, 0.5 <= i64)
find(list, 0.5 > i)
find(list, 1 < 0.5)
find(list, 1 <= 0.5)
find(list, 1 > i)
find(list, add == add)
find(list, f32 != f32)
find(list, f32 < f64)
find(list, f32 <= f32)
find(list, f32 <= i32)
find(list, f32 == f32)
find(list, f64 != f32)
find(list, f64 <= i64)
find(list, f64 >= f32)
find(list, false)?.Bar
find(list, foo != #)
find(list, foo == #)
find(list, i < 1)
find(list, i >= f64)
find(list, i32 <= f32)
find(list, i64 != f64)
find(list, i64 >= 0.5)
find(list, list != array)
find(list, nil != #)
find(list, nil != greet)
find(list, nil != half)
find(list, nil != ok)
find(list, nil == #)
find(list, nil == half)
find(list, nil == score)
find(list, nil not in array)
find(list, nil not in list)
find(list, not ok)
find(list, ok or ok)
find(list, ok)
find(list, ok).Bar
find(list, ok).Qux
find(list, ok).String
find(list, ok)?.Qux
find(list, ok)?.String
find(list, score != add)
find(list, score != greet)
find(list, true).Bar
find(list, true).Qux
find(list, true).String
find(list, true)?.Bar
find(list, true)?.Qux
find(list, true)?.String
find(list, true)?.String()
find(map(array, #), # == #)
find(map(array, #), ok)
find(map(array, i), ok)
find(map(array, true), #)
find(map(list, "foo"), ok)
find(map(list, #), # != #)
find(map(list, 0.5), # >= #)
find(map(list, ok), ok)
find(map(list, true), #)
find(ok ? "bar" : 0.5, # != i32)
find(sort(array), ok)
find(true ? array : false, 0.5 > #)?.list
findIndex(["bar"], ok)
findIndex(["foo"], 0.5 > i64)
findIndex(["foo"], ok)
findIndex([1], # < #)
findIndex([f64, greet], 1 > f64)
findIndex([false], #)
findIndex(array, !(# != #))
findIndex(array, !(# == 1))
findIndex(array, !false)
findIndex(array, !ok)
findIndex(array, !true)
findIndex(array, "bar" not endsWith "bar")
findIndex(array, "bar" not startsWith "foo")
findIndex(array, # != #)
findIndex(array, # != 0.5)
findIndex(array, # != f32)
findIndex(array, # != f64)
findIndex(array, # != i32)
findIndex(array, # != i64)
findIndex(array, # != nil)
findIndex(array, # ** # > #)
findIndex(array, # < #)
findIndex(array, # < 1)
findIndex(array, # < f64)
findIndex(array, # < i)
findIndex(array, # < i32)
findIndex(array, # < i64)
findIndex(array, # <= #)
findIndex(array, # <= 1)
findIndex(array, # <= i)
findIndex(array, # <= i32)
findIndex(array, # == #)
findIndex(array, # == 1)
findIndex(array, # == f64)
findIndex(array, # == i32)
findIndex(array, # > #)
findIndex(array, # > 0.5)
findIndex(array, # > 1)
findIndex(array, # > f32)
findIndex(array, # > f64)
findIndex(array, # > i64 - i)
findIndex(array, # > i64)
findIndex(array, # >= #)
findIndex(array, # >= 1)
findIndex(array, # >= f32)
findIndex(array, # >= i)
findIndex(array, # >= i32)
findIndex(array, # in array)
findIndex(array, # not in array)
findIndex(array, 0.5 < #)
findIndex(array, 0.5 <= 1)
findIndex(array, 0.5 <= f32)
findIndex(array, 0.5 == #)
findIndex(array, 0.5 > i64)
findIndex(array, 0.5 >= #)
findIndex(array, 0.5 >= i)
findIndex(array, 1 != #)
findIndex(array, 1 < #)
findIndex(array, 1 < f32)
findIndex(array, 1 < i64)
findIndex(array, 1 <= #)
findIndex(array, 1 == #)
findIndex(array, 1 > #)
findIndex(array, 1 >= #)
findIndex(array, add != half)
findIndex(array, any(array, f32 < #))
findIndex(array, f32 <= #)
findIndex(array, f32 == #)
findIndex(array, f32 == nil)
findIndex(array, f32 > #)
findIndex(array, f32 >= #)
findIndex(array, f64 <= #)
findIndex(array, f64 <= i64)
findIndex(array, f64 == #)
findIndex(array, f64 > #)
findIndex(array, f64 >= #)
findIndex(array, f64 >= 1)
findIndex(array, half != greet)
findIndex(array, i != #)
findIndex(array, i < 0.5)
findIndex(array, i <= #)
findIndex(array, i <= i32)
findIndex(array, i == #)
findIndex(array, i == i)
findIndex(array, i > #)
findIndex(array, i >= i)
findIndex(array, i32 != #)
findIndex(array, i32 < #)
findIndex(array, i32 < f64)
findIndex(array, i32 < i)
findIndex(array, i32 <= #)
findIndex(array, i32 == #)
findIndex(array, i32 == nil)
findIndex(array, i32 > #)
findIndex(array, i64 != #)
findIndex(array, i64 == #)
findIndex(array, i64 > #)
findIndex(array, i64 >= #)
findIndex(array, nil != #)
findIndex(array, nil != 1)
findIndex(array, nil != list)
findIndex(array, nil == foo)
findIndex(array, nil == i)
findIndex(array, not ok)
findIndex(array, ok)
findIndex(array, ok) * f64
findIndex(array, ok) - i32
findIndex(array, ok) / f64
findIndex(array, ok) >= f64
findIndex(array, score == greet)
findIndex(array, true or false)
findIndex(false ? div : list, ok)
findIndex(list, !false)
findIndex(list, !true)
findIndex(list, "bar" == "bar")
findIndex(list, "foo" != "bar")
findIndex(list, "foo" contains "bar")
findIndex(list, "foo" matches "bar")
findIndex(list, # != #)
findIndex(list, # != foo)
findIndex(list, # != nil)
findIndex(list, # == #)
findIndex(list, # == nil)
findIndex(list, # in list)
findIndex(list, 0.5 < i)
findIndex(list, 0.5 <= f64)
findIndex(list, 0.5 <= i64)
findIndex(list, 0.5 > f64)
findIndex(list, 0.5 >= f32)
findIndex(list, 1 == nil)
findIndex(list, array != list)
findIndex(list, f32 < f64)
findIndex(list, f64 <= f32)
findIndex(list, f64 <= f64)
findIndex(list, f64 == nil)
findIndex(list, f64 > f64)
findIndex(list, false && true)
findIndex(list, foo != #)
findIndex(list, foo == #)
findIndex(list, greet != half)
findIndex(list, half == add)
findIndex(list, i32 == i)
findIndex(list, i32 > f64)
findIndex(list, i32 >= i32)
findIndex(list, i64 < 0.5)
findIndex(list, i64 > f64)
findIndex(list, nil != #)
findIndex(list, nil != f64)
findIndex(list, nil != false)
findIndex(list, nil == #)
findIndex(list, nil == 0.5)
findIndex(list, nil == ok)
findIndex(list, nil in list)
findIndex(list, not false)
findIndex(list, not ok)
findIndex(list, ok != ok)
findIndex(list, ok or ok)
findIndex(list, ok)
findIndex(list, ok) + f32
findIndex(list, ok) / i
findIndex(list, ok) > i32
findIndex(list, one(list, ok))
findIndex(list, true ? true : true)
findIndex(list, true) .. i
findIndex(list, true) == 0.5 ^ i32
findIndex(list, true) > i32 ** f32
findIndex(list, true) not in array
findIndex(map(array, #), # > #)
findIndex(map(array, #), # >= f32)
findIndex(map(array, 1), # != #)
findIndex(map(array, add), i64 >= i64)
findIndex(map(array, div), # == #)
findIndex(map(array, false), #)
findIndex(map(array, i64), ok)
findIndex(map(list, #), !ok)
findIndex(map(list, #), div == div)
findIndex(map(list, #), ok)
findIndex(map(list, f32), i32 == f64)
findIndex(map(list, list), ok)
findIndex(map(list, ok), # == ok)
findIndex(sort(array), # < #)
findIndex(true ? "bar" : i32, # < #)
findIndex(true ? "bar" : true, ok)
findLast([0.5], i64 != 0.5)
findLast(array, !false)
findLast(array, !true)
findLast(array, "bar" > "bar")
findLast(array, "foo" startsWith "foo")
findLast(array, # != #)
findLast(array, # != f64)
findLast(array, # != nil)
findLast(array, # < #)
findLast(array, # < 0.5)
findLast(array, # < 1)
findLast(array, # < f32)
findLast(array, # < f64)
findLast(array, # < i)
findLast(array, # <= #)
findLast(array, # <= 0.5)
findLast(array, # <= 1)
findLast(array, # <= f32)
findLast(array, # <= f64)
findLast(array, # <= i)
findLast(array, # <= i64)
findLast(array, # == #)
findLast(array, # == 0.5)
findLast(array, # == f64)
findLast(array, # == i64)
findLast(array, # > #)
findLast(array, # > 0.5)
findLast(array, # > i)
findLast(array, # > i32)
findLast(array, # > i64)
findLast(array, # >= #)
findLast(array, # >= 0.5)
findLast(array, # >= f64)
findLast(array, # >= i)
findLast(array, # >= i32)
findLast(array, # not in array)
findLast(array, 0.5 != #)
findLast(array, 0.5 != 0.5)
findLast(array, 0.5 != i)
findLast(array, 0.5 < #)
findLast(array, 0.5 < i64)
findLast(array, 0.5 <= #)
findLast(array, 0.5 == #)
findLast(array, 0.5 > 0.5)
findLast(array, 0.5 >= 1)
findLast(array, 0.5 >= f64)
findLast(array, 1 != #)
findLast(array, 1 != i64)
findLast(array, 1 < #)
findLast(array, 1 <= #)
findLast(array, 1 <= 0.5)
findLast(array, 1 <= f32)
findLast(array, 1 == #)
findLast(array, 1 == nil)
findLast(array, 1 > #)
findLast(array, 1 >= #)
findLast(array, 1 >= 1)
findLast(array, add != greet)
findLast(array, array == array)
findLast(array, div != score)
findLast(array, f32 != nil)
findLast(array, f32 < #)
findLast(array, f32 >= #)
findLast(array, f32 >= 1)
findLast(array, f64 != i)
findLast(array, f64 < i64)
findLast(array, f64 >= #)
findLast(array, foo != nil)
findLast(array, half == nil)
findLast(array, i != i32)
findLast(array, i < #)
findLast(array, i <= #)
findLast(array, i >= #)
findLast(array, i32 != #)
findLast(array, i32 <= f32)
findLast(array, i32 == 1)
findLast(array, i32 > #)
findLast(array, i32 >= #)
findLast(array, i32 >= 0.5)
findLast(array, i64 != #)
findLast(array, i64 != 1)
findLast(array, i64 < #)
findLast(array, i64 <= #)
findLast(array, i64 <= 0.5)
findLast(array, i64 == #)
findLast(array, i64 == nil)
findLast(array, i64 >= #)
findLast(array, i64 >= i32)
findLast(array, nil != #)
findLast(array, nil != nil)
findLast(array, nil == #)
findLast(array, nil == nil)
findLast(array, not false)
findLast(array, not true)
findLast(array, ok)
findLast(array, ok) < f64
findLast(array, true) + i
findLast(array, true) + i32
findLast(array, true) <= f64
findLast(array, true) > i
findLast(i .. 1, # > f32)
findLast(i32 .. 1, # >= #)
findLast(i32 .. i32, ok)
findLast(i64 .. 1, f32 <= #)
findLast(list, !true)
findLast(list, "bar" in #)
findLast(list, "bar" not contains "bar")
findLast(list, "bar" not in #)
findLast(list, "bar" not matches "bar")
findLast(list, "foo" == "foo")
findLast(list, "foo" > "foo")
findLast(list, "foo" in #)
findLast(list, "foo" not in #)
findLast(list, # != #)
findLast(list, # == #)
findLast(list, # == foo)
findLast(list, # == nil)
findLast(list, # not in list)
findLast(list, 0.5 == nil)
findLast(list, 0.5 > f32)
findLast(list, 1 != 0.5)
findLast(list, 1 != 1)
findLast(list, 1 <= i)
findLast(list, 1 > 1)
findLast(list, 1 > i)
findLast(list, 1 >= 0.5)
findLast(list, 1 >= 1)
findLast(list, add == nil)
findLast(list, all(list, false))
findLast(list, f32 < f64)
findLast(list, false)?.Bar
findLast(list, foo != #)?.Bar
findLast(list, foo == #)
findLast(list, greet == half)
findLast(list, i != 1)
findLast(list, i != i64)
findLast(list, i >= f32)
findLast(list, i32 == 1)
findLast(list, i64 <= 0.5)
findLast(list, i64 <= i)
findLast(list, i64 == i32)
findLast(list, i64 > 0.5)
findLast(list, i64 > i)
findLast(list, i64 >= i32)
findLast(list, nil != "bar")
findLast(list, nil != #)
findLast(list, nil != add)
findLast(list, nil != false)
findLast(list, nil != foo)
findLast(list, nil != nil)
findLast(list, nil != ok)
findLast(list, nil == #)
findLast(list, nil == i32)
findLast(list, nil == i64)
findLast(list, nil == list)
findLast(list, nil == nil)
findLast(list, not ok)
findLast(list, ok ? ok : nil)
findLast(list, ok)
findLast(list, ok).Bar
findLast(list, ok).Qux
findLast(list, ok).String
findLast(list, ok).String()
findLast(list, ok)?.Bar
findLast(list, ok)?.Qux
findLast(list, ok)?.String
findLast(list, one(list, true))
findLast(list, true != nil)
findLast(list, true).Bar
findLast(list, true).Qux
findLast(list, true).String
findLast(list, true)?.Bar
findLast(list, true)?.Qux
findLast(list, true)?.String
findLast(map(array, #), # > f32)
findLast(map(array, #), # >= #)
findLast(map(array, #), i32 == #)
findLast(map(array, #), ok)
findLast(map(array, f64), # <= #)
findLast(map(array, i), # <= #)
findLast(map(array, ok), #)
findLast(map(array, ok), not #)
findLast(map(array, true), #)
findLast(map(list, #), # != #)
findLast(map(list, array), # == #)
findLast(map(list, i), # >= #)
findLast(map(list, list), ok)
findLast(map(list, score), 0.5 > f32)
findLast(ok ? array : div, # >= #)
findLast(sort(array), # && false)
findLastIndex([i32], # >= 0.5)
findLastIndex(array, !false)
findLastIndex(array, !ok)
findLastIndex(array, !true)
findLastIndex(array, "bar" != "bar")
findLastIndex(array, # != #)
findLastIndex(array, # != 0.5)
findLastIndex(array, # != i64)
findLastIndex(array, # != nil)
findLastIndex(array, # / f32 == #)
findLastIndex(array, # < # ** i32)
findLastIndex(array, # < #)
findLastIndex(array, # < 0.5)
findLastIndex(array, # < 1)
findLastIndex(array, # < f32)
findLastIndex(array, # < f64)
findLastIndex(array, # < i)
findLastIndex(array, # < i64)
findLastIndex(array, # <= #)
findLastIndex(array, # <= 0.5)
findLastIndex(array, # <= 1)
findLastIndex(array, # <= f32)
findLastIndex(array, # <= f64)
findLastIndex(array, # <= i)
findLastIndex(array, # <= i32)
findLastIndex(array, # <= i64)
findLastIndex(array, # == #)
findLastIndex(array, # == 0.5)
findLastIndex(array, # == 1)
findLastIndex(array, # == i32)
findLastIndex(array, # == nil)
findLastIndex(array, # > #)
findLastIndex(array, # > 0.5)
findLastIndex(array, # > 1)
findLastIndex(array, # > i)
findLastIndex(array, # > i64)
findLastIndex(array, # >= #)
findLastIndex(array, # >= 1)
findLastIndex(array, # >= f64)
findLastIndex(array, # in array)
findLastIndex(array, # not in array)
findLastIndex(array, 0.5 != #)
findLastIndex(array, 0.5 != 0.5)
findLastIndex(array, 0.5 < #)
findLastIndex(array, 0.5 < i)
findLastIndex(array, 0.5 <= #)
findLastIndex(array, 0.5 <= 0.5)
findLastIndex(array, 0.5 == #)
findLastIndex(array, 0.5 > #)
findLastIndex(array, 0.5 > i)
findLastIndex(array, 0.5 >= #)
findLastIndex(array, 0.5 >= f32)
findLastIndex(array, 1 != #)
findLastIndex(array, 1 < #)
findLastIndex(array, 1 <= #)
findLastIndex(array, 1 <= i)
findLastIndex(array, 1 <= i64)
findLastIndex(array, 1 == #)
findLastIndex(array, 1 > #)
findLastIndex(array, 1 > 1)
findLastIndex(array, 1 >= #)
findLastIndex(array, 1 in array)
findLastIndex(array, add != add)
findLastIndex(array, any(list, false))
findLastIndex(array, f32 != #)
findLastIndex(array, f32 < #)
findLastIndex(array, f32 <= f64)
findLastIndex(array, f32 == f64)
findLastIndex(array, f32 > #)
findLastIndex(array, f32 >= f64)
findLastIndex(array, f64 != #)
findLastIndex(array, f64 < #)
findLastIndex(array, f64 == #)
findLastIndex(array, f64 > i)
findLastIndex(array, f64 >= #)
findLastIndex(array, i == #)
findLastIndex(array, i > #)
findLastIndex(array, i > 1)
findLastIndex(array, i >= #)
findLastIndex(array, i32 != #)
findLastIndex(array, i32 < #)
findLastIndex(array, i32 <= 0.5)
findLastIndex(array, i32 == #)
findLastIndex(array, i32 == i32)
findLastIndex(array, i32 > #)
findLastIndex(array, i64 != #)
findLastIndex(array, i64 != f32)
findLastIndex(array, i64 >= #)
findLastIndex(array, list != nil)
findLastIndex(array, nil != "foo")
findLastIndex(array, nil != #)
findLastIndex(array, nil != 0.5)
findLastIndex(array, nil != foo)
findLastIndex(array, nil != nil)
findLastIndex(array, nil == #)
findLastIndex(array, nil == i)
findLastIndex(array, nil not in list)
findLastIndex(array, none(array, true))
findLastIndex(array, not (# != #))
findLastIndex(array, not false)
findLastIndex(array, ok)
findLastIndex(array, ok) * f64
findLastIndex(array, ok) / i64
findLastIndex(array, ok) <= i64
findLastIndex(array, ok) ^ f32
findLastIndex(array, true ? ok : 1)
findLastIndex(array, true) / f32
findLastIndex(array, true) <= i64
findLastIndex(array, true) > f64
findLastIndex(false ? i : "bar", ok)
findLastIndex(filter(list, true), ok)
findLastIndex(i .. i32, # == 1)
findLastIndex(i32 .. i, ok)
findLastIndex(i32 .. i64, f64 == nil)
findLastIndex(i64 .. 1, # != nil)
findLastIndex(i64 .. 1, add == nil)
findLastIndex(list, !ok)
findLastIndex(list, !true)
findLastIndex(list, "bar" in #)
findLastIndex(list, "foo" matches "bar")
findLastIndex(list, # != #)
findLastIndex(list, # != foo)
findLastIndex(list, # != nil)
findLastIndex(list, # == #)
findLastIndex(list, # == nil)
findLastIndex(list, # in list)
findLastIndex(list, 0.5 != i)
findLastIndex(list, 0.5 <= 0.5)
findLastIndex(list, 0.5 <= f32)
findLastIndex(list, 1 != 0.5)
findLastIndex(list, 1 != f64)
findLastIndex(list, 1 != i64)
findLastIndex(list, 1 < i32)
findLastIndex(list, 1 <= f32)
findLastIndex(list, 1 <= i)
findLastIndex(list, array != list)
findLastIndex(list, array != nil)
findLastIndex(list, array == list)
findLastIndex(list, div == add)
findLastIndex(list, div == score)
findLastIndex(list, f32 != 0.5)
findLastIndex(list, f32 < f64)
findLastIndex(list, f32 < i32)
findLastIndex(list, f32 <= i64)
findLastIndex(list, f32 == i32)
findLastIndex(list, f32 > f32)
findLastIndex(list, f64 <= 1)
findLastIndex(list, f64 == f64)
findLastIndex(list, false == false)
findLastIndex(list, false and false)
findLastIndex(list, false and ok)
findLastIndex(list, foo != #)
findLastIndex(list, foo == foo)
findLastIndex(list, greet != half)
findLastIndex(list, greet == nil)
findLastIndex(list, half != nil)
findLastIndex(list, i < i64)
findLastIndex(list, i <= i)
findLastIndex(list, i32 != nil)
findLastIndex(list, i32 < f64)
findLastIndex(list, i32 <= i32)
findLastIndex(list, i32 >= 0.5)
findLastIndex(list, i32 >= i)
findLastIndex(list, i64 < f64)
findLastIndex(list, i64 == f32)
findLastIndex(list, i64 >= i)
findLastIndex(list, i64 not in array)
findLastIndex(list, nil != #)
findLastIndex(list, nil == #)
findLastIndex(list, none(array, ok))
findLastIndex(list, not ok)
findLastIndex(list, not true)
findLastIndex(list, ok != nil)
findLastIndex(list, ok)
findLastIndex(list, ok) ** f32
findLastIndex(list, ok) ** f64
findLastIndex(list, ok) - i
findLastIndex(list, ok) >= i64
findLastIndex(list, true == nil)
findLastIndex(list, true) ** i64
findLastIndex(list, true) + i
findLastIndex(list, true) .. i64
findLastIndex(list, true) < i
findLastIndex(list, true) > f32
findLastIndex(list, true) >= f32
findLastIndex(list, true) in array
findLastIndex(map(array, "foo"), # == #)
findLastIndex(map(array, #), i < #)
findLastIndex(map(array, #), nil != half)
findLastIndex(map(array, #), ok)
findLastIndex(map(array, 0.5), ok)
findLastIndex(map(array, array), 1 != i)
findLastIndex(map(array, false), #)
findLastIndex(map(array, true), #)
findLastIndex(map(list, #), !ok)
findLastIndex(map(list, #), 0.5 < f32)
findLastIndex(map(list, 0.5), # <= #)
findLastIndex(map(list, f32), # == #)
findLastIndex(map(list, f32), # >= #)
findLastIndex(map(list, f32), ok)
findLastIndex(map(list, false), #)
findLastIndex(map(list, half), ok)
findLastIndex(map(list, ok), # or #)
findLastIndex(map(list, ok), #)
findLastIndex(sort(array), ok)
first(1 .. i)
first(1 .. i32)
first([f32])
first([f64])
first([false, list])
first([i64, nil])
first([list, i32])
first([not false])
first(array)
first(array) * i
first(array) ** i32
first(array) ** i64
first(array) + i32
first(array) / 1 * 0.5
first(array) <= i32
first(array) <= i64
first(array) == i64
first(array) > i32
first(array) > i64
first(array) in array
first(false ? f64 : true)
first(false ? greet : i)
first(filter(array, false))
first(filter(list, ok))
first(i .. 1)
first(i .. i)
first(i .. i32)
first(i32 .. 1)
first(i32 .. i)
first(i32 .. i64)
first(i64 .. i32)
first(list)
first(list) not in list
first(list).Bar
first(list).Qux
first(list).String
first(list).String()
first(list)?.Bar
first(list)?.Qux
first(list)?.String
first(list)?.String()
first(map(array, "bar"))
first(map(array, #))
first(map(array, 0.5))
first(map(array, 1))
first(map(array, add))
first(map(array, f32))
first(map(array, f64))
first(map(array, foo))
first(map(array, greet))
first(map(array, half))
first(map(array, i))
first(map(array, list))
first(map(array, ok))
first(map(array, score))
first(map(list, #))
first(map(list, 0.5))
first(map(list, add))
first(map(list, array))
first(map(list, div))
first(map(list, f32))
first(map(list, f64))
first(map(list, i32))
first(map(list, list))
first(map(list, score))
first(ok ? "bar" : 0.5)
first(ok ? 1 : "foo")
first(ok ? add : f32)
first(ok ? array : "bar")
first(ok ? list : nil)
first(ok ? ok : array)
first(ok ? ok : foo)
first(ok ? ok : score)
first(sort(array))
first(true ? 0.5 : i64)
first(true ? add : ok)
first(true ? array : false)
first(true ? ok : div)
float(-(1 / i32))
float(-0.5)
float(-1)
float(-f32)
float(-f64)
float(-i)
float(-i32)
float(-i64)
float(0.5 * 0.5)
float(0.5 * f32)
float(0.5 * i)
float(0.5 * i32)
float(0.5 * i64)
float(0.5 ** 0.5)
float(0.5 ** 1)
float(0.5 ** f32)
float(0.5 ** i32)
float(0.5 + 1)
float(0.5 + f32)
float(0.5 + i)
float(0.5 + i64)
float(0.5 - 0.5)
float(0.5 - 1)
float(0.5 - f32)
float(0.5 - i)
float(0.5 - i32)
float(0.5 - i64)
float(0.5 / 0.5)
float(0.5 / 1)
float(0.5 / f32)
float(0.5 / f64)
float(0.5 / i)
float(0.5 ^ 0.5)
float(0.5 ^ 1)
float(0.5 ^ f64)
float(0.5 ^ i32)
float(0.5 ^ i64)
float(0.5) != i32
float(0.5) ** (1 % 1)
float(0.5) + 0.5 - f64
float(0.5) + f32
float(0.5) + i32
float(0.5) - -f32
float(0.5) - f32
float(0.5) / f32
float(0.5) < i32
float(0.5) >= i32
float(1 % 1)
float(1 % i)
float(1 % i32)
float(1 % i64)
float(1 * 0.5)
float(1 * 1)
float(1 * i)
float(1 * i32)
float(1 * i64)
float(1 ** 0.5)
float(1 ** i)
float(1 + 0.5)
float(1 + 1)
float(1 + f32)
float(1 + f64)
float(1 + i)
float(1 - 0.5)
float(1 - 1)
float(1 - f32)
float(1 - i)
float(1 / 0.5)
float(1 / 1)
float(1 / f64)
float(1 / i)
float(1 ^ 1)
float(1 ^ f32)
float(1 ^ f64)
float(1 ^ i)
float(1 ^ i32)
float(1 ^ i64)
float(1) != abs(f32)
float(1) != {"foo": i32}?.add
float(1) ** i64
float(1) - i64
float(1) / i
float(1) / i64
float(1) < i32
float(1) <= i64
float(1) == int(0.5)
float(1) > i
float(1) >= f32
float(1) >= i - i
float(abs(0.5))
float(abs(1))
float(abs(f32))
float(abs(i))
float(abs(i32))
float(abs(i64))
float(add(i, 1))
float(array[1])
float(array[i32])
float(array[i64])
float(array[i])
float(count(array, true))
float(count(list, false) * (i - 1))
float(count(list, false))
float(div(1, i))
float(div(i, 1))
float(f32 * 0.5)
float(f32 * f32)
float(f32 * i32)
float(f32 * i64)
float(f32 ** 0.5)
float(f32 ** 1)
float(f32 ** i)
float(f32 ** i64)
float(f32 + 0.5)
float(f32 + 1)
float(f32 + f32)
float(f32 + i32)
float(f32 - 0.5)
float(f32 - 1)
float(f32 - f64)
float(f32 - i)
float(f32 / 0.5)
float(f32 / 1)
float(f32 / f32)
float(f32 / i)
float(f32 / i64)
float(f32 ^ 0.5)
float(f32 ^ f32)
float(f32 ^ f64)
float(f32 ^ i64)
float(f32)
float(f32) * f32
float(f32) + f32
float(f32) - f32
float(f32) - f64
float(f32) - i64
float(f32) / f64
float(f32) < i32
float(f32) <= f32
float(f32) >= f32
float(f32) >= f32 ** f32
float(f32) ^ f64
float(f32) ^ i32
float(f64 * 0.5)
float(f64 * f32)
float(f64 * i)
float(f64 * i32)
float(f64 ** 1)
float(f64 ** f32)
float(f64 + 0.5)
float(f64 + 1)
float(f64 + i)
float(f64 - 0.5)
float(f64 - i)
float(f64 - i32)
float(f64 - i32) / i
float(f64 / -i32)
float(f64 / 1)
float(f64 / f32)
float(f64 / i32)
float(f64 ^ 0.5)
float(f64 ^ 1)
float(f64 ^ f32)
float(f64 ^ f64)
float(f64)
float(f64) != int(i32)
float(f64) * i32
float(f64) / f32
float(f64) / f64
float(f64) / i64
float(f64) < i
float(f64) < i32
float(f64) <= f32
float(f64) <= i64
float(f64) == i32
float(f64) > i32
float(f64) >= f64
float(f64) >= i
float(f64) >= i32
float(f64) ^ i
float(false ? div : i32)
float(false ? f32 : 0.5)
float(find(array, ok))
float(find(array, true))
float(findIndex(list, true))
float(findLast(array, ok))
float(findLast(array, true))
float(first(array))
float(float(0.5))
float(float(1))
float(float(f32))
float(float(f64))
float(float(i))
float(float(i32))
float(float(i64))
float(get(array, 1))
float(get(array, i))
float(get(array, i64))
float(half(-f64))
float(half(0.5))
float(half(f64))
float(i % 1)
float(i * 0.5)
float(i * 1)
float(i * f64)
float(i * i)
float(i * i32 * i32)
float(i * i32)
float(i * i64)
float(i ** 1)
float(i ** f64)
float(i ** i32)
float(i + 0.5)
float(i + f64)
float(i + i64)
float(i - 0.5)
float(i - 1)
float(i - findIndex(array, true))
float(i / 1)
float(i / f64)
float(i / i64)
float(i ^ f32)
float(i ^ f64)
float(i ^ i64)
float(i)
float(i) != f32
float(i) != i32
float(i) != i64
float(i) ** f32
float(i) / i32
float(i) < f32
float(i) < i64
float(i) <= f32
float(i) == i32
float(i) > f64
float(i) ^ f64
float(i) ^ i64
float(i32 % 1)
float(i32 % i)
float(i32 * 1)
float(i32 * f32)
float(i32 ** 0.5)
float(i32 ** f64)
float(i32 ** i32)
float(i32 ** i64)
float(i32 + 1)
float(i32 + f32)
float(i32 - 0.5)
float(i32 - f64)
float(i32 - i)
float(i32 - i32)
float(i32 / 0.5)
float(i32 / 1)
float(i32 / 1) > f64
float(i32 / i)
float(i32 ^ 1)
float(i32 ^ f64)
float(i32 ^ i)
float(i32)
float(i32) != f64
float(i32) * i64
float(i32) + i
float(i32) + i64
float(i32) - i64
float(i32) / i
float(i32) / i32
float(i32) < -0.5
float(i32) == f32
float(i32) == i32
float(i32) > f32
float(i32) > i32
float(i32) >= f32
float(i32) >= f64
float(i32) ^ f32
float(i32) ^ f64
float(i32) ^ i32
float(i64 % i)
float(i64 % i32)
float(i64 * 0.5)
float(i64 * 1)
float(i64 ** f64)
float(i64 ** i64)
float(i64 + 0.5)
float(i64 + f64)
float(i64 - 1)
float(i64 - f32)
float(i64 - f64)
float(i64 - i32)
float(i64 - i64)
float(i64 / 0.5)
float(i64 / 1)
float(i64 / f32)
float(i64 ^ f64)
float(i64)
float(i64) ** i
float(i64) / i32
float(i64) > f64 ^ f32
float(i64) >= i
float(i64) >= i64
float(int(0.5))
float(int(1))
float(int(f32))
float(int(f64))
float(int(i))
float(int(i32))
float(int(i64))
float(len("bar"))
float(len("foo"))
float(len(array))
float(len(list))
float(max(0.5))
float(max(0.5, i32))
float(max(1))
float(max(1, i))
float(max(1, i64))
float(max(f64))
float(max(i))
float(max(i32))
float(max(i64))
float(min(0.5))
float(min(1))
float(min(f32))
float(min(f64))
float(min(i))
float(min(i32))
float(min(i64))
float(ok ? f64 : half)
float(ok ? i : greet)
float(score(1))
float(score(i))
float(score(i, i)) <= f32
float(score(score(i)))
float(string(0.5))
float(string(1))
float(string(f32))
float(string(f64))
float(string(i))
float(string(i64))
float(toJSON(0.5))
float(toJSON(1))
float(toJSON(f32))
float(toJSON(f64))
float(toJSON(i))
float(toJSON(i32))
float(true ? 1 : div)
float(true ? 1 : i64)
float(true ? f64 : div)
foo
foo != first(list)
foo != foo
foo != foo ? 1 : 1
foo != get(list, i)
foo != last(list)
foo != nil ? half : nil
foo == foo
foo == foo ? i : score
foo == last(list)
foo == nil == nil
foo == nil || ok
foo in filter(list, false)
foo in list
foo in list ? nil : i32
foo in map(list, #)
foo not in list
foo.Bar
foo.Bar != string(i64)
foo.Bar + type(greet)
foo.Bar < toJSON(0.5)
foo.Bar == type(0.5)
foo.Bar not matches string(half)
foo.Bar not startsWith foo.String()
foo.Qux
foo.Qux != add
foo.Qux != half
foo.Qux != score
foo.Qux == div
foo.Qux == foo?.Qux
foo.Qux(foo?.String())
foo.Qux(greet("bar"))
foo.Qux(toJSON(0.5))
foo.Qux(toJSON(i))
foo.Qux(toJSON(nil))
foo.Qux(trimSuffix("foo"))
foo.Qux(type("bar"))
foo.Qux(type(i))
foo.String
foo.String != div
foo.String == add
foo.String == greet
foo.String == half
foo.String == score
foo.String()
foo?.Bar
foo?.Bar + type(score)
foo?.Bar in foo
foo?.Bar not endsWith "bar" ? score : array
foo?.Qux
foo?.Qux != div
foo?.Qux != greet
foo?.Qux != half
foo?.Qux != score
foo?.Qux == add
foo?.Qux == greet
foo?.Qux == half
foo?.Qux == score
foo?.Qux(foo?.Bar)
foo?.Qux(string(0.5))
foo?.Qux(type(0.5))
foo?.Qux(upper("bar"))
foo?.String
foo?.String != div
foo?.String != greet
foo?.String != half
foo?.String != nil ? half : list
foo?.String != score
foo?.String == add
foo?.String == half
foo?.String()
foo?.String() + type(list)
foo?.String() < string(i32)
foo?.String() < toJSON(nil)
foo?.String() matches toBase64("bar")
fromBase64(string(ok))
fromBase64(string(true))
fromBase64(toBase64("foo"))
fromBase64(toBase64(toJSON(nil)))
fromBase64(toJSON(nil))
fromBase64(toJSON(ok))
fromBase64(toJSON(true))
fromBase64(type(add))
fromBase64(type(div))
fromBase64(type(false))
fromBase64(type(greet))
fromBase64(type(half))
fromBase64(type(nil == score))
fromBase64(type(ok))
fromBase64(type(score))
fromBase64(type(true))
fromJSON("foo") not in list && false
fromJSON(string(0.5))
fromJSON(string(1))
fromJSON(string(f32))
fromJSON(string(f64))
fromJSON(string(false))
fromJSON(string(i))
fromJSON(string(i32))
fromJSON(string(i64))
fromJSON(string(i64)) ** f64
fromJSON(string(ok))
fromJSON(string(true))
fromJSON(toJSON("foo"))
fromJSON(toJSON(0.5 ** 0.5))
fromJSON(toJSON(1))
fromJSON(toJSON(abs(1)))
fromJSON(toJSON(array))
fromJSON(toJSON(f32))
fromJSON(toJSON(f64))
fromJSON(toJSON(i))
fromJSON(toJSON(i32))
fromJSON(toJSON(i64))
fromJSON(toJSON(list))
fromJSON(toJSON(nil))
fromJSON(toJSON(ok))
fromJSON(toJSON(true))
get(1 .. i32, i)
get(1 .. i64, abs(1))
get(1 .. i64, i)
get(1 .. i64, i32)
get(["bar"], i64)
get([array], i)
get([greet], i)
get([nil, half], i)
get([score, 0.5, score], i64)
get(array, -1)
get(array, -i)
get(array, -i32)
get(array, 1 % 1)
get(array, 1 % i64)
get(array, 1 - 1)
get(array, 1 - i)
get(array, 1) * f64
get(array, 1) < f32
get(array, 1) <= i32
get(array, 1) > i
get(array, 1) ^ f64
get(array, 1) ^ i
get(array, array[1])
get(array, count(list, true))
get(array, false ? div : false)
get(array, first(array))
get(array, i % i64)
get(array, i * 1)
get(array, i)
get(array, i) + i
get(array, i) > i32
get(array, i) ^ f32
get(array, i32 * i64)
get(array, i32)
get(array, i32) ** f32
get(array, i32) == i32
get(array, i32) > f64
get(array, i64)
get(array, i64) ** i
get(array, i64) ** i64
get(array, i64) .. i32
get(array, i64) <= -i32
get(array, i64) <= f64 / f32
get(array, i64) <= i
get(array, i64) == i64
get(array, int(1))
get(array, int(f32))
get(array, int(f64))
get(array, int(i32))
get(array, len(array))
get(array, max(1))
get(array, min(i))
get(array, min(i32))
get(array, score(1))
get(array, true ? i : 1)
get(false ? "bar" : f64, list)
get(false ? "bar" : i32, greet)
get(false ? "foo" : i, ok)
get(false ? 1 : greet, ok)
get(false ? greet : score, score)
get(false ? half : list, i32)
get(false ? list : 1, i32)
get(false ? list : i64, i >= f64)
get(false ? score : 0.5, add)
get(false ? score : 0.5, half)
get(false ? score : f64, half)
get(filter(list, ok), i32)
get(filter(list, ok), i64)
get(i .. i, i)
get(i32 .. 1, i)
get(i64 .. 1, i32)
get(list, -i)
get(list, -i32)
get(list, -i64)
get(list, 1 * i)
get(list, 1).Bar
get(list, 1).Qux
get(list, 1).String
get(list, 1).String()
get(list, 1)?.Bar
get(list, 1)?.Qux
get(list, 1)?.String
get(list, 1)?.String()
get(list, abs(i))
get(list, abs(i32))
get(list, i)
get(list, i) != foo
get(list, i) == foo
get(list, i).Bar
get(list, i).Qux
get(list, i).String
get(list, i)?.Bar
get(list, i)?.Qux
get(list, i)?.String
get(list, i)?.String()
get(list, i32)
get(list, i32).Bar
get(list, i32).Qux
get(list, i32).String
get(list, i32).String()
get(list, i32)?.Bar
get(list, i32)?.Qux
get(list, i32)?.String
get(list, i32)?.String()
get(list, i64 * i32)
get(list, i64)
get(list, i64).Bar
get(list, i64).Qux
get(list, i64).String
get(list, i64).String()
get(list, i64)?.Bar
get(list, i64)?.Qux
get(list, i64)?.String
get(list, i64)?.String()
get(list, int(1) > 0.5 ? div : 0.5)
get(list, int(i))
get(list, int(i32))
get(list, int(i64))
get(list, last(array))
get(list, max(1, i64, i64))
get(list, min(i32))
get(list, min(i64))
get(list, score(1))
get(list[i32:i], i64)
get(map(array, #), i)
get(map(array, #), i64)
get(map(array, #), last(array))
get(map(array, 0.5), i)
get(map(array, 1), i)
get(map(array, i32), i64)
get(map(array, ok), i)
get(map(array, ok), i64)
get(map(list, #), i)
get(map(list, #), i32)
get(map(list, #), i64)
get(map(list, 0.5), i64)
get(map(list, array), i)
get(map(list, div), i32)
get(map(list, i32), i64)
get(map(list, ok), i32)
get(map(list, true), i64)
get(ok ? 0.5 : add, f32)
get(ok ? add : 0.5, ok)
get(ok ? add : false, div)
get(ok ? array : i, add)
get(ok ? i : f64, greet)?.f64
get(ok ? i32 : "foo", score)
get(ok ? i32 : add, div)
get(ok ? list : "foo", f32)
get(ok ? ok : half, array)
get(ok ? true : i32, f32)
get(sort(array), i32)
get(true ? 0.5 : score, foo)
get(true ? 1 : f64, foo)
get(true ? 1 : greet, greet)?.foo
get(true ? add : score, i)
get(true ? array : 1, half)
get(true ? array : i64, ok)
get(true ? div : foo, list)
get(true ? f32 : 1, greet)
get(true ? i : f64, add)
get(true ? i64 : score, i)
get(true ? list : ok, ok)
get({"bar": i32}.i32, ok)
greet
greet != add
greet != div
greet != div != nil
greet != foo.Qux
greet != foo.String
greet != foo?.Qux
greet != foo?.String
greet != greet
greet != greet != nil
greet != greet or 0.5 == i
greet != half
greet != half ? 1 : ok
greet != half ? array : 0.5
greet != half ? false : f64
greet != half ? greet : greet
greet != nil ? i64 : 0.5
greet != score
greet == add
greet == add == ok
greet == add ? div == greet : i64
greet == div
greet == div ? add : i32
greet == foo.Qux
greet == foo.String
greet == foo?.Qux
greet == foo?.String
greet == greet
greet == half
greet == nil != nil
greet == nil && ok
greet == nil == ok
greet == score
greet in [nil]
greet("bar" + "bar")
greet("bar" + "foo")
greet("bar") != foo.String()
greet("bar") != nil != false
greet("bar") in foo
greet("foo" + "bar")
greet("foo" + "foo")
greet("foo") >= string(foo)
greet("foo") not contains "bar" ? array : half
greet("foo") startsWith greet("bar")
greet(false ? f32 : "foo")
greet(false ? i : "bar")
greet(foo.Bar)
greet(foo.String())
greet(foo?.Bar)
greet(foo?.String())
greet(greet("bar"))
greet(greet("foo"))
greet(lower("bar"))
greet(lower("foo"))
greet(ok ? "bar" : div)
greet(string("bar"))
greet(string("foo"))
greet(string(-i64))
greet(string(0.5 == 1))
greet(string(0.5))
greet(string(1))
greet(string([0.5]))
greet(string(add))
greet(string(array))
greet(string(div))
greet(string(f32))
greet(string(f64))
greet(string(false))
greet(string(foo))
greet(string(foo?.Qux))
greet(string(greet))
greet(string(half))
greet(string(i))
greet(string(i32))
greet(string(i64))
greet(string(list))
greet(string(nil != false))
greet(string(nil))
greet(string(ok))
greet(string(score))
greet(string(true))
greet(toBase64("bar"))
greet(toBase64("foo"))
greet(toJSON("bar"))
greet(toJSON("foo"))
greet(toJSON(0.5))
greet(toJSON(1))
greet(toJSON(array))
greet(toJSON(f32))
greet(toJSON(f64))
greet(toJSON(false))
greet(toJSON(foo))
greet(toJSON(i))
greet(toJSON(i32))
greet(toJSON(i64))
greet(toJSON(list))
greet(toJSON(nil))
greet(toJSON(ok))
greet(toJSON(string(array)))
greet(toJSON(true))
greet(trim("bar"))
greet(trim("foo"))
greet(trim(string(array)))
greet(trimPrefix("bar"))
greet(trimPrefix("foo"))
greet(trimSuffix("bar"))
greet(trimSuffix("foo"))
greet(trimSuffix("foo", "foo"))
greet(true ? "foo" : 0.5)
greet(type("bar"))
greet(type("foo"))
greet(type(0.5))
greet(type(1))
greet(type(abs(f32)))
greet(type(add))
greet(type(array))
greet(type(div))
greet(type(f32))
greet(type(f64 / i))
greet(type(f64))
greet(type(false))
greet(type(foo))
greet(type(greet))
greet(type(half))
greet(type(i))
greet(type(i32))
greet(type(i64))
greet(type(list))
greet(type(nil))
greet(type(ok))
greet(type(score))
greet(type(true))
greet(upper("bar"))
greet(upper("foo"))
half
half != add
half != add ? ok : half
half != div
half != div == true
half != foo.Qux
half != foo.String
half != foo?.Qux
half != foo?.String
half != greet
half != half
half != score
half == add
half == add ? "bar" : half
half == div
half == div ? add : 0.5
half == div and 1 >= 1
half == foo.Qux
half == foo.String
half == foo?.Qux
half == foo?.String
half == greet
half == greet == nil
half == greet ? ok : foo
half == greet || ok
half == half
half == half && i >= 0.5
half == half ? score : "bar"
half == half and ok
half == nil == true
half == nil ? 1 : 0.5
half == nil ? 1 : score
half == score
half not in [list, i64, ok]
half not in {"bar": list, "foo": 0.5}.ok
half(-(f32 - 0.5))
half(--1)
half(-0.5)
half(-1)
half(-f32 ^ i)
half(-f64)
half(0.5 * 0.5)
half(0.5 * 1)
half(0.5 * f64)
half(0.5 * i)
half(0.5 * i32)
half(0.5 * i64)
half(0.5 ** 0.5)
half(0.5 ** 1)
half(0.5 ** f32)
half(0.5 ** f64)
half(0.5 ** i)
half(0.5 ** i32)
half(0.5 ** i64)
half(0.5 + 0.5)
half(0.5 + 1)
half(0.5 + f32)
half(0.5 + f64)
half(0.5 + i32)
half(0.5 + i64)
half(0.5 - 0.5)
half(0.5 - 1)
half(0.5 - f32)
half(0.5 - f64)
half(0.5 - i)
half(0.5 - i32)
half(0.5 - i64)
half(0.5 / 0.5)
half(0.5 / 1)
half(0.5 / f32)
half(0.5 / f64)
half(0.5 / i)
half(0.5 / i32)
half(0.5 / i64)
half(0.5 ^ 0.5)
half(0.5 ^ 1)
half(0.5 ^ f32)
half(0.5 ^ f64)
half(0.5 ^ i)
half(0.5 ^ i32)
half(0.5 ^ i64)
half(0.5) != f32
half(0.5) != i64
half(0.5) * f32
half(0.5) ** f32
half(0.5) ** f64
half(0.5) + 1 * f64
half(0.5) + f64
half(0.5) + i32
half(0.5) + i64
half(0.5) - f32
half(0.5) - f64
half(0.5) - i
half(0.5) - i32
half(0.5) / i
half(0.5) / i32
half(0.5) / i64
half(0.5) < i32
half(0.5) <= i
half(0.5) == f32 != true
half(0.5) == i
half(0.5) == i32
half(0.5) == i64
half(0.5) > i
half(0.5) > i32
half(0.5) > i64
half(0.5) >= f32
half(0.5) >= f64
half(0.5) >= i
half(0.5) >= i32
half(0.5) >= i64
half(0.5) ^ (i32 - 1)
half(0.5) ^ i32
half(1 * 0.5)
half(1 * 1)
half(1 * f32)
half(1 * f64)
half(1 * i)
half(1 * i32)
half(1 * i64)
half(1 ** 0.5)
half(1 ** 1)
half(1 ** f32)
half(1 ** f64)
half(1 ** i)
half(1 ** i32)
half(1 ** i64)
half(1 + 0.5)
half(1 + 1)
half(1 + f32)
half(1 + f64)
half(1 + i)
half(1 + i32)
half(1 + i64)
half(1 - 0.5)
half(1 - 1)
half(1 - f32)
half(1 - f64)
half(1 - i)
half(1 - i32)
half(1 - i64)
half(1 / 0.5)
half(1 / 1)
half(1 / f32)
half(1 / f64)
half(1 / i)
half(1 / i32)
half(1 / i64)
half(1 ^ 0.5)
half(1 ^ 1)
half(1 ^ f32)
half(1 ^ f64)
half(1 ^ i)
half(1 ^ i32)
half(abs(0.5))
half(abs(f64))
half(abs(f64)) - i
half(f32 * 0.5)
half(f32 * 1)
half(f32 * f64)
half(f32 * i)
half(f32 * i32)
half(f32 * i64)
half(f32 ** 0.5)
half(f32 ** f32)
half(f32 ** f64)
half(f32 + 0.5)
half(f32 + 1)
half(f32 + f64)
half(f32 + i)
half(f32 + i32)
half(f32 + i64)
half(f32 - 0.5)
half(f32 - 1)
half(f32 - f64)
half(f32 - i)
half(f32 - i32)
half(f32 - i64)
half(f32 / 0.5)
half(f32 / 1)
half(f32 / f32)
half(f32 / f64)
half(f32 / i32)
half(f32 / i64)
half(f32 ^ 0.5)
half(f32 ^ f32)
half(f32 ^ f64)
half(f32 ^ i32)
half(f32 ^ i64)
half(f64 * 0.5)
half(f64 * 1)
half(f64 * f32)
half(f64 * i)
half(f64 * i32)
half(f64 ** 0.5)
half(f64 ** 1)
half(f64 ** f32)
half(f64 ** f64)
half(f64 ** i)
half(f64 ** i32)
half(f64 + 1)
half(f64 + f32)
half(f64 + i)
half(f64 + i32)
half(f64 - 0.5)
half(f64 - 1)
half(f64 - f32)
half(f64 - f64)
half(f64 - i)
half(f64 - i32)
half(f64 - i64)
half(f64 / 1)
half(f64 / f32)
half(f64 / f64)
half(f64 / i32)
half(f64 / i64)
half(f64 ^ 0.5)
half(f64 ^ 1)
half(f64 ^ f32)
half(f64 ^ i)
half(f64 ^ i32)
half(f64 ^ i64)
half(f64)
half(f64) != f32
half(f64) != f64
half(f64) != i64
half(f64) * f32
half(f64) * i64
half(f64) ** (i32 * 0.5)
half(f64) ** 0.5 ** i
half(f64) ** f64
half(f64) ** i64
half(f64) + 1 + f64
half(f64) + f64
half(f64) + i
half(f64) + i32
half(f64) + i64
half(f64) - f64
half(f64) - i32
half(f64) / f32
half(f64) / f64
half(f64) / i32
half(f64) / i64
half(f64) < f64
half(f64) < i
half(f64) < i32
half(f64) < i64
half(f64) <= 0.5 + f64
half(f64) <= f64
half(f64) <= i64
half(f64) == i64
half(f64) > abs(i)
half(f64) > f32 * 0.5
half(f64) > max(i64)
half(f64) >= f32
half(f64) >= i
half(f64) >= i64
half(f64) ^ f32
half(false ? 0.5 : 0.5)
half(float(-f64))
half(float(0.5))
half(float(1))
half(float(f32))
half(float(f64))
half(float(i))
half(float(i32))
half(float(i64))
half(greet == div ? "bar" : 0.5)
half(half(0.5))
half(half(f64))
half(half(i - 0.5))
half(i * 0.5)
half(i * 1)
half(i * f32)
half(i * f64)
half(i ** 0.5)
half(i ** 1)
half(i ** f32)
half(i ** f64)
half(i ** i)
half(i ** i64)
half(i + 0.5)
half(i + 1)
half(i + f32)
half(i + f64)
half(i - 0.5)
half(i - 1)
half(i - f64)
half(i / 0.5)
half(i / 1)
half(i / f32)
half(i / f64)
half(i / i)
half(i / i32)
half(i / i64)
half(i ^ 0.5)
half(i ^ 1)
half(i ^ f32)
half(i ^ i32)
half(i ^ i64)
half(i32 * 0.5)
half(i32 * 1)
half(i32 * f32)
half(i32 * f64)
half(i32 ** 0.5)
half(i32 ** 1)
half(i32 ** f32)
half(i32 ** f64)
half(i32 ** i)
half(i32 ** i32)
half(i32 ** i64)
half(i32 + 0.5)
half(i32 + 1)
half(i32 + f64)
half(i32 - 0.5)
half(i32 - 1)
half(i32 - f32)
half(i32 - f64)
half(i32 / 0.5)
half(i32 / 1)
half(i32 / f32)
half(i32 / f64)
half(i32 / i)
half(i32 / i32)
half(i32 / i64)
half(i32 ^ 0.5)
half(i32 ^ 1)
half(i32 ^ f32)
half(i32 ^ i)
half(i32 ^ i32)
half(i32 ^ i64)
half(i64 * 0.5)
half(i64 * 1)
half(i64 * f64)
half(i64 ** 0.5)
half(i64 ** 1)
half(i64 ** f32)
half(i64 ** f64)
half(i64 ** i64)
half(i64 + 0.5)
half(i64 + 1)
half(i64 + f32)
half(i64 + f64)
half(i64 - 0.5)
half(i64 - 1)
half(i64 - f32)
half(i64 / 0.5)
half(i64 / 1)
half(i64 / f32)
half(i64 / f64)
half(i64 / i)
half(i64 / i32)
half(i64 / i64)
half(i64 ^ 0.5)
half(i64 ^ 1)
half(i64 ^ f32)
half(i64 ^ f64)
half(i64 ^ i32)
half(i64 ^ i64)
half(max(0.5))
half(max(0.5, f32))
half(max(f64))
half(min(0.5))
half(min(0.5, 0.5))
half(min(1, 0.5, 1))
half(min(f64))
half(ok ? 0.5 : f32)
half(ok ? 0.5 : false)
half(ok ? 0.5 : foo)
half(true ? 0.5 : 0.5)
hasPrefix("bar", "foo") != ok
hasSuffix("foo", "foo") or 0.5 <= i
i
i != -0.5
i != -1
i != -f32
i != -f64
i != -i
i != -i64
i != 0.5 / 0.5
i != 0.5 == ok
i != 0.5 ? 1 : array
i != 0.5 ? i32 : 0.5
i != 0.5 ? score : score
i != 1 % i64
i != 1 * i
i != 1 + 1
i != 1 - 0.5
i != 1 - 1
i != 1 - i64
i != 1 == ok
i != 1 ? ok : i64
i != 1 or i64 != 1
i != f32
i != f32 + i
i != f32 / 1
i != f32 ? div : list
i != f64
i != f64 * 0.5
i != f64 + 1
i != f64 / 0.5
i != f64 ? 0.5 : nil
i != f64 ? array : div
i != f64 ? half : 1
i != f64 || ok
i != first(array)
i != float(1)
i != float(f32)
i != float(f64)
i != half(0.5)
i != i
i != i != nil
i != i ^ f64
i != i32
i != i32 % i32
i != i32 * f64
i != i32 - i64
i != i32 / i64
i != i32 ? 1 : i
i != i32 ? list : i
i != i32 || half != nil
i != i64
i != i64 - f32
i != i64 ? true : "foo"
i != i64 ^ f64
i != int(1)
i != max(i32)
i != min(1)
i != nil != true
i != nil ? ok : "bar"
i != score(i)
i % -1
i % -i
i % -i32
i % -i64
i % 1 != i64
i % 1 .. i32
i % 1 / i
i % 1 >= i
i % 1 >= i32
i % array[i]
i % first(array)
i % get(array, i64)
i % i
i % i % i32
i % i + i32
i % i == i
i % i in array
i % i32
i % i32 / i32
i % i32 <= f32
i % i64
i % i64 != i
i % int(i64)
i % len(array)
i % score(1)
i % score(i)
i * (0.5 + 0.5)
i * (f32 + f32)
i * (i32 + 0.5)
i * (i32 - f64)
i * (i64 + 1)
i * -1
i * -f32
i * -i
i * -i64
i * 0.5 * f64
i * 0.5 + i
i * 0.5 - i
i * 0.5 < i
i * 0.5 <= i64 ** f64
i * 1 % i
i * 1 ** i32
i * 1 / f64
i * 1 / i64
i * 1 <= f32
i * abs(0.5)
i * add(1, 1)
i * array[i32]
i * f32
i * f32 != f32
i * f32 ** 0.5
i * f32 >= f32
i * f32 ^ f32
i * f64
i * f64 * 1
i * float(f64)
i * half(f64)
i * i
i * i != i64
i * i / f32
i * i / f64
i * i / i32
i * i / i64
i * i32
i * i32 ** f64
i * i32 ** i32
i * i32 - i
i * i32 / i32
i * i32 <= i32
i * i64
i * i64 % i32
i * i64 * 0.5
i * i64 + f32
i * i64 >= i32
i * i64 ^ i64
i * int(f64)
i * int(i)
i * int(i64)
i * max(0.5)
i * min(i64)
i * score(1)
i ** (0.5 + f64)
i ** (0.5 + i64)
i ** (1 * 1)
i ** (1 - 0.5)
i ** (i32 % i64)
i ** (i32 - 1)
i ** -0.5
i ** -i
i ** -i32
i ** -i64
i ** 0.5 ** 0.5
i ** 0.5 ** 1
i ** 0.5 < f32
i ** 0.5 <= i64 ^ i32
i ** 1 != f64
i ** 1 ** 1
i ** 1 ** f64
i ** 1 ** i
i ** 1 == f32
i ** f32
i ** f32 ** 0.5
i ** f32 ** f64
i ** f32 + f64
i ** f32 <= f32
i ** f32 <= i32 ? 1 : f32
i ** f32 >= float(i64)
i ** f64
i ** f64 != f64
i ** f64 < 1 / 0.5
i ** float(0.5)
i ** float(f32)
i ** float(i32)
i ** half(f64)
i ** i
i ** i + f64
i ** i <= i
i ** i ^ i
i ** i32
i ** i32 != i
i ** i32 != i32
i ** i32 + i32
i ** i64
i ** i64 ** 1
i ** i64 ** f64
i ** i64 ** i64
i ** i64 - f64
i ** i64 >= i
i ** i64 >= i32
i ** i64 ^ 1
i ** int(1)
i ** max(f32)
i ** min(0.5, 1)
i ** min(f32)
i ** min(i)
i ** min(i32)
i ** score(1)
i + -1
i + -f32
i + -f64
i + -i
i + 0.5 != i
i + 0.5 ** i32
i + 0.5 - i
i + 0.5 < 1 + f32
i + 0.5 <= i32
i + 0.5 > f32
i + 1 / array[i32]
i + 1 / f32
i + 1 <= f32
i + 1 > i64
i + 1 >= f64
i + array[i32]
i + count(list, false)
i + f32
i + f32 != f64
i + f32 * i
i + f32 ** i
i + f64
i + f64 <= i64
i + f64 == f64
i + float(0.5)
i + float(f32)
i + get(array, i64)
i + half(0.5)
i + half(f64)
i + i
i + i + f32
i + i - i32
i + i32
i + i32 != i64
i + i32 - 0.5
i + i32 .. i
i + i32 > f32
i + i64
i + i64 + f64
i + i64 ^ 1
i + int(f32)
i + int(i64)
i + last(array)
i + len("bar")
i + max(0.5)
i + max(f32)
i - -1
i - -f32
i - -i
i - -i64
i - 0.5 * 0.5
i - 0.5 * 1
i - 0.5 / 1
i - 1 * 1
i - 1 * i32
i - 1 - i
i - 1 ^ 0.5
i - 1 ^ i32
i - abs(0.5)
i - abs(f32)
i - abs(i32)
i - f32
i - f32 * i32
i - f32 ** 1
i - f32 + f64
i - f32 - 1
i - f32 / 0.5
i - f32 / f32
i - f32 / i32
i - f32 ^ i64
i - f64
i - findIndex(list, ok)
i - half(0.5)
i - i
i - i * 1
i - i < i + f64
i - i <= i
i - i <= i32
i - i >= f32
i - i not in array
i - i32
i - i32 > len(array)
i - i32 ^ 0.5
i - i64
i - i64 ** 1
i - i64 + i32
i - i64 - 1 / 1
i - i64 - f64
i - int(1)
i - int(f32)
i - int(i)
i - last(array)
i - max(0.5)
i - max(i64)
i - min(f32)
i - score(1)
i - score(i)
i .. -i32
i .. 1 % i32
i .. 1 == array
i .. abs(1)
i .. abs(i32)
i .. i
i .. i % 1
i .. i32
i .. i32 == array
i .. i64
i .. i64 + i
i .. i64 == list
i .. int(i64)
i .. last(array)
i .. len(list)
i .. min(1)
i .. score(i)
i / (f32 + f64)
i / (f64 + f32)
i / (i32 + f32)
i / -0.5
i / -1
i / -i32
i / -i64
i / 0.5 * f32
i / 0.5 * f64
i / 0.5 ** f32
i / 0.5 / i32
i / 0.5 < i64
i / 0.5 <= i64
i / 0.5 == 0.5 - f64
i / 0.5 >= i64
i / 1 ** 1
i / 1 / i64
i / 1 == f64
i / 1 ^ 1
i / 1 ^ i64
i / abs(i64)
i / f32
i / f32 != f32
i / f32 ** i64
i / f32 / i
i / f64
i / f64 * f32
i / f64 - f32
i / float(i32)
i / half(0.5)
i / half(f64)
i / i
i / i != i64
i / i > i32
i / i > i64
i / i32
i / i32 - i
i / i32 / i
i / i32 / i64
i / i32 ^ f32
i / i64
i / i64 != i
i / i64 ** f32
i / i64 < i % 1
i / i64 >= i32 ? div : div
i / len("bar")
i / len(list)
i / max(1 / i)
i / min(0.5)
i / min(f64)
i / min(i32)
i / score(1)
i / score(i)
i < -(f32 - 1)
i < -1
i < -f32
i < -i
i < -i32
i < 0.5 != false
i < 0.5 != ok
i < 0.5 * i
i < 0.5 + 0.5
i < 0.5 == ok
i < 0.5 ? "bar" : "bar"
i < 0.5 ? f32 : array
i < 0.5 ? f32 : half
i < 1 * 1
i < 1 ** f32
i < 1 == ok
i < 1 ? false : nil
i < abs(f64)
i < f32
i < f32 * i
i < f32 ^ f32
i < f64
i < f64 * f64
i < findIndex(list, ok)
i < half(f32 ^ i64)
i < half(f64)
i < i
i < i % 1
i < i / 1
i < i ? i32 : add
i < i ^ 0.5
i < i ^ i32
i < i32
i < i32 ** 0.5
i < i32 - f32
i < i32 == nil
i < i64
i < i64 && ok
i < i64 - f64
i < i64 - i32
i < i64 ? nil : "foo"
i < i64 ^ 0.5
i < int(0.5)
i < int(i64)
i < len(array)
i < len(list)
i < min(i64)
i < score(1)
i < score(i)
i <= -f32
i <= -i
i <= -i64
i <= 0.5 ** 0.5
i <= 0.5 ** f32
i <= 0.5 == nil
i <= 0.5 ? score : array
i <= 1 != all(array, true)
i <= 1 != nil
i <= 1 % i
i <= 1 + 1
i <= 1 - f64
i <= 1 ? ok : 1
i <= abs(1)
i <= abs(i32)
i <= add(1, 1)
i <= f32
i <= f32 != nil
i <= f32 * 0.5
i <= f32 / f32
i <= f32 ? ok : 1
i <= f32 or ok
i <= f64
i <= f64 * 1
i <= f64 == nil
i <= f64 ? foo : div
i <= f64 or add == greet
i <= float(f64)
i <= float(i)
i <= float(i32)
i <= half(-1)
i <= half(0.5)
i <= i
i <= i ** 1
i <= i == true
i <= i32
i <= i32 - f32
i <= i32 - i64
i <= i64
i <= i64 % i32
i <= i64 / 1
i <= i64 ? ok : 1
i <= int(1)
i <= int(i32)
i <= len("bar")
i <= len(array)
i <= max(i)
i <= min(f32)
i <= min(f64)
i <= min(i)
i <= min(i64)
i == -0.5
i == -1
i == -f32
i == -f64
i == -i
i == -i32
i == -i64
i == 0.5 + f32
i == 0.5 - i32
i == 0.5 == ok
i == 0.5 ? false : true
i == 0.5 ? list : i32
i == 0.5 ^ 0.5
i == 1 != true
i == 1 % i
i == 1 * f32
i == 1 ** 1
i == 1 ? foo : list
i == 1 || ok
i == abs(0.5)
i == abs(1)
i == div(1, i)
i == f32
i == f32 * i64
i == f64
i == f64 != nil
i == f64 + i64
i == f64 == ok
i == i
i == i - f64
i == i / i32
i == i ? ok : score
i == i ^ i
i == i32
i == i32 ** f32
i == i32 ** i
i == i32 ? list : foo
i == i64
i == i64 != ok
i == i64 + i32
i == i64 ? array : 0.5
i == i64 ? score : 1
i == i64 ^ f64
i == int(f64)
i == len(array)
i == max(0.5)
i == max(i64)
i == min(i)
i == nil ? false : 1
i == score(1)
i > -i64
i > 0.5 * f64
i > 0.5 ** 0.5
i > 0.5 / 0.5
i > 0.5 / 1
i > 0.5 == nil
i > 0.5 ^ 0.5
i > 1 ? greet : "bar"
i > 1 ? greet : f64
i > abs(i64)
i > array[i]
i > f32
i > f64
i > f64 + 0.5
i > float(1)
i > half(f64)
i > i
i > i ** i32
i > i ** i64
i > i / i
i > i or ok
i > i32
i > i32 ? 1 : true
i > i32 ? foo : score
i > i32 ^ i
i > i64
i > int(0.5)
i > int(i)
i > int(i32)
i > max(f32)
i > max(i)
i > min(0.5)
i > score(i)
i > score(len(array))
i >= -0.5
i >= -1
i >= -i32
i >= -i64
i >= 0.5 ** f64
i >= 0.5 + i32
i >= 0.5 - 1
i >= 0.5 == nil
i >= 0.5 ? div : i
i >= 0.5 ? score : f64
i >= 1 / i
i >= 1 ? nil : 0.5
i >= abs(0.5)
i >= abs(i64)
i >= f32
i >= f32 ** f64
i >= f32 - i
i >= f32 ? "bar" : array
i >= f32 ? score : half
i >= f64
i >= f64 * i32
i >= f64 + i32
i >= f64 - i
i >= i
i >= i ** 0.5
i >= i / 1
i >= i / i
i >= i == nil
i >= i == ok
i >= i32
i >= i32 ** 0.5
i >= i32 - f64
i >= i32 ? f64 : div
i >= i64
i >= i64 * i
i >= i64 ^ 0.5
i >= int(i32)
i >= len("foo")
i >= min(f32 ^ i64)
i >= score(i)
i ^ (0.5 * 1)
i ^ (0.5 - 0.5)
i ^ (f32 * 1)
i ^ (f32 * f32)
i ^ (f32 * f64)
i ^ (f32 / f64)
i ^ (i * 1)
i ^ (i - i64)
i ^ (i32 % 1)
i ^ (i32 + i)
i ^ (i32 / 0.5)
i ^ (i64 / 0.5)
i ^ (i64 / 1)
i ^ --f32
i ^ -1
i ^ -i
i ^ -i32
i ^ -i64
i ^ 0.5 != 1 + i
i ^ 0.5 * f32
i ^ 0.5 - i
i ^ 0.5 / f64
i ^ 0.5 <= f32
i ^ 0.5 > i64
i ^ 0.5 ^ f32
i ^ 1 != f32
i ^ 1 * f32
i ^ 1 ** i
i ^ 1 - f32
i ^ 1 / i32
i ^ 1 ^ i64
i ^ abs(1)
i ^ abs(f32)
i ^ abs(i64)
i ^ add(1, 1)
i ^ array[i]
i ^ f32
i ^ f32 != 1 - i
i ^ f32 != i64 ? list : i32
i ^ f32 + f64
i ^ f32 / i
i ^ f32 < i
i ^ f32 >= i32
i ^ f64
i ^ f64 * i
i ^ f64 >= f64
i ^ find(array, true)
i ^ float(f64)
i ^ i
i ^ i ** f64
i ^ i + i32
i ^ i >= f64
i ^ i32
i ^ i32 - f32
i ^ i32 == i64 * i
i ^ i32 >= f64
i ^ i32 >= max(i64)
i ^ i64
i ^ i64 * i64
i ^ i64 ** i
i ^ i64 == f32
i ^ i64 >= i64 ^ f32
i ^ i64 ^ f64
i ^ int(f32)
i ^ max(1)
i ^ min(i32)
i ^ score(1)
i in array
i in array == ok
i in array ? f32 : greet
i in array ? foo : false
i in array || ok
i not in array
i not in array ? foo : list
i not in array and true
i not in i64 .. 1
i not in map(array, #)
i not in {"foo": 1}.div
i32
i32 != -0.5
i32 != -1
i32 != -f32
i32 != -i
i32 != 0.5 && nil == i64
i32 != 1 && ok
i32 != 1 * i64
i32 != 1 + 1
i32 != 1 / 1
i32 != 1 ? 0.5 : greet
i32 != 1 ? false : i64
i32 != 1 ? greet : half
i32 != 1 ? greet : ok
i32 != abs(i64)
i32 != array[i]
i32 != count(array, ok)
i32 != f32
i32 != f32 && ok
i32 != f32 / f64
i32 != f32 ? f64 : i32
i32 != f32 and ok
i32 != f64
i32 != f64 == true
i32 != findIndex(list, false)
i32 != first(array)
i32 != float(i)
i32 != get(array, i64)
i32 != half(f64)
i32 != i
i32 != i ** 1
i32 != i ** f64
i32 != i32
i32 != i32 * 1
i32 != i32 - 0.5
i32 != i32 ? array : add
i32 != i64
i32 != i64 % i32
i32 != i64 * 0.5
i32 != i64 ? div : nil
i32 != i64 ? true : nil
i32 != int(f32)
i32 != max(1)
i32 != max(f64, 0.5)
i32 != min(1, 0.5, f64)
i32 != min(i)
i32 != nil ? half : 1
i32 % -i
i32 % -i32
i32 % 1 != i64
i32 % 1 % (i64 + i64)
i32 % 1 % i64
i32 % 1 * f64
i32 % 1 + f64
i32 % 1 > i
i32 % add(1, 1)
i32 % count(list, ok)
i32 % i
i32 % i != f32
i32 % i32
i32 % i32 != i
i32 % i32 * f32
i32 % i32 * i
i32 % i64
i32 % i64 != f32
i32 % i64 / i32
i32 % i64 == i
i32 % i64 >= i64
i32 % min(1, i64)
i32 % min(i)
i32 * (f32 + 1)
i32 * (f32 + f32)
i32 * (f32 + i)
i32 * (f64 - f32)
i32 * (i32 - 0.5)
i32 * (i32 - f64)
i32 * (i32 - i64)
i32 * -f32
i32 * -f64
i32 * -i
i32 * 0.5 ** 0.5
i32 * 0.5 + f64
i32 * 0.5 <= f32
i32 * 1 % i64
i32 * 1 * f32
i32 * 1 * i32
i32 * 1 < i
i32 * array[i32]
i32 * count(array, true)
i32 * f32
i32 * f32 != i
i32 * f64
i32 * f64 * i
i32 * f64 + f32
i32 * f64 / i
i32 * f64 > i32
i32 * i
i32 * i != i32
i32 * i * 0.5
i32 * i .. i
i32 * i / array[i32]
i32 * i / i32
i32 * i / i64
i32 * i32
i32 * i32 % i32
i32 * i32 * 0.5
i32 * i32 ** 1
i32 * i32 - f32
i32 * i32 == i32
i32 * i64
i32 * i64 % 1
i32 * i64 .. i
i32 * i64 / 1
i32 * i64 / i32
i32 * int(f32)
i32 * max(f64)
i32 * max(i64)
i32 * min(1)
i32 ** (0.5 * 0.5)
i32 ** (0.5 + 0.5)
i32 ** (0.5 + i32)
i32 ** (0.5 / f64)
i32 ** (f32 / i)
i32 ** (f64 + 0.5)
i32 ** (i + 1)
i32 ** (i64 - i)
i32 ** -1 ^ i32
i32 ** -f32
i32 ** -i32
i32 ** -i64
i32 ** 0.5 / f32
i32 ** 0.5 <= i32
i32 ** 0.5 ^ i
i32 ** 1 ** i64
i32 ** 1 + f64
i32 ** 1 + i64
i32 ** 1 - f32
i32 ** 1 >= i64 * 0.5
i32 ** 1 ^ f64
i32 ** array[i]
i32 ** f32
i32 ** f32 ** i
i32 ** f32 == i64
i32 ** f64
i32 ** f64 != i64 ? i : half
i32 ** f64 + f64
i32 ** f64 >= i
i32 ** f64 ^ f32
i32 ** float(1)
i32 ** float(f64)
i32 ** half(0.5)
i32 ** i
i32 ** i ** 0.5
i32 ** i ^ 0.5
i32 ** i32
i32 ** i64
i32 ** i64 != 0.5 == true
i32 ** i64 - f64
i32 ** i64 / f64
i32 ** i64 / i
i32 ** i64 > i
i32 ** i64 ^ 1
i32 ** i64 ^ i
i32 ** int(0.5)
i32 ** int(f64)
i32 ** len(array)
i32 ** min(f64)
i32 ** min(i32)
i32 ** score(1)
i32 ** score(i)
i32 + -0.5
i32 + -1
i32 + -f32
i32 + -f64
i32 + -i
i32 + -i32
i32 + 0.5 * 0.5
i32 + 0.5 * i32
i32 + 0.5 + 1
i32 + 0.5 + i64
i32 + 0.5 - 0.5
i32 + 0.5 - f32
i32 + 0.5 <= i
i32 + 0.5 > i % 1
i32 + 0.5 >= i
i32 + 1 / f64
i32 + 1 < i32
i32 + 1 ^ i
i32 + 1 ^ i32
i32 + abs(i32)
i32 + count(array, false)
i32 + f32
i32 + f64
i32 + f64 * 1
i32 + f64 * f64
i32 + f64 ** 0.5
i32 + f64 - f32 * 0.5
i32 + f64 == i32
i32 + f64 >= i
i32 + f64 ^ i32
i32 + find(array, ok)
i32 + i
i32 + i * 1
i32 + i - f32
i32 + i > half(f64)
i32 + i >= -1
i32 + i32
i32 + i32 ** 0.5
i32 + i32 >= f32
i32 + i32 ^ i64
i32 + i64
i32 + i64 + i64
i32 + i64 / f64
i32 + i64 <= f32
i32 + i64 ^ f32
i32 + i64 not in array
i32 + int(f64)
i32 + last(array)
i32 + len("foo")
i32 + len(list)
i32 + min(0.5, i32)
i32 + min(1, i)
i32 + min(i)
i32 + min(i, i32)
i32 + score(i)
i32 - -0.5
i32 - -1
i32 - -f32
i32 - -i32
i32 - -i64
i32 - 0.5 * 0.5
i32 - 0.5 * i64
i32 - 0.5 + i
i32 - 0.5 + i32
i32 - 0.5 - f32
i32 - 0.5 < i32
i32 - 0.5 <= f64
i32 - 1 != f32
i32 - 1 * f32
i32 - 1 ** i32
i32 - 1 / 0.5
i32 - 1 <= i64
i32 - 1 not in array
i32 - array[1]
i32 - f32
i32 - f32 * f32
i32 - f32 ** f64
i32 - f32 + 0.5
i32 - f32 / f64
i32 - f64
i32 - f64 ** f64
i32 - f64 + 0.5
i32 - f64 - i64
i32 - f64 / i64
i32 - f64 < i64
i32 - first(array)
i32 - float(i)
i32 - get(array, i64)
i32 - i
i32 - i % i
i32 - i + f32
i32 - i - 1
i32 - i / i
i32 - i <= i64
i32 - i == i
i32 - i > f64
i32 - i >= f64
i32 - i32
i32 - i32 ** 0.5
i32 - i32 <= i32 + i64
i32 - i32 ^ 1
i32 - i64
i32 - i64 % i
i32 - i64 % i64
i32 - i64 .. i
i32 - i64 <= i
i32 - i64 ^ 0.5
i32 - i64 ^ f64
i32 - int(1)
i32 - int(f64)
i32 - max(i64)
i32 - max(i64, i)
i32 - min(0.5)
i32 - score(i)
i32 .. -1
i32 .. -i
i32 .. -i32
i32 .. -i64
i32 .. 1 - 1
i32 .. abs(i)
i32 .. array[i32]
i32 .. count(array, ok)
i32 .. i
i32 .. i - 1
i32 .. i32
i32 .. i32 != list
i32 .. i64
i32 .. i64 - i32
i32 .. int(0.5)
i32 .. len(list)
i32 .. min(1)
i32 .. min(1, 0.5)
i32 .. min(i32)
i32 .. min(i64)
i32 .. score(i)
i32 / (0.5 + i32)
i32 / (1 + f32)
i32 / (1 - f32)
i32 / (1 - i)
i32 / (f32 + i)
i32 / (f32 - f64)
i32 / (f64 + 0.5)
i32 / (f64 - 1)
i32 / (i32 - 1)
i32 / -0.5
i32 / -1
i32 / -f32
i32 / -i
i32 / -i32
i32 / 0.5 * i
i32 / 0.5 / i64
i32 / 0.5 >= f64
i32 / 1 != f64
i32 / 1 < i32
i32 / abs(0.5)
i32 / f32
i32 / f64
i32 / f64 * i32
i32 / f64 >= f32
i32 / half(f64)
i32 / i
i32 / i <= i
i32 / i32
i32 / i32 * 1
i32 / i32 / f32 / f64
i32 / i32 / i64
i32 / i64
i32 / i64 != i64
i32 / i64 * i
i32 / i64 / i
i32 / i64 == f32
i32 / i64 == f64
i32 / int(i)
i32 / len("bar")
i32 / len("foo")
i32 / max(i32)
i32 / min(f32)
i32 / min(f64)
i32 / min(i)
i32 / min(i32)
i32 < -(i - f32)
i32 < -0.5
i32 < -f32
i32 < -i32
i32 < 0.5 ** i32
i32 < 0.5 - f32
i32 < 0.5 ^ 1
i32 < 1 % 1
i32 < 1 ** 1
i32 < 1 + 0.5
i32 < 1 + 1
i32 < 1 ? "foo" : i32
i32 < 1 ? 1 : 0.5
i32 < 1 ^ i32
i32 < abs(i64)
i32 < div(1, 1)
i32 < f32
i32 < f32 == nil
i32 < f32 ? div : true
i32 < f32 || i64 != f32
i32 < f64
i32 < f64 != nil
i32 < f64 != true
i32 < f64 * f32
i32 < f64 == nil
i32 < f64 ? f32 : half
i32 < f64 ? greet : false
i32 < f64 ? list : i32
i32 < f64 ^ f32
i32 < f64 || 1 < 1
i32 < float(i)
i32 < float(i32)
i32 < half(0.5)
i32 < i
i32 < i != true
i32 < i ^ 0.5
i32 < i32
i32 < i32 != ok
i32 < i32 * f32
i32 < i32 / i32
i32 < i32 ? ok : 1
i32 < i64
i32 < i64 - 0.5
i32 < i64 ^ f64
i32 < int(0.5)
i32 < int(i32)
i32 < int(i64)
i32 < max(0.5)
i32 < max(1)
i32 < min(1, i32)
i32 < min(f64)
i32 < min(i)
i32 < min(i64)
i32 < score(1)
i32 <= -0.5
i32 <= -f32
i32 <= -i
i32 <= -i32
i32 <= 0.5 != nil
i32 <= 0.5 != ok
i32 <= 0.5 * 0.5
i32 <= 0.5 * i
i32 <= 0.5 + i64
i32 <= 1 ? i : f32
i32 <= 1 ? true : true
i32 <= 1 or 0.5 == 0.5
i32 <= abs(i32)
i32 <= count(list, ok)
i32 <= f32
i32 <= f32 * i64
i32 <= f32 / 0.5
i32 <= f32 ^ i64
i32 <= f64
i32 <= f64 * i
i32 <= f64 ^ 1
i32 <= float(i)
i32 <= half(0.5)
i32 <= i
i32 <= i % i64
i32 <= i32
i32 <= i32 != nil
i32 <= i32 % 1
i32 <= i32 ** f64
i32 <= i64
i32 <= i64 != false
i32 <= i64 != ok
i32 <= i64 + f32
i32 <= i64 ? div : nil
i32 <= last(array)
i32 <= len(array)
i32 <= len(list)
i32 <= max(f64)
i32 <= min(i)
i32 <= score(1)
i32 <= score(i)
i32 == -0.5
i32 == -1
i32 == -f64
i32 == -i
i32 == -i64
i32 == 0.5 / f64
i32 == 0.5 ? half : array
i32 == 0.5 ^ i
i32 == 0.5 ^ i64
i32 == 1 ** 1
i32 == 1 ** i
i32 == 1 || f32 < f64
i32 == f32
i32 == f32 ? f32 : nil
i32 == f32 ? half : "bar"
i32 == f32 ? score : false
i32 == f32 or ok
i32 == f64
i32 == f64 != ok
i32 == f64 * 0.5
i32 == f64 ** f32
i32 == f64 ** i64
i32 == f64 ? add : half
i32 == findLastIndex(array, ok)
i32 == float(i)
i32 == half(0.5)
i32 == i
i32 == i % i64
i32 == i ? "foo" : greet
i32 == i ? type(false) : array
i32 == i ^ f64
i32 == i and ok
i32 == i || ok
i32 == i32
i32 == i32 ? add : add
i32 == i32 ? f32 : f64
i32 == i32 ^ 1
i32 == i64
i32 == i64 + f32
i32 == i64 ? foo : list
i32 == len(list)
i32 == max(0.5)
i32 == min(f32)
i32 == min(i32)
i32 == nil ? f32 : add
i32 == nil and ok
i32 == {"foo": f32, "foo": list}?.String?.Qux
i32 > -0.5
i32 > -1
i32 > -f32
i32 > -f64
i32 > -i
i32 > -i32
i32 > -i64
i32 > 0.5 != ok
i32 > 0.5 != true
i32 > 0.5 * f64
i32 > 0.5 ** f32
i32 > 0.5 ** i
i32 > 0.5 + 0.5
i32 > 0.5 + 1
i32 > 0.5 - 1
i32 > 0.5 / i64
i32 > 0.5 == nil
i32 > 0.5 ? greet : f32
i32 > 0.5 ? ok : false
i32 > 0.5 ^ f32
i32 > 1 ** f64
i32 > 1 - i
i32 > 1 / 1
i32 > 1 ? i : add
i32 > 1 || ok
i32 > abs(1)
i32 > abs(f64)
i32 > array[1]
i32 > array[i32]
i32 > f32
i32 > f32 != ok
i32 > f32 && "bar" == nil
i32 > f32 * i64
i32 > f32 ? "bar" : half
i32 > f64
i32 > f64 * 0.5
i32 > f64 - 1
i32 > f64 / 1
i32 > f64 / i32
i32 > f64 == nil
i32 > f64 == ok
i32 > f64 == true
i32 > f64 ? 0.5 : add
i32 > f64 ^ i64
i32 > float(i)
i32 > float(i32)
i32 > half(0.5)
i32 > half(f64)
i32 > i
i32 > i + f32
i32 > i / f32
i32 > i ^ i32
i32 > i32
i32 > i32 - 0.5
i32 > i32 ? "bar" : div
i32 > i32 ? array : 0.5
i32 > i32 ? foo : 1
i32 > i64
i32 > i64 ** f32
i32 > i64 + f64
i32 > i64 - i
i32 > i64 ? list : list
i32 > int(i)
i32 > int(i64)
i32 > max(i)
i32 > min(0.5)
i32 > score(1)
i32 >= -0.5
i32 >= -1
i32 >= -i
i32 >= 0.5 ** 0.5
i32 >= 0.5 ^ f32
i32 >= 0.5 || ok
i32 >= 1 && ok
i32 >= abs(i)
i32 >= abs(i64)
i32 >= array[i]
i32 >= f32
i32 >= f32 != true
i32 >= f32 - 0.5
i32 >= f32 ^ 0.5
i32 >= f64
i32 >= f64 && nil == 0.5
i32 >= f64 - f64
i32 >= f64 / 1
i32 >= f64 ? f32 : list
i32 >= f64 ^ 1
i32 >= float(1)
i32 >= half(0.5)
i32 >= half(f64)
i32 >= i
i32 >= i % i64
i32 >= i ** i32
i32 >= i / i
i32 >= i ? div : list
i32 >= i ? foo : 0.5
i32 >= i32
i32 >= i64
i32 >= i64 != ok
i32 >= i64 ** i64
i32 >= i64 / i64
i32 >= i64 ? list : greet
i32 >= i64 ^ i32
i32 >= int(i64)
i32 >= last(array)
i32 >= len(array)
i32 >= min(i32)
i32 >= score(1)
i32 >= score(i)
i32 ^ (f32 + i64)
i32 ^ (f64 + 0.5)
i32 ^ (i - f64)
i32 ^ (i32 + f32)
i32 ^ (i64 % i)
i32 ^ (i64 * 0.5)
i32 ^ (i64 + f32)
i32 ^ (i64 - f64)
i32 ^ --0.5
i32 ^ -0.5
i32 ^ -f64
i32 ^ -i32
i32 ^ 0.5 ** i
i32 ^ 0.5 + i32
i32 ^ 0.5 - i
i32 ^ 0.5 < i
i32 ^ 0.5 == i64
i32 ^ abs(1)
i32 ^ f32
i32 ^ f32 * i64
i32 ^ f32 ** 0.5
i32 ^ f32 ** i
i32 ^ f32 < 0.5 * i
i32 ^ f32 ^ i
i32 ^ f64
i32 ^ f64 ^ 1
i32 ^ float(f32)
i32 ^ half(0.5)
i32 ^ half(f64)
i32 ^ i
i32 ^ i + i32
i32 ^ i - f32
i32 ^ i <= f32
i32 ^ i ^ 1
i32 ^ i32
i32 ^ i32 ** f32
i32 ^ i32 ** f64
i32 ^ i32 + i32
i32 ^ i32 + i64
i32 ^ i32 <= i64
i32 ^ i64
i32 ^ i64 - f32
i32 ^ max(0.5)
i32 ^ max(1)
i32 ^ max(i)
i32 ^ min(f32)
i32 ^ score(1)
i32 in array
i32 in map(array, #)
i32 not in array
i32 not in array ? score : score
i32 not in map(array, #)
i32 not in map(array, 1)
i64
i64 != -0.5
i64 != -1
i64 != -f32
i64 != -f64
i64 != -i
i64 != 0.5 != nil
i64 != 0.5 != ok
i64 != 0.5 != true
i64 != 0.5 * 1
i64 != 0.5 ? false : i64
i64 != 0.5 ^ 1
i64 != 0.5 and f64 == 1
i64 != 1 || f64 < i
i64 != 1 || ok
i64 != abs(f64)
i64 != f32
i64 != f32 + f32
i64 != f32 / f32
i64 != f32 ? div : 1
i64 != f32 ? f64 : i64
i64 != f32 ^ i
i64 != f64
i64 != f64 != false
i64 != f64 - i32
i64 != f64 / i32
i64 != f64 / i64
i64 != f64 ? 0.5 : score
i64 != f64 ? i64 : true
i64 != findLast(array, false)
i64 != first(array)
i64 != float(i32)
i64 != get(array, i64)
i64 != half(0.5)
i64 != half(f64)
i64 != i
i64 != i == nil
i64 != i ? array : f32
i64 != i and ok
i64 != i32
i64 != i32 ? 1 : f32
i64 != i64
i64 != i64 ? true : score
i64 != last(array)
i64 != len("foo")
i64 != min(0.5)
i64 != min(f32)
i64 != min(f64)
i64 != min(i64)
i64 != nil && ok
i64 != score(1)
i64 % -1
i64 % -i
i64 % -i32
i64 % 1 * i32
i64 % 1 .. i
i64 % 1 / 0.5
i64 % 1 / f64
i64 % 1 < i32
i64 % 1 <= -i32
i64 % 1 == 0.5 + 0.5
i64 % 1 not in array
i64 % abs(i64)
i64 % array[1]
i64 % find(array, true)
i64 % first(array)
i64 % i
i64 % i .. i32
i64 % i not in array
i64 % i32
i64 % i32 != f64
i64 % i32 * f32
i64 % i32 == i
i64 % i32 > f64 ^ i32
i64 % i64
i64 % i64 * 1
i64 % i64 * f32
i64 % i64 + -i64
i64 % max(i32)
i64 % min(i)
i64 % score(1)
i64 * (0.5 + i64)
i64 * (0.5 - 1)
i64 * (1 + 1)
i64 * (f64 + f32)
i64 * (f64 - i)
i64 * (i - 1)
i64 * (i64 + 0.5)
i64 * --f64
i64 * -0.5
i64 * -1
i64 * -f32
i64 * -f64
i64 * 0.5 != f64
i64 * 0.5 * i32
i64 * 0.5 - f32
i64 * 0.5 < f32
i64 * 0.5 == min(i64)
i64 * 0.5 >= f32
i64 * 0.5 ^ i
i64 * 1 * 1
i64 * 1 .. i32
i64 * 1 <= i64
i64 * 1 == i32
i64 * 1 >= i32
i64 * array[i32]
i64 * f32
i64 * f32 - f32
i64 * f32 / f64
i64 * f32 >= i64
i64 * f32 ^ i
i64 * f32 ^ i32
i64 * f64
i64 * f64 * i32
i64 * f64 ^ f64
i64 * float(i64)
i64 * get(array, i64)
i64 * half(f64)
i64 * i
i64 * i * i64
i64 * i == i32
i64 * i ^ i64
i64 * i32
i64 * i32 ** f32
i64 * i32 >= f64
i64 * i32 >= i64
i64 * i32 ^ 1
i64 * i64
i64 * i64 ** 1
i64 * i64 ** f32
i64 * i64 - f64
i64 * i64 in array
i64 * int(1)
i64 * min(f32, 0.5)
i64 * score(1)
i64 ** (0.5 * i64)
i64 ** (0.5 + 1)
i64 ** (1 % i)
i64 ** (f64 / i)
i64 ** (i * 0.5)
i64 ** (i - i)
i64 ** (i32 + i)
i64 ** -1
i64 ** -i
i64 ** -i32
i64 ** 0.5 * f64
i64 ** 0.5 + f32
i64 ** 0.5 + f32 - 1
i64 ** 0.5 - i
i64 ** 0.5 ^ 1
i64 ** 0.5 ^ f32
i64 ** 1 != i
i64 ** 1 ** f32
i64 ** 1 ** float(1)
i64 ** 1 / f64
i64 ** 1 / i
i64 ** 1 == i64
i64 ** 1 ^ i64
i64 ** abs(f32)
i64 ** abs(i64)
i64 ** f32
i64 ** f32 != f64
i64 ** f32 != i64
i64 ** f32 ** i32
i64 ** f32 / i64 / 1
i64 ** f32 <= i64
i64 ** f32 > f32
i64 ** f64
i64 ** f64 / i
i64 ** f64 <= f32
i64 ** f64 > f64
i64 ** f64 >= f64
i64 ** f64 >= i32
i64 ** float(1)
i64 ** half(0.5)
i64 ** i
i64 ** i32
i64 ** i32 != f32
i64 ** i32 <= f64
i64 ** i32 <= min(0.5)
i64 ** i64
i64 ** i64 / f64
i64 ** i64 >= f64
i64 ** int(0.5)
i64 ** int(f64)
i64 ** len("foo")
i64 ** min(0.5)
i64 ** score(1)
i64 + -(f32 / i)
i64 + -0.5
i64 + -f32
i64 + -f64
i64 + -i
i64 + -i64
i64 + 0.5 * i
i64 + 0.5 ** 1
i64 + 0.5 + 1
i64 + 0.5 + i32
i64 + 1 % i
i64 + 1 ** i
i64 + 1 + i32
i64 + 1 - f64
i64 + 1 - i32
i64 + 1 .. i
i64 + 1 < i32
i64 + 1 < i64
i64 + 1 <= i
i64 + 1 == i
i64 + abs(1)
i64 + f32
i64 + f32 ** 1
i64 + f32 >= f64
i64 + f64
i64 + f64 != f32
i64 + f64 + i
i64 + f64 <= f32
i64 + f64 == i32
i64 + findIndex(list, ok)
i64 + first(array)
i64 + get(array, i32)
i64 + half(0.5)
i64 + half(f64)
i64 + i
i64 + i + i
i64 + i - f64
i64 + i / 1
i64 + i32
i64 + i32 * 1
i64 + i32 * i
i64 + i32 < f64
i64 + i32 >= f32
i64 + i32 in array
i64 + i64
i64 + i64 % i64
i64 + i64 ** f32
i64 + i64 + 0.5
i64 + i64 - int(f64)
i64 + i64 ^ i
i64 + max(f32)
i64 + min(0.5)
i64 + min(1)
i64 + min(f32)
i64 + min(i32)
i64 + score(i)
i64 - -1
i64 - -f32
i64 - -i32
i64 - -i64
i64 - 0.5 != i32
i64 - 0.5 * 1
i64 - 0.5 + f32
i64 - 0.5 + f64
i64 - 0.5 / f64
i64 - 0.5 == -0.5
i64 - 0.5 ^ i32
i64 - 1 - 0.5
i64 - 1 - f32
i64 - 1 - i32
i64 - 1 == i32
i64 - 1 >= f64
i64 - 1 >= i
i64 - abs(1)
i64 - abs(i32)
i64 - array[i64]
i64 - f32
i64 - f32 != score(i)
i64 - f32 * i32
i64 - f32 - 1
i64 - f32 <= f64
i64 - f32 ^ f32
i64 - f64
i64 - f64 ** 0.5
i64 - float(0.5)
i64 - float(f32)
i64 - float(i)
i64 - i
i64 - i != i32
i64 - i * i64
i64 - i + i32
i64 - i - i64
i64 - i > f64 - 0.5
i64 - i >= i
i64 - i ^ i64
i64 - i32
i64 - i32 % i32
i64 - i32 + i32
i64 - i32 <= i
i64 - i64
i64 - i64 + i32
i64 - i64 .. i64
i64 - i64 / i32
i64 - max(f64)
i64 - min(1, 0.5)
i64 - score(1)
i64 .. -1
i64 .. -i64
i64 .. 1 == list
i64 .. findIndex(list, ok)
i64 .. get(array, 1)
i64 .. i
i64 .. i32
i64 .. i32 * i
i64 .. i64
i64 .. i64 + 1
i64 .. int(f32)
i64 .. int(i32)
i64 .. last(array)
i64 .. len(list)
i64 .. score(1)
i64 / (0.5 + f64)
i64 / (1 - 0.5)
i64 / (i32 - 1)
i64 / -0.5
i64 / -1
i64 / -f32
i64 / -f64
i64 / -i
i64 / -i64
i64 / 0.5 < f64
i64 / 0.5 == f32
i64 / 0.5 ^ f64
i64 / 1 ** 1
i64 / 1 - f32
i64 / 1 - min(0.5)
i64 / 1 / 0.5
i64 / abs(i64)
i64 / array[i]
i64 / f32
i64 / f32 ** i
i64 / f32 <= i
i64 / f64
i64 / f64 * 1
i64 / f64 ** 0.5
i64 / f64 ** f64
i64 / f64 + i32
i64 / f64 <= f32
i64 / f64 <= i64
i64 / float(f32)
i64 / float(f64)
i64 / float(i)
i64 / float(i64)
i64 / half(0.5)
i64 / half(f64)
i64 / i
i64 / i != i64
i64 / i * 0.5
i64 / i * f32
i64 / i - i32
i64 / i ^ i64
i64 / i32
i64 / i32 * i
i64 / i64
i64 / i64 ** f32
i64 / i64 - f64
i64 / i64 / i64
i64 / i64 < f32
i64 / int(0.5)
i64 / min(f32)
i64 / score(1)
i64 < -1
i64 < -i32
i64 < -i64
i64 < 1 != true
i64 < 1 * f64
i64 < 1 + i64
i64 < 1 / i32
i64 < 1 ? half : ok
i64 < 1 ^ f64
i64 < abs(f32)
i64 < array[1]
i64 < f32
i64 < f32 * i32
i64 < f32 ? "bar" : ok
i64 < f32 ^ 0.5
i64 < f64
i64 < f64 + f64
i64 < f64 - f32
i64 < f64 - i
i64 < f64 ? i64 : score
i64 < f64 or ok
i64 < float(f64)
i64 < half(0.5)
i64 < i
i64 < i != false
i64 < i32
i64 < i32 * 1
i64 < i32 + i64
i64 < i32 - 0.5
i64 < i32 - f32
i64 < i32 ? greet : 1
i64 < i32 ? nil : array
i64 < i32 ? true : "bar"
i64 < i64
i64 < i64 + 1
i64 < i64 ? f32 : foo
i64 < i64 ? half : i
i64 < int(i64)
i64 < max(0.5)
i64 < min(0.5)
i64 < min(i)
i64 < score(1)
i64 < score(1) * i64
i64 <= -1
i64 <= -f32
i64 <= -i
i64 <= -i32
i64 <= -i64
i64 <= 0.5 != true
i64 <= 0.5 + i
i64 <= 0.5 - 1
i64 <= 0.5 == nil
i64 <= 0.5 ? 0.5 : "foo"
i64 <= 1 != true
i64 <= 1 ** f64
i64 <= 1 == ok
i64 <= 1 ? array : ok
i64 <= 1 and ok
i64 <= array[i32]
i64 <= f32
i64 <= f32 && ok
i64 <= f32 + 1
i64 <= f32 / f32
i64 <= f32 ^ i32
i64 <= f64
i64 <= f64 + 1
i64 <= f64 - f32
i64 <= half(0.5)
i64 <= i
i64 <= i != true
i64 <= i * 1
i64 <= i + 1
i64 <= i / i64
i64 <= i ? i32 : list
i64 <= i ^ 0.5
i64 <= i32
i64 <= i32 && ok
i64 <= i32 ? f64 : i < 1
i64 <= i64
i64 <= i64 - 0.5
i64 <= i64 ? greet : div
i64 <= int(i64)
i64 <= last(array)
i64 <= min(0.5)
i64 <= min(f64)
i64 <= score(1)
i64 <= score(i)
i64 == -0.5
i64 == -1
i64 == -f64
i64 == -i
i64 == 0.5 == ok
i64 == 0.5 ? 1 : list
i64 == 0.5 ? div : i64
i64 == 0.5 ? foo : f32
i64 == 0.5 ^ 0.5
i64 == 0.5 ^ i
i64 == 1 % i64
i64 == 1 && ok
i64 == 1 ** f64
i64 == 1 + f32
i64 == 1 - f64
i64 == abs(0.5)
i64 == abs(i32)
i64 == count(array, true)
i64 == count(list, true)
i64 == f32
i64 == f64
i64 == f64 != ok
i64 == f64 != true
i64 == f64 - i
i64 == f64 ? f64 : add
i64 == findIndex(array, false)
i64 == i
i64 == i * f32
i64 == i == false
i64 == i == ok
i64 == i ^ 1
i64 == i32
i64 == i32 ** 0.5
i64 == i32 / f64
i64 == i64
i64 == i64 ^ 0.5
i64 == int(1)
i64 == int(f32)
i64 == last(array)
i64 == max(0.5)
i64 == nil ? true : ok
i64 == score(1)
i64 == score(i)
i64 > -0.5
i64 > -1
i64 > -f32
i64 > -f64
i64 > -i
i64 > -i32
i64 > -i64
i64 > 0.5 * 1
i64 > 0.5 ** 0.5
i64 > 0.5 == true
i64 > 0.5 ? f64 : greet
i64 > 0.5 ? foo : add
i64 > 1 ** 0.5
i64 > 1 - 0.5
i64 > 1 ? false : array
i64 > 1 ? half : i64
i64 > abs(1)
i64 > abs(f64)
i64 > array[i64]
i64 > f32
i64 > f32 - 1
i64 > f32 ? div : false
i64 > f64
i64 > f64 == nil
i64 > f64 and 1 > i64
i64 > first(array)
i64 > float(f32)
i64 > half(f64)
i64 > i
i64 > i % i32
i64 > i * f64
i64 > i ** 1
i64 > i + i
i64 > i + i32
i64 > i ^ i32
i64 > i32
i64 > i32 && ok
i64 > i32 ** 0.5
i64 > i32 ** i
i64 > i64
i64 > i64 % i32
i64 > i64 - i64
i64 > int(f32)
i64 > int(i32)
i64 > int(i64)
i64 > score(i)
i64 >= -0.5
i64 >= -1
i64 >= -f64
i64 >= -i
i64 >= 0.5 * f64
i64 >= 0.5 ** f32
i64 >= 0.5 + f32
i64 >= 0.5 == nil
i64 >= 0.5 == true
i64 >= 0.5 ? array : array
i64 >= 0.5 ? i32 : nil
i64 >= 0.5 ^ 0.5
i64 >= 0.5 and f32 != nil
i64 >= 1 + f64
i64 >= 1 + i32
i64 >= 1 ? i : false
i64 >= 1 ? i : string(array)
i64 >= 1 ? true : i
i64 >= f32
i64 >= f32 * f32
i64 >= f32 ** f64
i64 >= f32 ** i32
i64 >= f32 / f64
i64 >= f64
i64 >= f64 + i
i64 >= f64 / i64
i64 >= f64 == ok
i64 >= f64 and ok
i64 >= find(array, ok)
i64 >= float(f32)
i64 >= float(i)
i64 >= float(i32)
i64 >= half(0.5)
i64 >= i
i64 >= i and ok
i64 >= i32
i64 >= i32 % i64
i64 >= i64
i64 >= i64 % i
i64 >= i64 && i64 > f32
i64 >= i64 / i32
i64 >= i64 == nil
i64 >= i64 in {"foo": f64}.half
i64 >= max(f64)
i64 >= max(i64)
i64 >= min(f32)
i64 >= score(1)
i64 ^ (0.5 + 1)
i64 ^ (0.5 / i32)
i64 ^ (1 * f32)
i64 ^ (1 / i)
i64 ^ (1 / i64)
i64 ^ (f32 + f32)
i64 ^ (f32 - f32)
i64 ^ (f64 * f32)
i64 ^ (i % i32)
i64 ^ (i - 0.5)
i64 ^ (i32 - f32)
i64 ^ (i64 + i32)
i64 ^ (i64 / f64)
i64 ^ -0.5
i64 ^ -i32
i64 ^ 0.5 ** f32
i64 ^ 0.5 <= i
i64 ^ 0.5 >= f32
i64 ^ 0.5 >= f64
i64 ^ 0.5 >= i64
i64 ^ 0.5 ^ 0.5
i64 ^ 1 != i
i64 ^ 1 != i32
i64 ^ 1 ** i32
i64 ^ 1 + f32
i64 ^ 1 < f32
i64 ^ 1 <= i
i64 ^ abs(1)
i64 ^ abs(i)
i64 ^ array[i64]
i64 ^ f32
i64 ^ f32 - f32
i64 ^ f64
i64 ^ f64 * i32
i64 ^ f64 ** i
i64 ^ f64 + f32
i64 ^ f64 < f32
i64 ^ f64 == i64
i64 ^ f64 > 1 + i64
i64 ^ f64 ^ f32
i64 ^ get(array, i)
i64 ^ half(f64)
i64 ^ i
i64 ^ i ** f32
i64 ^ i ** i64
i64 ^ i32
i64 ^ i32 != f32
i64 ^ i32 != i32
i64 ^ i32 ** i
i64 ^ i32 + f32
i64 ^ i32 + f64
i64 ^ i32 / f32
i64 ^ i64
i64 ^ i64 * f64
i64 ^ i64 * i64
i64 ^ i64 ** f64
i64 ^ i64 ^ f32
i64 ^ i64 ^ f64
i64 ^ i64 ^ i
i64 ^ int(i64)
i64 ^ last(array)
i64 ^ len(array)
i64 ^ max(0.5)
i64 ^ max(1)
i64 ^ max(f32)
i64 ^ score(1)
i64 ^ score(1, 1)
i64 ^ score(i)
i64 in array
i64 in array == nil
i64 in array ? false : greet
i64 in map(array, #)
i64 not in array
indexOf("bar", "bar") + i64
indexOf(foo.Bar, string(i32))
int(-(i * 0.5))
int(-0.5)
int(-1)
int(-abs(f64))
int(-f32)
int(-f64)
int(-i)
int(-i32)
int(-i32) != i
int(-i64)
int(0.5 * 0.5)
int(0.5 * 1)
int(0.5 * f32)
int(0.5 * i)
int(0.5 * i32)
int(0.5 * i64)
int(0.5 ** 0.5)
int(0.5 ** 1)
int(0.5 ** f32)
int(0.5 ** f64)
int(0.5 ** i64)
int(0.5 + f32)
int(0.5 + f64)
int(0.5 + i)
int(0.5 + i32)
int(0.5 - 0.5)
int(0.5 - f32)
int(0.5 - i32)
int(0.5 / 0.5)
int(0.5 / 1)
int(0.5 / f32)
int(0.5 / f64)
int(0.5 / i32)
int(0.5 / i64)
int(0.5 ^ 0.5)
int(0.5 ^ 1)
int(0.5 ^ f32)
int(0.5 ^ i)
int(0.5) ** i64
int(0.5) ** int(i64)
int(0.5) + f32
int(0.5) + f64
int(0.5) + i64
int(0.5) - i
int(0.5) - i64
int(0.5) .. i32
int(0.5) < int(f64)
int(0.5) == f32
int(0.5) == i
int(0.5) > -1
int(0.5) >= i - i64
int(0.5) ^ i32
int(0.5) ^ i64
int(0.5) in array
int(0.5) not in array
int(1 % 1)
int(1 % i)
int(1 % i32)
int(1 * 0.5)
int(1 * f32)
int(1 * f64)
int(1 * i)
int(1 * i64)
int(1 ** 0.5)
int(1 ** 1)
int(1 ** f32)
int(1 ** i32)
int(1 ** i64)
int(1 + 0.5)
int(1 + 1)
int(1 + f64)
int(1 + i)
int(1 - 0.5)
int(1 - 1)
int(1 - i64)
int(1 / 1)
int(1 / f64)
int(1 / i32)
int(1 / i64)
int(1 ^ 0.5)
int(1 ^ 1)
int(1 ^ i32)
int(1 ^ i64)
int(1) * f64
int(1) * i
int(1) ** f32
int(1) ** i64
int(1) + 0.5 + 1
int(1) + i64
int(1) - f64
int(1) - i64
int(1) .. i
int(1) / f32
int(1) / i
int(1) < f64
int(1) <= f32
int(1) <= f64
int(1) == i
int(1) == i64
int(1) > f64
int(1) > float(1)
int(1) > i32
int(1) >= f32
int(1) >= f64
int(1) >= half(0.5)
int(1) ^ f32
int(1) ^ f64
int(1) ^ i
int(1) ^ i32
int(1) in array
int(abs(0.5))
int(abs(f32))
int(abs(f64))
int(abs(i))
int(abs(i32))
int(abs(i64))
int(array[1])
int(array[i32])
int(array[i64])
int(count(list, ok))
int(div(1, i))
int(f32 * f32)
int(f32 * i64)
int(f32 ** 0.5)
int(f32 ** f64)
int(f32 ** i32)
int(f32 + f32)
int(f32 + i64)
int(f32 - 0.5)
int(f32 - f32)
int(f32 - i)
int(f32 / f64)
int(f32 ^ 1)
int(f32 ^ f32)
int(f32 ^ i)
int(f32 ^ i64)
int(f32)
int(f32) != f32
int(f32) % i
int(f32) * f64
int(f32) .. i32
int(f32) / f32
int(f32) / i
int(f32) == 0.5 != nil
int(f32) == i
int(f32) > i
int(f32) >= i32
int(f32) ^ i64
int(f32) in array
int(f64 * 0.5)
int(f64 * 1)
int(f64 * f32)
int(f64 * f64)
int(f64 * i32)
int(f64 * i64)
int(f64 ** 0.5)
int(f64 ** 1)
int(f64 ** f32)
int(f64 ** i)
int(f64 ** i32)
int(f64 ** i64)
int(f64 + f32)
int(f64 + i64)
int(f64 - 0.5)
int(f64 - 1)
int(f64 - f64)
int(f64 / 1)
int(f64 / i)
int(f64 ^ 0.5)
int(f64 ^ 1)
int(f64 ^ f32)
int(f64)
int(f64) != i32
int(f64) * i32
int(f64) ** i64
int(f64) - i
int(f64) < i32
int(f64) <= i32
int(f64) == float(i32)
int(f64) ^ i32
int(f64) ^ i64
int(f64) not in array
int(false ? add : 0.5)
int(false ? f32 : 0.5)
int(false ? f64 : i32)
int(find(array, true))
int(findIndex(array, ok))
int(findIndex(array, true))
int(findIndex(list, # == foo))
int(findIndex(list, ok))
int(findLastIndex(array, ok))
int(findLastIndex(array, true))
int(findLastIndex(list, true))
int(first(array))
int(float(0.5))
int(float(1))
int(float(f32))
int(float(f64) ** i64)
int(float(f64))
int(float(i))
int(float(i32))
int(float(i64))
int(get(array, 1))
int(get(array, i64))
int(half(0.5))
int(half(1 / f32))
int(half(f64))
int(i % 1)
int(i % i64)
int(i * 0.5)
int(i * 1)
int(i * f32)
int(i * f64)
int(i ** 0.5)
int(i ** f32)
int(i ** f64)
int(i ** i64)
int(i + 0.5)
int(i + f32)
int(i + i32)
int(i + i64)
int(i - f64)
int(i - i64)
int(i / 1) <= i32
int(i / f64)
int(i / i)
int(i ^ f32)
int(i ^ f64)
int(i ^ i)
int(i ^ i32)
int(i)
int(i) != i
int(i) + f32
int(i) + i32
int(i) - i32
int(i) .. i64
int(i) / i
int(i) < f32
int(i) < f64
int(i) <= f64
int(i) == f32
int(i) > i32
int(i) > i64
int(i) > int(i)
int(i) >= i
int(i) ^ i64
int(i32 % i64)
int(i32 * 0.5)
int(i32 * 1)
int(i32 * f64)
int(i32 ** i)
int(i32 + 0.5)
int(i32 + 1)
int(i32 + f32)
int(i32 - 0.5)
int(i32 - 1)
int(i32 - f64)
int(i32 - i)
int(i32 - i64)
int(i32 / 0.5)
int(i32 / f64)
int(i32 ^ 0.5)
int(i32 ^ f32)
int(i32 ^ f64)
int(i32 ^ i)
int(i32 ^ i64)
int(i32)
int(i32) != f32
int(i32) % i64
int(i32) ** -0.5
int(i32) + i
int(i32) - f32
int(i32) .. i32
int(i32) / i
int(i32) / i32
int(i32) < i64
int(i32) <= f32
int(i32) == -i32
int(i32) == f64
int(i32) > f64
int(i64 % i32)
int(i64 * f32)
int(i64 * f64)
int(i64 * i)
int(i64 ** i)
int(i64 + 1)
int(i64 + i)
int(i64 + i64)
int(i64 - f32)
int(i64 - f64)
int(i64 - i32)
int(i64 / f32)
int(i64 / f64)
int(i64 / i)
int(i64 / i64)
int(i64 ^ 0.5)
int(i64 ^ f64)
int(i64 ^ i32)
int(i64 ^ i64)
int(i64)
int(i64) != f64
int(i64) != i
int(i64) != nil ? 1 : half
int(i64) % i
int(i64) % i32
int(i64) ** f64
int(i64) - i32
int(i64) .. i32
int(i64) <= i
int(i64) <= i64
int(i64) == min(i)
int(i64) > f64
int(i64) > i32
int(i64) >= f64
int(i64) ^ f32
int(i64) ^ i32
int(i64) in array
int(i64) not in array
int(int(0.5))
int(int(1))
int(int(f32))
int(int(f64))
int(int(i32))
int(int(i64))
int(last(array))
int(len("bar"))
int(len(array))
int(len(list))
int(max(0.5))
int(max(1))
int(max(f64))
int(max(i))
int(max(i64))
int(min(0.5))
int(min(1))
int(min(f32))
int(min(f32, i32))
int(min(f64))
int(min(f64, 1))
int(min(i))
int(min(i32))
int(min(i64))
int(min(i64, 1))
int(ok ? 0.5 : i64)
int(ok ? 1 : div)
int(ok ? i32 : add)
int(score(1))
int(score(i))
int(string(1))
int(string(i))
int(string(i32))
int(string(i64))
int(toJSON(1))
int(toJSON(i))
int(toJSON(i32))
int(toJSON(i64))
int(true ? f64 : 0.5)
int(true ? f64 : 1)
join(["bar"])
join(map(array, "bar"))
join(map(array, "foo"))
join(map(list, "bar"))
keys({"bar": i64})
keys({"foo": 0.5})
keys({"foo": f32})
keys({"foo": i})
last(1 .. i32)
last([0.5])
last([array])
last([f64])
last([half, i32])
last(array)
last(array) != f32
last(array) != i32
last(array) % i32
last(array) * i32
last(array) + f32
last(array) + i
last(array) - f32
last(array) - i64
last(array) - score(i)
last(array) .. max(i)
last(array) / f64
last(array) > f64
last(array) > max(1)
last(array) >= f32
last(array) >= f64
last(false ? 0.5 : greet)
last(false ? div : 1)
last(false ? f32 : 1)
last(false ? list : 1)?.add
last(false ? list : add)
last(filter(array, false))
last(filter(array, ok))
last(filter(list, true))
last(i .. i32)
last(i32 .. i32)
last(i32 .. i64)
last(i64 .. i)
last(list)
last(list) == foo
last(list) not in list
last(list).Bar
last(list).Qux
last(list).String
last(list).String()
last(list)?.Bar
last(list)?.Qux
last(list)?.String
last(list)?.String()
last(map(array, "bar"))
last(map(array, #))
last(map(array, array))
last(map(array, i64))
last(map(list, "bar"))
last(map(list, "foo"))
last(map(list, #))
last(map(list, 0.5))
last(map(list, add))
last(map(list, f32))
last(map(list, foo))
last(map(list, i))
last(map(list, i32))
last(map(list, true))
last(ok ? 0.5 : score)
last(ok ? array : false)
last(ok ? foo : add != half)
last(ok ? nil : list)
last(ok ? ok : i32)
last(true ? 1 : list)?.String
last(true ? foo : half)
last(true ? half : 1)
last(true ? i32 : ok)
last(true ? i64 : 1)
last(true ? ok : f64)
lastIndexOf("bar", "foo") < f32 ^ f64
len("bar" + "foo")
len("bar") != f32
len("bar") % score(i)
len("bar") * i32
len("bar") ** f64
len("bar") ** i32
len("bar") <= i64
len("bar") > i32
len("bar") >= 0.5 ^ 0.5
len("bar") >= f32
len("bar") >= f64
len("foo" + foo.Bar)
len("foo") * i32
len("foo") * i64
len("foo") - i
len("foo") .. i
len("foo") < f32
len("foo") <= f32
len("foo") <= f64
len("foo") == i
len("foo") == i32
len("foo") == i64
len("foo") > f64
len("foo") not in array
len([f64])
len([false, add, half])
len([false, foo, false])
len([false])
len(array)
len(array) != i
len(array) != i32
len(array) * i
len(array) ** i
len(array) .. 1 - 1
len(array) / f32
len(array) < f32
len(array) <= i
len(array) >= f32
len(array) >= f64
len(array) >= i64
len(false ? 1 : list)
len(false ? nil : "foo")
len(foo.Bar)
len(foo.String())
len(foo?.Bar)
len(foo?.String())
len(greet("bar"))
len(greet("foo"))
len(i .. 1)
len(i32 .. 1)
len(i32 .. i)
len(i32 .. i32)
len(i32 .. i64)
len(i64 .. 1)
len(i64 .. i)
len(list)
len(list) != i64
len(list) * f32
len(list) ** i
len(list) / f64
len(list) <= f64
len(list) == f32
len(list) == i
len(list) > i
len(list) > i64 - i
len(list) >= i
len(list) not in map(array, #)
len(lower("foo"))
len(lower(toBase64("foo")))
len(lower(type(list)))
len(map(array, "bar"))
len(map(array, #))
len(map(array, 0.5))
len(map(array, array))
len(map(array, f64))
len(map(array, foo))
len(map(array, half))
len(map(array, i))
len(map(array, i64))
len(map(array, list))
len(map(array, ok))
len(map(array, score))
len(map(list, "bar"))
len(map(list, "foo"))
len(map(list, #))
len(map(list, 0.5))
len(map(list, 1))
len(map(list, f64))
len(map(list, false))
len(map(list, greet))
len(map(list, half))
len(map(list, i))
len(map(list, score))
len(map(list, true))
len(sort(array))
len(string("bar"))
len(string("foo"))
len(string(0.5))
len(string(1))
len(string(add))
len(string(array))
len(string(div))
len(string(f32))
len(string(f64))
len(string(foo))
len(string(greet))
len(string(half))
len(string(i32))
len(string(i64))
len(string(list))
len(string(nil))
len(string(ok))
len(string(score))
len(string(true))
len(toJSON("bar"))
len(toJSON("foo"))
len(toJSON(0.5))
len(toJSON(1 <= i32))
len(toJSON(1))
len(toJSON(array))
len(toJSON(f32))
len(toJSON(f64))
len(toJSON(false))
len(toJSON(foo))
len(toJSON(foo.Bar))
len(toJSON(i))
len(toJSON(i32))
len(toJSON(i64))
len(toJSON(list))
len(toJSON(nil))
len(toJSON(ok))
len(toJSON(true))
len(trim("bar"))
len(trim("foo"))
len(trimPrefix("bar"))
len(trimPrefix("foo"))
len(trimSuffix("bar"))
len(trimSuffix("foo"))
len(type(0.5))
len(type(1))
len(type(array))
len(type(div))
len(type(f32))
len(type(f64))
len(type(false))
len(type(foo))
len(type(greet))
len(type(half))
len(type(half)) > f32
len(type(i))
len(type(i32))
len(type(i64))
len(type(list))
len(type(nil))
len(type(ok))
len(type(score))
len(upper("bar"))
len(upper("foo"))
len({"bar": 1})
len({"bar": add})
len({"bar": f64, "bar": i})
len({"bar": greet, "bar": greet})
len({"foo": "foo"})
list
list != array
list != array == ok
list != array ? 0.5 : "bar"
list != filter(list, true)
list != list
list != map(array, #)
list != map(array, 1)
list != map(array, div)
list != map(list, #)
list != map(list, div)
list != map(list, list)
list == [add]
list == array
list == array ? div : i
list == list
list == list == nil
list == list ? f64 : array
list == list or add != nil
list == map(list, f32)
list == map(list, i64)
list == nil == nil
list == nil == ok
list == nil or i == 0.5
list == sort(array)
list == {"bar": half, "foo": "foo"}?.i32
list[-1]
list[-i32]
list[-i64]
list[-i64].String
list[-i]
list[-i].String
list[1 % i32]
list[1 * i64]
list[1:i] == list
list[1].Bar
list[1].Qux
list[1].String
list[1].String()
list[1]?.Bar
list[1]?.Qux
list[1]?.String
list[1]?.String()
list[false ? add : 1]
list[false ? nil : i]
list[false ? true : f64]
list[findIndex(list, ok)]
list[i * i32]
list[i32:i32]
list[i32:i64]
list[i32:i]
list[i32]
list[i32].Bar
list[i32].Qux
list[i32].String
list[i32].String()
list[i32]?.Bar
list[i32]?.Qux
list[i32]?.String
list[i64 % 1]
list[i64:i32]
list[i64:i64]
list[i64:i]
list[i64]
list[i64].Bar
list[i64].Qux
list[i64].String
list[i64].String()
list[i64]?.Bar
list[i64]?.Qux
list[i64]?.String
list[i:false ? false : i64]
list[i:i]
list[i]
list[i].Bar
list[i].Qux
list[i].String
list[i].String()
list[i]?.Bar
list[i]?.Qux
list[i]?.String()
list[int(0.5)]
list[int(f64)]
list[int(i)]
list[max(i)]
list[min(i)]
list[ok ? f32 : add]
list[score(1)]
list[score(i)]
list[true ? f64 : true]
lower("bar" + "bar")
lower(foo.Bar)
lower(foo.String())
lower(foo?.Bar)
lower(foo?.String())
lower(greet("bar"))
lower(greet("foo"))
lower(lower("bar"))
lower(lower(trimSuffix("bar")))
lower(string("bar"))
lower(string("foo"))
lower(string(0.5))
lower(string(add))
lower(string(array))
lower(string(div))
lower(string(f32))
lower(string(f64))
lower(string(false))
lower(string(foo))
lower(string(greet))
lower(string(half))
lower(string(i))
lower(string(i32))
lower(string(i64))
lower(string(list))
lower(string(nil))
lower(string(ok))
lower(string(score))
lower(string(true))
lower(toBase64("bar" + "bar"))
lower(toBase64("bar"))
lower(toBase64("foo"))
lower(toJSON("bar"))
lower(toJSON("foo"))
lower(toJSON(0.5))
lower(toJSON(1))
lower(toJSON(array))
lower(toJSON(f32))
lower(toJSON(f64))
lower(toJSON(false))
lower(toJSON(foo))
lower(toJSON(i))
lower(toJSON(i32))
lower(toJSON(i64))
lower(toJSON(list))
lower(toJSON(nil))
lower(toJSON(ok))
lower(toJSON(true))
lower(trim("foo"))
lower(trimPrefix("bar"))
lower(trimSuffix("bar"))
lower(trimSuffix("foo"))
lower(trimSuffix(foo?.String()))
lower(type("bar"))
lower(type("foo"))
lower(type(0.5 * i64))
lower(type(0.5))
lower(type(1))
lower(type(array))
lower(type(div))
lower(type(f32))
lower(type(f64))
lower(type(false))
lower(type(foo))
lower(type(greet))
lower(type(half))
lower(type(i))
lower(type(i64))
lower(type(nil))
lower(type(ok))
lower(type(score))
lower(type(true))
lower(upper("bar"))
lower(upper("foo"))
map(1 .. 1, # .. #)
map(1 .. 1, # == f64)
map(1 .. i, #)
map(1 .. i, foo)
map(1 .. i, greet)
map(1 .. i32, #)
map(1 .. i32, ok)
map(1 .. i64, f64 ^ 1)
map(1 .. i64, foo)
map(1 .. i64, list)
map(["bar"], # == #)
map(["foo"], #)
map([1, i], #)
map([add], foo)
map([f32], f64)
map([false], score)
map([greet, i32], #)
map([greet], #)
map([half], #)
map([i32], foo)
map([i64], #)
map([i], max(#))
map([list, nil], i64)
map([list], #)
map([score, "bar"], #)
map([score], #)
map([score], array)
map(array, !false)
map(array, !true)
map(array, "bar" != "foo")
map(array, "bar" contains "foo")
map(array, "bar")[i64]
map(array, # != # ? # : array)
map(array, # != #)
map(array, # != 1)
map(array, # != f64)
map(array, # != i32)
map(array, # != nil)
map(array, # % #)
map(array, # % 1)
map(array, # % i)
map(array, # % i32)
map(array, # % i64)
map(array, # * #)
map(array, # * 0.5)
map(array, # * f64)
map(array, # * i32)
map(array, # * i64)
map(array, # ** #)
map(array, # ** 0.5)
map(array, # ** i)
map(array, # ** i32)
map(array, # ** i64)
map(array, # + #)
map(array, # + 0.5)
map(array, # + 1)
map(array, # + f64)
map(array, # + i)
map(array, # + i32)
map(array, # + i64)
map(array, # - #)
map(array, # - 0.5)
map(array, # - 1)
map(array, # - f32)
map(array, # - i)
map(array, # - i32)
map(array, # .. #)
map(array, # .. 1)
map(array, # .. i)
map(array, # .. i32)
map(array, # .. i64)
map(array, # / #)
map(array, # / 0.5)
map(array, # / f64)
map(array, # / i)
map(array, # / i32)
map(array, # / i64)
map(array, # < #)
map(array, # < 0.5)
map(array, # < 1)
map(array, # < f32)
map(array, # < f64)
map(array, # <= #)
map(array, # <= 1)
map(array, # <= i64)
map(array, # == #)
map(array, # == 1)
map(array, # == i64)
map(array, # > #)
map(array, # > 1)
map(array, # > f32)
map(array, # > i32)
map(array, # > i64)
map(array, # >= #)
map(array, # >= 0.5)
map(array, # >= 1)
map(array, # >= f64)
map(array, # >= i)
map(array, # >= i32)
map(array, # ^ #)
map(array, # ^ 0.5)
map(array, # ^ i)
map(array, # ^ i32)
map(array, # ^ i64)
map(array, # in array)
map(array, #)
map(array, #) != array
map(array, #) != list
map(array, #) != nil == nil
map(array, #)[i64]
map(array, #)[i]
map(array, -#)
map(array, -(# ** f64))
map(array, -0.5)
map(array, -1)
map(array, -f64)
map(array, -i)
map(array, -i64)
map(array, 0.5 != #)
map(array, 0.5 != 0.5)
map(array, 0.5 != i32)
map(array, 0.5 * #)
map(array, 0.5 ** #)
map(array, 0.5 + #)
map(array, 0.5 - #)
map(array, 0.5 / #)
map(array, 0.5 < #)
map(array, 0.5 < 1)
map(array, 0.5 <= f32)
map(array, 0.5 == #)
map(array, 0.5 == i32)
map(array, 0.5 > #)
map(array, 0.5 ^ #)
map(array, 1 != #)
map(array, 1 != 1)
map(array, 1 != f32)
map(array, 1 % #)
map(array, 1 % i)
map(array, 1 * #)
map(array, 1 * f32)
map(array, 1 ** #)
map(array, 1 ** 1)
map(array, 1 ** i32)
map(array, 1 + #)
map(array, 1 .. #)
map(array, 1 / #)
map(array, 1 / 1)
map(array, 1 < 0.5)
map(array, 1 <= #)
map(array, 1 == #)
map(array, 1 == nil)
map(array, 1 >= #)
map(array, 1 >= f64)
map(array, 1 ^ #)
map(array, 1 ^ 1)
map(array, 1 in array)
map(array, 1)[i64]
map(array, 1)[i]
map(array, [array])
map(array, [i32, foo])
map(array, abs(#))
map(array, abs(0.5))
map(array, add(#, #))
map(array, add(#, i))
map(array, add(1, #))
map(array, add)
map(array, add) != list
map(array, all(array, true))
map(array, array != nil)
map(array, array)
map(array, array) == array
map(array, array[#:#])
map(array, array[1])
map(array, div(#, #))
map(array, div)
map(array, f32 ** #)
map(array, f32 ** f64)
map(array, f32 + #)
map(array, f32 - f64)
map(array, f32 / #)
map(array, f32 < #)
map(array, f32 <= #)
map(array, f32 <= 1)
map(array, f32 == #)
map(array, f32 > #)
map(array, f32)
map(array, f64 != #)
map(array, f64 != 0.5)
map(array, f64 * 1)
map(array, f64 ** #)
map(array, f64 - #)
map(array, f64 / 1)
map(array, f64 <= f64)
map(array, f64 > #)
map(array, f64)
map(array, f64) != list
map(array, f64) == i .. 1
map(array, false ? "foo" : #)
map(array, false ? 0.5 : #)
map(array, false)[i]
map(array, findLast(array, true))
map(array, float(# * f64))
map(array, float(#))
map(array, float(1))
map(array, float(i64))
map(array, foo)
map(array, foo.Bar)
map(array, foo.Qux)
map(array, foo.String())
map(array, foo.String)
map(array, foo?.Qux)
map(array, foo?.String)
map(array, get(array, #))
map(array, get(list, #))
map(array, greet != half)
map(array, greet("bar"))
map(array, greet("foo"))
map(array, greet)
map(array, greet) == list
map(array, half(0.5))
map(array, half)
map(array, i != #)
map(array, i != f64)
map(array, i % i)
map(array, i * 0.5)
map(array, i ** #)
map(array, i ** 0.5)
map(array, i .. #)
map(array, i / #)
map(array, i == #)
map(array, i > #)
map(array, i >= f64)
map(array, i ^ #)
map(array, i)
map(array, i)[i64]
map(array, i32 % #)
map(array, i32 % i)
map(array, i32 * #)
map(array, i32 + 0.5)
map(array, i32 + i64)
map(array, i32 - #)
map(array, i32 / #)
map(array, i32 < 0.5)
map(array, i32 == #)
map(array, i32 == 0.5)
map(array, i32 == nil)
map(array, i32 > #)
map(array, i32 >= f32)
map(array, i32 ^ #)
map(array, i32)
map(array, i64 != #)
map(array, i64 * #)
map(array, i64 ** #)
map(array, i64 + #)
map(array, i64 - #)
map(array, i64 .. #)
map(array, i64 / #)
map(array, i64 <= 1)
map(array, i64 == #)
map(array, i64 == f64)
map(array, i64 > #)
map(array, i64 >= i64)
map(array, i64 ^ #)
map(array, i64 ^ i32)
map(array, i64)
map(array, i64)[i32]
map(array, int(#))
map(array, int(0.5))
map(array, int(f64))
map(array, last(array))
map(array, len(array))
map(array, list)
map(array, map(array, #))
map(array, map(array, true))
map(array, map(list, #))
map(array, map(list, f64))
map(array, max(#))
map(array, max(#, #, #))
map(array, max(0.5))
map(array, max(0.5, #))
map(array, max(i64, #, i))
map(array, min(# ^ #))
map(array, min(#))
map(array, min(#, #, #, #))
map(array, min(#, 1))
map(array, min(#, 1, #))
map(array, min(#, 1, f64))
map(array, min(#, f32))
map(array, min(#, f64))
map(array, nil != #)
map(array, nil == #)
map(array, nil == half)
map(array, not (# < 1))
map(array, not false)
map(array, not true)
map(array, ok ? # : i64)
map(array, ok ? f32 : div)
map(array, ok || ok)
map(array, ok)
map(array, one(array, ok))
map(array, one(array, true))
map(array, score != nil)
map(array, score(#))
map(array, score(#, #))
map(array, score(#, #, 1))
map(array, score(1))
map(array, score)
map(array, sort(array))
map(array, string("bar"))
map(array, string(# ** f64))
map(array, string(#))
map(array, string(array))
map(array, string(foo))
map(array, string(list))
map(array, string(score))
map(array, toJSON(#))
map(array, toJSON(array))
map(array, toJSON(ok))
map(array, true ? # : #)
map(array, true ? f32 : i)
map(array, true ? nil : #)
map(array, true)[i]
map(array, type(#))
map(array, type(half))
map(array, type(i))
map(array, upper("foo"))
map(array[i64:1], array)
map(array[i64:i64], #)
map(array[i:1], i > #)
map(false ? 0.5 : "bar", greet)
map(false ? 1 : list, half)
map(false ? array : "foo", i64 / 1)
map(false ? true : array, #)
map(filter(array, false), foo)
map(filter(array, ok), # <= #)
map(filter(array, ok), #)
map(filter(array, ok), i32 + #)
map(filter(array, ok), score)
map(filter(array, true), f64)
map(filter(array, true), i)
map(filter(list, false), #)
map(filter(list, true), score)
map(i .. 1, # > #)
map(i .. 1, -i64)
map(i .. 1, f64)
map(i .. i32, #)
map(i .. i32, score)
map(i .. i64, #)
map(i .. i64, f64)
map(i .. i64, score)
map(i32 .. 1, #)
map(i32 .. 1, list)
map(i32 .. i, add)
map(i32 .. i, half)
map(i32 .. i32, #)
map(i32 .. i32, greet)
map(i32 .. i64, abs(#))
map(i32 .. i64, f64)
map(i64 .. i, #)
map(i64 .. i, i)
map(i64 .. i32, #)
map(list, !false)
map(list, !true)
map(list, "bar" in #)
map(list, "bar" not in #)
map(list, "bar") != list
map(list, "foo" + "foo")
map(list, "foo" in #)
map(list, "foo" not matches "bar")
map(list, "foo") == list
map(list, # != #)
map(list, # != foo)
map(list, # != nil)
map(list, # == #)
map(list, # == foo)
map(list, # not in list)
map(list, #)
map(list, #) == array
map(list, #) == list
map(list, #)[i32]
map(list, #)[i64]
map(list, #)[i]
map(list, #?.Bar)
map(list, #?.Qux("bar"))
map(list, #?.Qux)
map(list, #?.String())
map(list, #?.String)
map(list, -0.5)
map(list, -1)
map(list, -f64)
map(list, -i)
map(list, .Bar not in # != true)
map(list, .Bar)
map(list, .Qux)
map(list, .String())
map(list, .String)
map(list, 0.5 - i64)
map(list, 0.5 < f32)
map(list, 0.5 <= f32)
map(list, 0.5 <= i64)
map(list, 0.5 >= 1)
map(list, 0.5 ^ 1)
map(list, 1 + i)
map(list, 1 - f64)
map(list, 1 .. 1)
map(list, 1 .. i64)
map(list, 1 / 1)
map(list, 1 / f32)
map(list, 1 < i32)
map(list, 1 > i32)
map(list, 1 >= f64)
map(list, [1])
map(list, [false])
map(list, abs(0.5))
map(list, abs(1))
map(list, add)
map(list, array)
map(list, div != greet)
map(list, div == div)
map(list, div)
map(list, div) != list
map(list, f32 != f32)
map(list, f32 ** f32)
map(list, f32 / i32)
map(list, f32 < 0.5)
map(list, f32 <= 1)
map(list, f32)
map(list, f64 * 0.5)
map(list, f64 * f32)
map(list, f64 ** i32)
map(list, f64 + 1)
map(list, f64 + i32)
map(list, f64 - 0.5)
map(list, f64 < f64)
map(list, f64 ^ i64)
map(list, f64)
map(list, f64) != list
map(list, false ? # : nil)
map(list, false ? f32 : #)
map(list, false ? f32 : foo)
map(list, false and true)
map(list, filter(list, false))
map(list, first(list))
map(list, float(0.5))
map(list, float(1))
map(list, float(f32))
map(list, float(i64))
map(list, foo == #)
map(list, foo)
map(list, foo.Bar)
map(list, foo.String)
map(list, foo?.String())
map(list, foo?.String)
map(list, greet == greet)
map(list, greet("foo"))
map(list, greet)
map(list, greet) != array ? 0.5 : 1
map(list, half != score)
map(list, half(0.5))
map(list, half)
map(list, i * 1)
map(list, i * i64)
map(list, i + i)
map(list, i >= f64)
map(list, i >= i64)
map(list, i ^ f32)
map(list, i ^ i64)
map(list, i)
map(list, i32 * f32)
map(list, i32 == i64)
map(list, i32 == nil)
map(list, i32 > i)
map(list, i32 ^ 0.5)
map(list, i32)
map(list, i64 == 1)
map(list, i64 == f32)
map(list, i64 ^ (i + i32))
map(list, i64)
map(list, int(1))
map(list, len(array))
map(list, list)
map(list, map(array, score))
map(list, map(list, #))
map(list, min(i64))
map(list, nil != #)
map(list, nil != 1)
map(list, nil != array)
map(list, nil != i)
map(list, nil != nil)
map(list, nil == #)
map(list, nil == div)
map(list, nil == foo)
map(list, nil == i32)
map(list, nil not in array)
map(list, not false)
map(list, not ok)
map(list, not true)
map(list, ok ? i64 : i64)
map(list, ok)
map(list, ok) != array
map(list, score != greet)
map(list, score(i))
map(list, score)
map(list, string(#))
map(list, string(foo))
map(list, string(nil))
map(list, toBase64("foo"))
map(list, toJSON(#))
map(list, toJSON(1))
map(list, toJSON(foo))
map(list, toJSON(i))
map(list, trimPrefix("bar"))
map(list, trimSuffix("foo"))
map(list, true ? false : score)
map(list, true ? nil : #)
map(list, true)[i32]
map(list, type(#))
map(list, type(greet))
map(list, type(half))
map(list, type(i))
map(list, type(i64))
map(list[i:i], i)
map(map(array, "bar"), #)
map(map(array, # >= #), add)
map(map(array, #), # < #)
map(map(array, #), # ^ i32)
map(map(array, #), #)
map(map(array, #), add)
map(map(array, #), div)
map(map(array, #), f32)
map(map(array, #), f64)
map(map(array, #), foo)
map(map(array, #), foo.Qux)
map(map(array, #), greet)
map(map(array, #), half)
map(map(array, #), i)
map(map(array, #), i64)
map(map(array, #), int(#))
map(map(array, #), nil != half)
map(map(array, #), score(i))
map(map(array, #), score)
map(map(array, 0.5), # != #)
map(map(array, 0.5), #)
map(map(array, 0.5), -1)
map(map(array, 0.5), list)
map(map(array, 1), #)
map(map(array, 1), ok)
map(map(array, 1), score)
map(map(array, add), #)
map(map(array, add), list)
map(map(array, array), add)
map(map(array, array), f64)
map(map(array, f32), #)
map(map(array, f64), add)
map(map(array, f64), nil == nil)
map(map(array, foo), #)
map(map(array, foo), f64)
map(map(array, foo), greet)
map(map(array, half), div)
map(map(array, i64), f64)
map(map(array, list), #)
map(map(array, true), #)
map(map(array, true), div)
map(map(array, true), foo)
map(map(list, "foo"), add)
map(map(list, "foo"), div)
map(map(list, "foo"), i32)
map(map(list, #), "bar" + "foo")
map(map(list, #), # != #)
map(map(list, #), #)
map(map(list, #), array)
map(map(list, #), div)
map(map(list, #), f32)
map(map(list, #), f64)
map(map(list, #), greet)
map(map(list, #), i)
map(map(list, #), i32)
map(map(list, #), i64 < i32)
map(map(list, #), i64)
map(map(list, #), nil != i)
map(map(list, #), ok)
map(map(list, #), score)
map(map(list, 0.5), # / #)
map(map(list, 0.5), #)
map(map(list, 0.5), greet)
map(map(list, 0.5), list)
map(map(list, 0.5), score)
map(map(list, 1), # <= #)
map(map(list, 1), foo)
map(map(list, add), [#, #])
map(map(list, add), f64)
map(map(list, f32), #)
map(map(list, f32), greet)
map(map(list, f32), true ? "foo" : "foo")
map(map(list, f64), #)
map(map(list, false), array)
map(map(list, false), f64)
map(map(list, false), i32)
map(map(list, false), list)
map(map(list, foo), #)
map(map(list, foo), ok)
map(map(list, greet), "bar" != "foo")
map(map(list, greet), # == #)
map(map(list, greet), #)
map(map(list, greet), ["foo", 1])
map(map(list, greet), half)
map(map(list, half), #)
map(map(list, i), i32)
map(map(list, i32), half)
map(map(list, i32), list)
map(map(list, i64), #)
map(map(list, i64), array)
map(map(list, i64), div)
map(map(list, i64), f64)
map(map(list, i64), list)
map(map(list, list), #)
map(map(list, list), div)
map(map(list, list), i)
map(map(list, ok), #)
map(map(list, score), #)
map(map(list, score), ok)
map(map(list, true), #)
map(ok ? "foo" : 0.5, #)
map(ok ? "foo" : greet, f32)
map(ok ? array : "bar", ok)
map(ok ? array : foo, # / 1)
map(sort(array), # > #)
map(sort(array), i32 > #)
map(true ? "bar" : true, #)
map(true ? "foo" : add, i64)
map(true ? array : f64, #)
map(true ? array : true, #)
max(--1)
max(-0.5)
max(-1)
max(-1, i)
max(-count(list, false), i64)
max(-f32)
max(-f64)
max(-i)
max(-i, i32, i)
max(-i32)
max(-i64)
max(-i64, 0.5 / f64)
max(0.5 * 0.5)
max(0.5 * f64)
max(0.5 * i)
max(0.5 * i, i32)
max(0.5 * i32)
max(0.5 ** 0.5)
max(0.5 ** 1)
max(0.5 ** f32)
max(0.5 ** f64)
max(0.5 ** i)
max(0.5 ** i64)
max(0.5 + 0.5)
max(0.5 + 1)
max(0.5 + i)
max(0.5 + i32)
max(0.5 + i64)
max(0.5 - 0.5)
max(0.5 - 1)
max(0.5 - i)
max(0.5 - i32)
max(0.5 - i64)
max(0.5 / 0.5)
max(0.5 / f32)
max(0.5 / f64)
max(0.5 / f64, f64)
max(0.5 / i)
max(0.5 / i64)
max(0.5 ^ 0.5)
max(0.5 ^ 1)
max(0.5 ^ f32)
max(0.5 ^ i)
max(0.5 ^ i32)
max(0.5 ^ i64)
max(0.5) != i == ok
max(0.5) * f32
max(0.5) * f64
max(0.5) + i
max(0.5) - f32
max(0.5) - f64
max(0.5) < f64
max(0.5) <= 0.5 - 0.5
max(0.5) <= f64
max(0.5) == f32
max(0.5) == i64
max(0.5) > f32
max(0.5) >= i32
max(0.5) ^ i32
max(0.5, 1) <= i32
max(1 % 1)
max(1 % i)
max(1 % i32)
max(1 % i64)
max(1 * 0.5)
max(1 * 1)
max(1 ** 0.5)
max(1 ** 1)
max(1 ** f64)
max(1 ** i64)
max(1 + f32, f64)
max(1 + i64)
max(1 - 1)
max(1 - i32)
max(1 - i64)
max(1 / 0.5)
max(1 / 1)
max(1 / f32)
max(1 / f64)
max(1 ^ 1)
max(1 ^ i32)
max(1) != i
max(1) * i
max(1) - f64
max(1) - i64
max(1) .. i32
max(1) / i
max(1) / i64
max(1) <= f32
max(1) <= i
max(1) <= i32
max(1) <= i64
max(1) == f32
max(1) > f32
max(1) > f64
max(1) > i
max(1) > i64
max(1, i32, f32) != i64
max(abs(0.5))
max(abs(1))
max(abs(f32))
max(abs(f64))
max(abs(i))
max(abs(i32))
max(abs(i64))
max(array[1])
max(array[i64])
max(array[i])
max(count(array, false))
max(count(list, false))
max(div(1, 1))
max(f32 * 0.5)
max(f32 * 1)
max(f32 * f32)
max(f32 * i32)
max(f32 ** 0.5)
max(f32 ** 1)
max(f32 ** i32)
max(f32 ** i64)
max(f32 + 1)
max(f32 + f64)
max(f32 + i64)
max(f32 - f64)
max(f32 - i)
max(f32 - i32)
max(f32 / 0.5)
max(f32 / f32)
max(f32 ^ 0.5)
max(f32 ^ 1)
max(f32 ^ f32)
max(f32 ^ i32)
max(f32 ^ i64)
max(f32)
max(f32) != -i32
max(f32) != i32
max(f32) + i64
max(f32) - f32
max(f32) <= i
max(f32) <= max(f64)
max(f32) >= i64
max(f32) ^ f32
max(f32) ^ i32
max(f32, -f32)
max(f32, 1) > i32
max(f32, f32)
max(f32, f64)
max(f32, i)
max(f32, i32)
max(f32, i64)
max(f32, min(i))
max(f64 * 0.5)
max(f64 * f64)
max(f64 * i, f32)
max(f64 * i32)
max(f64 ** 1)
max(f64 ** i)
max(f64 ** i64)
max(f64 + 0.5)
max(f64 - i32)
max(f64 - i64)
max(f64 / 0.5)
max(f64 / f32)
max(f64 / i32)
max(f64 ^ 0.5)
max(f64 ^ i32)
max(f64 ^ i64)
max(f64)
max(f64) != i
max(f64) + f32
max(f64) + i64
max(f64) - f32
max(f64) / f32
max(f64) / i32
max(f64) == f64
max(f64) == i32
max(f64) > f32
max(f64) > f64
max(f64) > i64
max(f64) ^ 1 ^ i64
max(f64) ^ i
max(f64) ^ min(i32, 1)
max(f64, -1)
max(f64, 0.5 ** i64)
max(f64, 1) <= f64
max(f64, 1) == i32
max(f64, f32)
max(f64, f32, i32)
max(f64, f32, i64)
max(f64, f64)
max(f64, f64, score(1))
max(f64, float(i))
max(f64, half(f64))
max(f64, i)
max(f64, i32)
max(f64, i64)
max(false ? 1 : 0.5)
max(false ? 1 : nil)
max(false ? add : ok)
max(false ? i : nil)
max(false ? i32 : score)
max(false ? true : 1)
max(find(array, ok))
max(find(array, true))
max(findIndex(array, ok))
max(findIndex(array, true))
max(findIndex(list, ok))
max(findIndex(list, true))
max(findLast(array, false))
max(findLast(array, true))
max(findLastIndex(array, false))
max(findLastIndex(list, true))
max(first(array))
max(float(0.5))
max(float(1))
max(float(f32))
max(float(f64))
max(float(i))
max(float(i64))
max(float(i64), f64)
max(get(array, 1))
max(get(array, i))
max(get(array, i32))
max(get(array, i64))
max(half(-0.5))
max(half(0.5))
max(half(f64))
max(i % i)
max(i % i32)
max(i % i64)
max(i * 0.5)
max(i * 1)
max(i * f32)
max(i * i32)
max(i ** 0.5)
max(i ** 1)
max(i ** f64)
max(i ** i)
max(i ** i64)
max(i + 0.5)
max(i + 1)
max(i + f32)
max(i + f64)
max(i + i)
max(i - 1)
max(i - i32)
max(i - i32, f32)
max(i - i64)
max(i / 0.5)
max(i / f32)
max(i / i32, f64)
max(i ^ 0.5)
max(i ^ 1)
max(i ^ f32)
max(i ^ f64)
max(i)
max(i) != f64
max(i) ** f64
max(i) + f32
max(i) + i64
max(i) - f32
max(i) - f64
max(i) - i32
max(i) - i64
max(i) / f64
max(i) >= i64
max(i) ^ (i * i)
max(i) ^ f32
max(i, -f32)
max(i, f32)
max(i, f32, f32)
max(i, f64)
max(i, i)
max(i, i32)
max(i, i64)
max(i, i64, i64)
max(i32 % 1)
max(i32 % i32)
max(i32 * 0.5)
max(i32 * 1)
max(i32 * f32)
max(i32 * i64)
max(i32 + 0.5, f64)
max(i32 + f64)
max(i32 + i)
max(i32 + i32)
max(i32 - i)
max(i32 - i64)
max(i32 / f32)
max(i32 / f64)
max(i32 / i64)
max(i32 ^ 0.5)
max(i32 ^ 1)
max(i32 ^ f32)
max(i32 ^ i)
max(i32 ^ i32)
max(i32)
max(i32) != min(i64)
max(i32) - f32
max(i32) - i64
max(i32) / f32
max(i32) >= i32
max(i32) ^ i64
max(i32, 1) == i32
max(i32, abs(f64))
max(i32, f32)
max(i32, f32) != i32
max(i32, f64)
max(i32, f64) - f32
max(i32, i)
max(i32, i, i)
max(i32, i32)
max(i32, i32, i)
max(i32, i64)
max(i64 % i)
max(i64 % i32)
max(i64 * 0.5)
max(i64 * 1)
max(i64 * f32)
max(i64 * i32)
max(i64 ** 1)
max(i64 ** i64)
max(i64 + 0.5)
max(i64 + f32)
max(i64 + i32)
max(i64 - 0.5)
max(i64 - 1)
max(i64 - f32)
max(i64 - f64)
max(i64 - i)
max(i64 / 1)
max(i64 / f64)
max(i64 / i)
max(i64 / i64)
max(i64 ^ 0.5)
max(i64 ^ 1)
max(i64 ^ i)
max(i64 ^ i64)
max(i64)
max(i64) != f32
max(i64) != i32
max(i64) * i32
max(i64) * i64
max(i64) ** i64
max(i64) + f32
max(i64) + i64
max(i64) / f32
max(i64) / i
max(i64) / i64
max(i64) < f32
max(i64) < i64
max(i64) <= i
max(i64) == f32
max(i64) == f64
max(i64) >= i32
max(i64) ^ (i64 / f32)
max(i64) in array
max(i64, 1) * i32
max(i64, f32)
max(i64, f64)
max(i64, i)
max(i64, i32)
max(i64, i64)
max(int(0.5))
max(int(1))
max(int(f32))
max(int(f64))
max(int(i))
max(int(i32))
max(int(i64))
max(last(array))
max(len("bar"))
max(len("foo"))
max(len(array))
max(len(list))
max(len(list), 0.5 - i)
max(max(0.5))
max(max(0.5, 0.5))
max(max(1))
max(max(f32))
max(max(f64))
max(max(i))
max(max(i32))
max(max(i64))
max(min(0.5))
max(min(0.5, i))
max(min(1))
max(min(1, i64, 1))
max(min(f32))
max(min(f64))
max(min(f64, i64))
max(min(i))
max(min(i32))
max(min(i32, i))
max(ok ? 1 : foo)
max(ok ? 1 : i)
max(ok ? 1 : i32)
max(ok ? div : foo)
max(ok ? div : i64)
max(ok ? i : true)
max(ok ? ok : i64)
max(ok ? true : 0.5)
max(score(1))
max(score(1), i64)
max(score(i))
max(score(i, i))
max(true ? 0.5 : half)
max(true ? 1 : i64)
max(true ? add : list)
max(true ? foo : add)
max(true ? foo : f32)
max(true ? i : ok)
max(true ? i64 : "bar")
min(-(0.5 + i))
min(-(f32 + i64))
min(-0.5)
min(-0.5, i)
min(-1)
min(-1, i)
min(-1, i64)
min(-f32)
min(-f32, i64)
min(-f64)
min(-f64, i32)
min(-i)
min(-i32)
min(-i64)
min(0.5 * 0.5)
min(0.5 * 1)
min(0.5 * f64)
min(0.5 * i32)
min(0.5 ** 0.5)
min(0.5 ** f64)
min(0.5 ** i64)
min(0.5 + 1)
min(0.5 + f32)
min(0.5 + f64)
min(0.5 + i)
min(0.5 - 0.5)
min(0.5 - 1)
min(0.5 - f64)
min(0.5 - i)
min(0.5 / 0.5)
min(0.5 / f64)
min(0.5 ^ 1)
min(0.5 ^ f32)
min(0.5 ^ i)
min(0.5) != i32
min(0.5) * 0.5 ** i64
min(0.5) ** i
min(0.5) + i
min(0.5) + i32
min(0.5) + i64
min(0.5) < f32
min(0.5) <= i ? f32 : 1
min(0.5) <= i64
min(0.5) == i - 0.5
min(0.5) > i64
min(0.5) >= i
min(0.5, 0.5) == f32
min(0.5, 1) >= i64
min(0.5, i) == i64
min(0.5, i32, f32) + f32
min(1 % i32)
min(1 % i64)
min(1 * 0.5)
min(1 * 1)
min(1 * i)
min(1 * i32)
min(1 * i64)
min(1 ** 0.5)
min(1 ** f32)
min(1 ** f64)
min(1 ** i32)
min(1 + 0.5)
min(1 + 1)
min(1 + f32)
min(1 + i32)
min(1 + i64)
min(1 - 1)
min(1 - f64)
min(1 - i)
min(1 - i32)
min(1 / 1)
min(1 / i)
min(1 / i32)
min(1 / i32, f64)
min(1 / i64)
min(1 ^ 1)
min(1 ^ f32)
min(1 ^ f64)
min(1) != 1 ? list : f64
min(1) != i
min(1) % i64
min(1) * -0.5
min(1) * 1 ** 1
min(1) - i64 ^ 0.5
min(1) .. i
min(1) .. i64
min(1) / f64
min(1) / i
min(1) < i
min(1) == f64
min(1) == i32
min(1) >= i64
min(1) ^ f32
min(abs(0.5))
min(abs(1))
min(abs(f32))
min(abs(f64))
min(abs(i * 1))
min(abs(i))
min(abs(i32))
min(abs(i64))
min(abs(i64), f64)
min(add(1, i))
min(add(i, i))
min(array[1])
min(array[i])
min(count(array, false))
min(count(array, ok))
min(count(array, true))
min(count(list, ok))
min(f32 * 1)
min(f32 * f32)
min(f32 * i32)
min(f32 ** i32)
min(f32 ** i64)
min(f32 ** i64, f32)
min(f32 + f64)
min(f32 + i)
min(f32 + i32)
min(f32 + i64)
min(f32 - f32)
min(f32 - i)
min(f32 - i32)
min(f32 - i64)
min(f32 / 0.5)
min(f32 / f64)
min(f32 / i)
min(f32 / i32)
min(f32 / i64)
min(f32 ^ 1)
min(f32 ^ f32)
min(f32 ^ i)
min(f32 ^ i32)
min(f32)
min(f32) * f32
min(f32) * f64
min(f32) + i
min(f32) + i32
min(f32) + i64
min(f32) - f32
min(f32) < i64
min(f32) == i
min(f32) == i32 * i32
min(f32) == i64
min(f32) > i32
min(f32) ^ f64
min(f32, 0.5 ^ 0.5)
min(f32, 0.5) <= i64
min(f32, f32)
min(f32, f64)
min(f32, f64) >= i
min(f32, get(array, i64))
min(f32, i)
min(f32, i32)
min(f32, i64)
min(f32, len(array))
min(f32, len(list))
min(f64 * 0.5)
min(f64 * 1)
min(f64 * f64)
min(f64 * i)
min(f64 * i32)
min(f64 ** 1)
min(f64 ** f64)
min(f64 ** i)
min(f64 ** i32)
min(f64 ** i64)
min(f64 + 1)
min(f64 + i)
min(f64 + i64)
min(f64 - 0.5)
min(f64 - i)
min(f64 - i32)
min(f64 - i64)
min(f64 / 1)
min(f64 / f32)
min(f64 / i)
min(f64 / i32)
min(f64 / i64)
min(f64 ^ 0.5)
min(f64 ^ f64)
min(f64 ^ i32)
min(f64)
min(f64) + f64
min(f64) + i32
min(f64) + i64
min(f64) / f32
min(f64) ^ 1 ^ 1
min(f64) ^ i32
min(f64) ^ i64
min(f64, 0.5 ** 1)
min(f64, 0.5, i) <= f64
min(f64, 1 ** i)
min(f64, 1) < i64
min(f64, f32)
min(f64, f64)
min(f64, f64, i64)
min(f64, i)
min(f64, i32)
min(f64, i64)
min(false ? 1 : add)
min(false ? f64 : false)
min(false ? f64 : score)
min(false ? foo : 1)
min(false ? greet : i)
min(false ? i32 : "foo")
min(false ? i32 : i64)
min(false ? true : 0.5)
min(find(array, false))
min(find(array, ok))
min(findIndex(list, ok))
min(findLast(array, true))
min(findLastIndex(array, false))
min(findLastIndex(array, ok))
min(findLastIndex(array, true))
min(findLastIndex(list, ok))
min(first(array))
min(float(0.5))
min(float(1))
min(float(f32))
min(float(f64))
min(float(i))
min(float(i32))
min(float(i64))
min(get(array, i))
min(get(array, i64))
min(half(0.5 ^ i32))
min(half(0.5))
min(half(0.5), f32)
min(half(f64))
min(i % 1)
min(i % i32)
min(i % i64)
min(i * 0.5)
min(i * 1)
min(i * i)
min(i * i64)
min(i ** 0.5)
min(i ** f32)
min(i ** f64)
min(i ** i)
min(i ** i64)
min(i + 0.5)
min(i + f32)
min(i + f64)
min(i + i)
min(i - 0.5)
min(i - 1)
min(i - i)
min(i / 0.5)
min(i / i64)
min(i / i64, i)
min(i ^ 0.5)
min(i ^ i, i32)
min(i)
min(i) != i32
min(i) % i
min(i) * f32
min(i) ** i
min(i) .. i
min(i) / f64
min(i) < f32
min(i) <= i64
min(i, f32)
min(i, f64)
min(i, i)
min(i, i32 - i)
min(i, i32)
min(i, i64 * f32)
min(i, i64)
min(i32 % i)
min(i32 * 1)
min(i32 * f64)
min(i32 * i32)
min(i32 ** 1 ^ i64)
min(i32 ** f32)
min(i32 ** i)
min(i32 ** i64)
min(i32 + 0.5)
min(i32 + 1)
min(i32 + f32)
min(i32 - 0.5)
min(i32 - 1)
min(i32 - i32)
min(i32 / 1)
min(i32 / i)
min(i32 / i64)
min(i32 / i64, score(1))
min(i32 ^ 1)
min(i32 ^ f64)
min(i32 ^ i)
min(i32 ^ i64)
min(i32)
min(i32) != i64
min(i32) + f32
min(i32) - i64
min(i32) / f32
min(i32) < i32
min(i32) == f32
min(i32) == i32
min(i32) >= i32
min(i32) ^ f64
min(i32, 0.5) .. i32
min(i32, f32)
min(i32, f64)
min(i32, i)
min(i32, i32)
min(i32, i32, i)
min(i32, i64)
min(i32, i64) .. i
min(i32, i64) <= f64
min(i32, min(i))
min(i64 % i32)
min(i64 * 1, f32)
min(i64 * f64)
min(i64 * i32)
min(i64 ** 0.5)
min(i64 ** 1)
min(i64 ** i)
min(i64 + 0.5)
min(i64 + 1)
min(i64 + f32)
min(i64 + i)
min(i64 + i32)
min(i64 - 0.5)
min(i64 - f32)
min(i64 - f64)
min(i64 - i)
min(i64 - i64)
min(i64 / 0.5)
min(i64 / f64)
min(i64 / i)
min(i64 / i64)
min(i64 ^ 1)
min(i64 ^ i32)
min(i64 ^ i64)
min(i64)
min(i64) != i64
min(i64) % i32
min(i64) ** -1
min(i64) ** -f64
min(i64) ** i
min(i64) + i32
min(i64) .. i
min(i64) .. i64
min(i64) <= f32
min(i64) == i
min(i64) ^ f32
min(i64) ^ f64
min(i64) in array
min(i64, 1 ** 0.5)
min(i64, 1) <= f64
min(i64, f32)
min(i64, f64)
min(i64, f64) != f64
min(i64, f64) * i32
min(i64, f64, i32)
min(i64, i)
min(i64, i32)
min(i64, i32, i)
min(i64, i64)
min(i64, i64, f32)
min(int(0.5))
min(int(1))
min(int(f32))
min(int(f64))
min(int(i))
min(int(i64))
min(last(array))
min(len("bar"))
min(len("foo"))
min(len(array))
min(len(list))
min(len(list), f64)
min(max(0.5))
min(max(1))
min(max(1, 0.5))
min(max(1, f32))
min(max(1, i32))
min(max(f32))
min(max(f64))
min(max(i), i64)
min(max(i32))
min(min(0.5))
min(min(0.5, 1))
min(min(1))
min(min(f32))
min(min(f32, i, i32))
min(min(f64))
min(min(i))
min(min(i32))
min(min(i64))
min(ok ? add : 0.5)
min(ok ? f32 : "foo")
min(ok ? f64 : true)
min(ok ? foo : 1)
min(ok ? true : 1)
min(score(1))
min(score(i))
min(true ? 0.5 : ok)
min(true ? 1 : greet)
min(true ? add : greet)
min(true ? f32 : i)
min(true ? foo : 0.5)
min(true ? foo : half)
min(true ? i : 1)
min(true ? i32 : score)
nil != "bar" ? i64 : 0.5 - i
nil != 0.5 && 0.5 != f32
nil != 1 && ok
nil != 1 or any(list, false)
nil != 1 || ok
nil != f32 || ok
nil != f64 && ok
nil != f64 or ok
nil != f64 || array != array
nil != false and not true
nil != false and ok
nil != false || ok
nil != foo == ok
nil != foo || ok
nil != foo.Bar
nil != foo.Qux
nil != foo.String
nil != foo?.Bar
nil != foo?.Qux
nil != foo?.String
nil != greet ? half : half
nil != greet or f32 < i
nil != i32 or f32 >= 1
nil != i64 or i >= 1
nil != ok == not true
nil != true == ok
nil == 1 != nil ? "bar" : i32
nil == add == ("bar" not endsWith "foo")
nil == f32 && i64 < f64
nil == foo.Bar
nil == foo.Qux
nil == foo.String
nil == foo.String()
nil == foo?.Bar
nil == foo?.Qux
nil == foo?.String
nil == foo?.String()
nil == i64 ? add : add
nil == nil == ok
nil == true ? i64 ^ f32 : foo
nil == true || ok
nil in array || ok
nil in array[i32:i64]
nil in list and ok
none(array, !ok)
none(array, !true)
none(array, "bar" == "bar")
none(array, # != #)
none(array, # != 1)
none(array, # != f32)
none(array, # != f64)
none(array, # != i32)
none(array, # != i64)
none(array, # < #)
none(array, # < 0.5)
none(array, # < 1)
none(array, # < f32)
none(array, # < i)
none(array, # < i32)
none(array, # < i64)
none(array, # <= #)
none(array, # <= 0.5)
none(array, # <= 1)
none(array, # <= f32)
none(array, # <= i)
none(array, # <= i32)
none(array, # == #)
none(array, # == 0.5)
none(array, # == 1)
none(array, # == i)
none(array, # == nil)
none(array, # > #)
none(array, # > 0.5)
none(array, # > f32)
none(array, # > f64)
none(array, # > i)
none(array, # > i32)
none(array, # >= #)
none(array, # >= 0.5)
none(array, # >= 1)
none(array, # >= f32)
none(array, # >= f64)
none(array, # in array)
none(array, # not in array)
none(array, 0.5 != #)
none(array, 0.5 != f32)
none(array, 0.5 < #)
none(array, 0.5 <= 0.5)
none(array, 0.5 <= 1)
none(array, 0.5 <= i)
none(array, 0.5 > #)
none(array, 0.5 >= #)
none(array, 1 != #)
none(array, 1 < #)
none(array, 1 < 0.5)
none(array, 1 < i)
none(array, 1 < i64)
none(array, 1 <= 1)
none(array, 1 == #)
none(array, 1 == f64)
none(array, 1 > #)
none(array, 1 > f64)
none(array, 1 >= i)
none(array, add != greet)
none(array, all(array, true))
none(array, div == greet)
none(array, f32 != #)
none(array, f32 != nil)
none(array, f32 <= #)
none(array, f32 >= #)
none(array, f64 != #)
none(array, f64 == #)
none(array, f64 >= 0.5)
none(array, half != nil)
none(array, i < #)
none(array, i < 1)
none(array, i <= #)
none(array, i == i64)
none(array, i not in array)
none(array, i32 != #)
none(array, i32 != f64)
none(array, i32 != nil)
none(array, i32 < #)
none(array, i32 > #)
none(array, i32 >= #)
none(array, i64 < #)
none(array, i64 < f64)
none(array, i64 >= #)
none(array, nil != 0.5)
none(array, nil != div)
none(array, nil == #)
none(array, nil == 1)
none(array, nil == div)
none(array, none(array, !true))
none(array, not ok)
none(array, ok == nil)
none(array, ok)
none(array, ok) != ok
none(array, ok) ? f32 : !ok
none(array, score == nil)
none(array, score == score)
none(array, true ? ok : f64)
none(array, true or true)
none(i64 .. i32, # > #)
none(list, "bar" not in #)
none(list, # != #)
none(list, # != foo)
none(list, # != nil)
none(list, # == #)
none(list, # == nil)
none(list, 0.5 != i)
none(list, 0.5 <= 1)
none(list, 0.5 <= f64)
none(list, 0.5 == nil)
none(list, 1 < i32)
none(list, 1 == f32)
none(list, any(list, ok))
none(list, array == nil)
none(list, f32 > i)
none(list, f64 == i32)
none(list, false && false)
none(list, false) or f64 >= i64
none(list, foo != #)
none(list, foo == #)
none(list, greet != add)
none(list, greet != half)
none(list, i <= i64)
none(list, i >= 1)
none(list, i >= f64)
none(list, i not in array)
none(list, i32 != nil)
none(list, i32 == f64)
none(list, i32 == nil)
none(list, i32 >= 1)
none(list, i32 >= f32)
none(list, i64 < f64)
none(list, i64 <= f64)
none(list, i64 > f64)
none(list, i64 > i64)
none(list, nil != array)
none(list, nil != true)
none(list, nil == foo)
none(list, not false)
none(list, not ok)
none(list, ok)
none(list, one(array, false))
none(list, score != nil)
none(list, score == add)
none(list, true && ok)
none(list, true == ok)
none(list, true) ? div : array
none(map(array, "bar"), # not endsWith #)
none(map(array, "foo"), # not endsWith #)
none(map(array, #), ok)
none(map(array, 0.5), # == #)
none(map(array, 1), # >= #)
none(map(array, half), # == #)
none(map(array, ok), #)
none(map(list, "bar"), # not startsWith #)
none(map(list, "bar"), # startsWith #)
none(map(list, #), # != #)
none(map(list, #), ok)
none(map(list, i32), f64 > #)
none(map(list, true), # != #)
none(ok ? "bar" : ok, # >= f64)
not !("foo" not matches "foo")
not !(0.5 > 1)
not !(f64 >= i32)
not !(false && ok)
not !(i >= i32)
not !false
not !ok
not !true
not ("bar" != "foo")
not ("bar" != nil)
not ("bar" < "foo")
not ("bar" <= "bar")
not ("bar" <= "foo")
not ("bar" == "bar")
not ("bar" == "foo")
not ("bar" == nil)
not ("bar" > "bar")
not ("bar" > "foo")
not ("bar" >= "bar")
not ("bar" >= "foo")
not ("bar" contains "bar")
not ("bar" contains "foo")
not ("bar" endsWith "bar")
not ("bar" endsWith "foo")
not ("bar" in foo)
not ("bar" matches "bar")
not ("bar" not contains "bar")
not ("bar" not contains "foo")
not ("bar" not endsWith "bar")
not ("bar" not endsWith "foo")
not ("bar" not in foo)
not ("bar" not matches "bar")
not ("bar" not matches "foo")
not ("bar" startsWith "bar")
not ("bar" startsWith "foo")
not ("foo" != "bar")
not ("foo" != "foo")
not ("foo" != nil)
not ("foo" < "bar")
not ("foo" < "foo")
not ("foo" <= "bar")
not ("foo" <= "foo")
not ("foo" == "bar")
not ("foo" == "foo")
not ("foo" == nil)
not ("foo" > "bar")
not ("foo" > "foo")
not ("foo" >= "foo")
not ("foo" contains "foo")
not ("foo" endsWith "bar")
not ("foo" endsWith "foo")
not ("foo" in foo)
not ("foo" matches "bar")
not ("foo" matches "foo")
not ("foo" not contains "bar")
not ("foo" not contains "foo")
not ("foo" not endsWith "bar")
not ("foo" not endsWith "foo")
not ("foo" not in foo)
not ("foo" not matches "bar")
not ("foo" not matches "foo")
not ("foo" not startsWith "bar")
not ("foo" not startsWith "foo")
not ("foo" startsWith "foo")
not (0.5 != 0.5)
not (0.5 != 1)
not (0.5 != f64)
not (0.5 != i)
not (0.5 != i32)
not (0.5 != i64)
not (0.5 != nil)
not (0.5 < 0.5)
not (0.5 < 1)
not (0.5 < f32)
not (0.5 < f64)
not (0.5 < i)
not (0.5 < i32)
not (0.5 < i64)
not (0.5 <= 0.5)
not (0.5 <= 1)
not (0.5 <= f32)
not (0.5 <= f64)
not (0.5 <= i)
not (0.5 <= i32)
not (0.5 <= i64)
not (0.5 == 0.5)
not (0.5 == 1)
not (0.5 == f32)
not (0.5 == f64)
not (0.5 == i)
not (0.5 == i32)
not (0.5 == i64)
not (0.5 == nil)
not (0.5 > 0.5)
not (0.5 > 1)
not (0.5 > f32)
not (0.5 > f64)
not (0.5 > i)
not (0.5 > i32)
not (0.5 > i64)
not (0.5 >= 0.5)
not (0.5 >= 1)
not (0.5 >= f32)
not (0.5 >= f64)
not (0.5 >= i)
not (0.5 >= i32)
not (0.5 >= i64)
not (1 != 0.5)
not (1 != 1)
not (1 != f32)
not (1 != f64)
not (1 != i)
not (1 != i32)
not (1 != i64)
not (1 != nil)
not (1 + i > 0.5 ** i32)
not (1 < 0.5)
not (1 < 1)
not (1 < f32)
not (1 < f64)
not (1 < i)
not (1 < i32)
not (1 < i64)
not (1 <= 0.5)
not (1 <= 1)
not (1 <= f32)
not (1 <= f64)
not (1 <= i)
not (1 <= i32)
not (1 <= i64)
not (1 == 0.5)
not (1 == 1)
not (1 == f32)
not (1 == f64)
not (1 == i)
not (1 == i64)
not (1 == nil)
not (1 > 0.5)
not (1 > 1)
not (1 > f32)
not (1 > f64)
not (1 > i)
not (1 > i32)
not (1 > i64)
not (1 >= 0.5)
not (1 >= 1)
not (1 >= f32)
not (1 >= f64)
not (1 >= i)
not (1 >= i32)
not (1 >= i64)
not (1 ^ f32 != i64)
not (1 in array)
not (1 not in array)
not (abs(i) <= i)
not (add != add)
not (add != div)
not (add != greet)
not (add != half)
not (add != nil)
not (add != score)
not (add == add)
not (add == div)
not (add == greet)
not (add == half)
not (add == nil)
not (add == score)
not (array != array)
not (array != list)
not (array != nil)
not (array == array)
not (array == list)
not (array == nil)
not (div != add)
not (div != div)
not (div != greet)
not (div != half)
not (div != nil)
not (div != score)
not (div == add)
not (div == div)
not (div == greet)
not (div == half)
not (div == nil)
not (div == score)
not (f32 != 0.5)
not (f32 != 1)
not (f32 != f32)
not (f32 != f64)
not (f32 != i)
not (f32 != i32)
not (f32 != i64)
not (f32 != nil)
not (f32 < 0.5)
not (f32 < 1)
not (f32 < abs(0.5))
not (f32 < f32)
not (f32 < f64)
not (f32 < i)
not (f32 < i32)
not (f32 < i64)
not (f32 <= 0.5)
not (f32 <= 1)
not (f32 <= f32)
not (f32 <= f64)
not (f32 <= i)
not (f32 <= i32)
not (f32 <= i64)
not (f32 == 0.5)
not (f32 == 1)
not (f32 == f32)
not (f32 == f64)
not (f32 == i32)
not (f32 == i64)
not (f32 == nil)
not (f32 > 0.5)
not (f32 > 1)
not (f32 > f32)
not (f32 > f64)
not (f32 > i32)
not (f32 >= 0.5)
not (f32 >= 1)
not (f32 >= f32)
not (f32 >= f64)
not (f32 >= i)
not (f32 >= i64)
not (f64 != 0.5)
not (f64 != 1 * 0.5)
not (f64 != 1)
not (f64 != f32)
not (f64 != f64)
not (f64 != i)
not (f64 != i32)
not (f64 != i64)
not (f64 != nil)
not (f64 < 0.5)
not (f64 < 1)
not (f64 < f32)
not (f64 < f64)
not (f64 < i)
not (f64 < i32)
not (f64 < i64)
not (f64 <= 0.5)
not (f64 <= 1)
not (f64 <= f32)
not (f64 <= f64)
not (f64 <= i32)
not (f64 <= i64)
not (f64 == 0.5)
not (f64 == 1)
not (f64 == f32)
not (f64 == f64)
not (f64 == i)
not (f64 == i32)
not (f64 == i64 - f32)
not (f64 == nil)
not (f64 > 0.5)
not (f64 > 1)
not (f64 > f32)
not (f64 > f64)
not (f64 > i)
not (f64 > i64)
not (f64 >= 0.5)
not (f64 >= 1)
not (f64 >= f32)
not (f64 >= f64)
not (f64 >= i)
not (f64 >= i32)
not (f64 >= i64)
not (false != false)
not (false != nil)
not (false != ok)
not (false != true)
not (false && ok)
not (false && true)
not (false == false)
not (false == nil)
not (false == true)
not (false and false)
not (false and true)
not (false or false)
not (false or ok)
not (false or true)
not (false || false)
not (false || ok)
not (false || true)
not (foo != foo)
not (foo != nil)
not (foo == foo)
not (foo == nil)
not (foo in list)
not (foo not in list)
not (greet != add)
not (greet != div)
not (greet != greet)
not (greet != half)
not (greet != nil)
not (greet != score)
not (greet == add)
not (greet == div)
not (greet == greet)
not (greet == half)
not (greet == nil)
not (greet == score)
not (half != add)
not (half != div)
not (half != greet)
not (half != nil)
not (half != score)
not (half == add)
not (half == div)
not (half == greet)
not (half == half)
not (half == nil)
not (half == score)
not (i != 0.5)
not (i != 1)
not (i != f32)
not (i != f64)
not (i != i)
not (i != i32)
not (i != i64)
not (i != nil)
not (i < 0.5)
not (i < 1)
not (i < f32)
not (i < f64)
not (i < i)
not (i < i32)
not (i < i64)
not (i <= 0.5)
not (i <= 1)
not (i <= f32)
not (i <= f64)
not (i <= i32)
not (i <= i64)
not (i == 0.5)
not (i == 1)
not (i == f32)
not (i == f64)
not (i == i)
not (i == i32)
not (i == nil)
not (i > 0.5)
not (i > 1)
not (i > f32)
not (i > f64)
not (i > i)
not (i > i64)
not (i >= 0.5)
not (i >= 1)
not (i >= div(1, 1))
not (i >= f32)
not (i >= f64)
not (i >= i)
not (i >= i64)
not (i in array)
not (i not in array)
not (i32 != 0.5)
not (i32 != 1)
not (i32 != f32)
not (i32 != f64)
not (i32 != i)
not (i32 != i64)
not (i32 != nil)
not (i32 < 0.5)
not (i32 < 1)
not (i32 < f64)
not (i32 < i)
not (i32 < i32)
not (i32 < i64)
not (i32 <= 0.5)
not (i32 <= 1)
not (i32 <= f32)
not (i32 <= f64)
not (i32 <= i)
not (i32 <= i32)
not (i32 <= i64)
not (i32 == 0.5)
not (i32 == 1)
not (i32 == f32)
not (i32 == f64)
not (i32 == i)
not (i32 == i32)
not (i32 == i64)
not (i32 == nil)
not (i32 > 0.5)
not (i32 > 1)
not (i32 > f32)
not (i32 > f64)
not (i32 > i)
not (i32 > i32)
not (i32 > i64)
not (i32 >= 0.5)
not (i32 >= 1)
not (i32 >= f32)
not (i32 >= f64)
not (i32 >= i)
not (i32 >= i32)
not (i32 >= i64)
not (i32 in array)
not (i64 != 0.5)
not (i64 != 1)
not (i64 != f32)
not (i64 != f64)
not (i64 != i)
not (i64 != i32)
not (i64 != i64)
not (i64 != nil)
not (i64 < 0.5)
not (i64 < 1)
not (i64 < f32)
not (i64 < f64)
not (i64 < i)
not (i64 < i32)
not (i64 < i64)
not (i64 < int(f64))
not (i64 <= 0.5)
not (i64 <= 1)
not (i64 <= f32)
not (i64 <= f64)
not (i64 <= i)
not (i64 <= i64)
not (i64 == 0.5)
not (i64 == 1)
not (i64 == f32)
not (i64 == f64)
not (i64 == i)
not (i64 == i32)
not (i64 == i64)
not (i64 == nil)
not (i64 > 0.5)
not (i64 > 1)
not (i64 > f64)
not (i64 > i)
not (i64 > i32)
not (i64 > i64)
not (i64 >= 0.5)
not (i64 >= 1)
not (i64 >= f32)
not (i64 >= f64)
not (i64 >= i)
not (i64 >= i32)
not (i64 >= max(i))
not (i64 in array)
not (i64 not in array)
not (list != array)
not (list != list)
not (list != nil)
not (list == array)
not (list == list)
not (list == nil)
not (nil != "bar")
not (nil != "foo")
not (nil != 0.5)
not (nil != 1)
not (nil != add)
not (nil != array)
not (nil != div)
not (nil != f32)
not (nil != f64)
not (nil != false)
not (nil != foo)
not (nil != greet)
not (nil != half)
not (nil != i)
not (nil != i32)
not (nil != i64)
not (nil != list)
not (nil != nil)
not (nil != ok)
not (nil != score)
not (nil != true)
not (nil == "bar")
not (nil == "foo")
not (nil == 0.5)
not (nil == 1)
not (nil == add)
not (nil == array)
not (nil == div)
not (nil == f32)
not (nil == f64)
not (nil == false)
not (nil == foo)
not (nil == greet)
not (nil == half)
not (nil == i)
not (nil == i32)
not (nil == i64)
not (nil == list)
not (nil == nil)
not (nil == ok)
not (nil == score)
not (nil == true)
not (nil in array)
not (nil in list)
not (nil not in array)
not (nil not in list)
not (ok != false)
not (ok != nil)
not (ok != ok)
not (ok != true)
not (ok && false)
not (ok && ok)
not (ok && true)
not (ok == false)
not (ok == nil)
not (ok == ok)
not (ok == true)
not (ok and false)
not (ok and ok)
not (ok and true)
not (ok or false)
not (ok or ok)
not (ok or true)
not (ok || ok)
not (ok || true)
not (score != add)
not (score != div)
not (score != greet)
not (score != half)
not (score != nil)
not (score != score)
not (score == add)
not (score == div)
not (score == greet)
not (score == half)
not (score == nil)
not (score == score)
not (true != false)
not (true != nil)
not (true != ok)
not (true != true)
not (true && ok)
not (true && true)
not (true == nil)
not (true == ok)
not (true == true)
not (true and false)
not (true and ok)
not (true and true)
not (true or false)
not (true or ok)
not (true || false)
not all(array, ok)
not all(array, true)
not all(list, false)
not all(list, ok)
not all(list, true)
not any(array, false)
not any(array, ok)
not any(array, true)
not any(list, # != #)
not any(list, false)
not any(list, ok)
not any(list, true)
not false && ok
not false && ok ? list : array
not false ? "bar" : 0.5
not false ? "bar" : foo
not false ? "foo" : 0.5
not false ? 0.5 : greet
not false ? 1 : div
not false ? 1 : i32
not false ? add : i
not false ? array : "foo"
not false ? array : array
not false ? array : greet
not false ? array : ok
not false ? div : greet
not false ? foo : 1
not false ? foo : array
not false ? greet : ok
not false ? half : 0.5
not false ? half : i32
not false ? i : i64
not false ? i : score
not false ? i32 : 0.5
not false ? i32 : add
not false ? i32 : f32
not false ? i32 : true
not false ? i64 : list
not false ? list : i32
not false ? nil : greet
not false ? nil : i32
not false ? nil : nil
not false ? ok : "bar"
not false ? ok : 1
not false ? ok : list
not false ? score : "foo"
not false ? score : array
not false ? score : score
not false ? score : true
not false ? true : 0.5
not false ? true : 1
not false ? true : nil
not false or "foo" > "bar"
not none(array, # == #)
not none(array, false)
not none(array, ok)
not none(array, true)
not none(list, false)
not none(list, ok)
not none(list, true)
not not ("bar" >= "foo")
not not (1 < i)
not not (add == nil)
not not (half == nil)
not not false
not not ok
not not true
not ok
not ok && ok
not ok == ok
not ok ? "bar" : 1
not ok ? "bar" : f32
not ok ? 0.5 + f64 : half
not ok ? 0.5 : "foo"
not ok ? 0.5 : 0.5
not ok ? 0.5 : div
not ok ? 0.5 : f32
not ok ? 0.5 : greet
not ok ? 1 : 1
not ok ? add : 0.5
not ok ? array : f64
not ok ? array : true
not ok ? div : 1
not ok ? div : add
not ok ? f32 : div
not ok ? f64 : 1
not ok ? f64 : half
not ok ? false : f32
not ok ? false : i
not ok ? false : true
not ok ? foo : add
not ok ? foo : false
not ok ? foo : i64
not ok ? greet : add
not ok ? half : true
not ok ? i : div
not ok ? i : true
not ok ? i32 : nil
not ok ? i64 : add
not ok ? nil : 0.5
not ok ? nil : div
not ok ? nil : foo
not ok ? nil : half
not ok ? nil : i
not ok ? score : div
not ok ? score : i
not ok ? score : true
not ok ? true : f32
not ok ? true : false
not ok ? true : score
not ok and not ok
not ok or ok
not ok or one(array, true)
not ok || ok
not ok || true ? 0.5 : 1
not one(array, # > f32)
not one(array, false)
not one(array, ok)
not one(array, true)
not one(list, false)
not one(list, ok)
not one(list, true)
not true && i32 <= i32
not true ? "foo" : i
not true ? 1 : i64
not true ? add : add
not true ? add : foo
not true ? array : 1
not true ? array : add
not true ? array : array
not true ? array : i32
not true ? array : i64
not true ? div : nil
not true ? f64 : i64
not true ? foo : foo
not true ? greet : "bar"
not true ? greet : add
not true ? greet : foo
not true ? greet : i32
not true ? half : half
not true ? i : 1
not true ? i : i
not true ? i32 : 0.5
not true ? i64 : 1
not true ? list : "bar"
not true ? list : 0.5
not true ? list : 1
not true ? list : array
not true ? list : type(add)
not true ? nil : list
not true ? score : 1
not true ? score : list
not true ? score : true
not true || ok
ok
ok != !ok
ok != !true
ok != false != ok
ok != false ? 1 : i
ok != nil == nil
ok != none(list, ok)
ok != not !ok
ok != not ok
ok != ok
ok != ok || ok
ok && !ok ? f32 : 0.5
ok && !true
ok && "bar" >= "bar"
ok && "foo" <= "bar"
ok && 0.5 != nil
ok && 0.5 == 0.5
ok && 0.5 >= f32
ok && 1 != f64
ok && 1 != i32
ok && 1 < 1
ok && 1 <= 0.5
ok && 1 == f64
ok && 1 >= f32
ok && div == half
ok && f32 != 0.5
ok && f32 < 0.5
ok && f32 == f32
ok && f32 == i64
ok && f64 < 1
ok && f64 < i32
ok && f64 == i32
ok && f64 >= i32
ok && false == false
ok && i != i
ok && i32 != 0.5
ok && i32 < f32
ok && i32 <= i64
ok && i32 == 1
ok && i32 >= 1
ok && i64 < i32
ok && i64 <= i32
ok && i64 > 1
ok && list != array
ok && nil != f64
ok && nil == add
ok && nil == i32
ok && nil == true
ok && ok
ok && score != add
ok && true != ok
ok && true == nil
ok == !false
ok == !ok
ok == (false or true)
ok == (ok and ok)
ok == any(list, ok)
ok == false == nil
ok == nil ? false : add
ok == nil ? score : array
ok == not false
ok == not true
ok == ok
ok ? "bar" : i == f32
ok ? "bar" : i32 < i32
ok ? "foo" : foo.String
ok ? -0.5 : foo
ok ? -f32 : i64 + 1
ok ? -f64 : score
ok ? -i64 : ok
ok ? 0.5 * array[i64] : greet
ok ? 0.5 : f64 < i64
ok ? 0.5 : half != add
ok ? 0.5 : i .. i
ok ? 0.5 < i32 : score
ok ? 0.5 == 0.5 : half
ok ? 1 : 1 + i64 + i32
ok ? 1 : foo.Bar
ok ? 1 : foo.String
ok ? add : add
ok ? add : array
ok ? add : div
ok ? add : f32
ok ? add : greet
ok ? add : i
ok ? add : i32
ok ? add : i64
ok ? add : list
ok ? add : ok
ok ? array : div
ok ? array : f64
ok ? array : float(i32)
ok ? array : foo
ok ? array : foo?.Bar
ok ? array : i32
ok ? array : i64
ok ? array : list
ok ? array : ok in map(array, ok)
ok ? div : div
ok ? div : f32
ok ? div : f64
ok ? div : foo?.String
ok ? div : greet
ok ? div : half
ok ? div : half(1)
ok ? div : i32
ok ? div : i64
ok ? div : list
ok ? div : list == array
ok ? div : score
ok ? div : score(i)
ok ? f32 : add
ok ? f32 : array
ok ? f32 : div
ok ? f32 : f32
ok ? f32 : f64
ok ? f32 : foo
ok ? f32 : foo?.Bar
ok ? f32 : half
ok ? f32 : i != i64
ok ? f32 : i32
ok ? f64 : array
ok ? f64 : greet
ok ? f64 : half
ok ? f64 : i64
ok ? f64 : score
ok ? false : foo?.String()
ok ? foo : add
ok ? foo : foo
ok ? foo : foo?.Bar
ok ? foo : greet
ok ? foo : i
ok ? foo : i == i32
ok ? foo : i32
ok ? foo : i64
ok ? foo : i64 ^ f32
ok ? foo : list
ok ? get(array, i32) : ok
ok ? greet : add
ok ? greet : div
ok ? greet : f64 == i64
ok ? greet : greet
ok ? greet : half
ok ? greet : i / i32
ok ? greet : i32
ok ? greet : i64 % i64
ok ? greet : list
ok ? greet : type(f64)
ok ? half : 0.5 ^ i32
ok ? half : add
ok ? half : array
ok ? half : div
ok ? half : f32 == f64
ok ? half : f64
ok ? half : f64 <= i
ok ? half : foo
ok ? half : foo?.Bar
ok ? half : greet
ok ? half : half
ok ? half : i
ok ? half : i32
ok ? half : list
ok ? half : ok
ok ? half : type(add)
ok ? i : -i32
ok ? i : 0.5 * i64
ok ? i : 1 ** f64
ok ? i : array
ok ? i : div
ok ? i : f32
ok ? i : f64
ok ? i : foo.Bar
ok ? i : i
ok ? i : i32
ok ? i : ok
ok ? i : score
ok ? i32 + f32 : half
ok ? i32 : -i32
ok ? i32 : 1 not in array
ok ? i32 : add
ok ? i32 : array
ok ? i32 : f32
ok ? i32 : foo.Qux
ok ? i32 : foo?.Qux
ok ? i32 : half
ok ? i32 : i
ok ? i32 : i32
ok ? i32 : list
ok ? i32 : ok
ok ? i32 >= f64 : f32
ok ? i64 : array
ok ? i64 : div
ok ? i64 : f32
ok ? i64 : f64
ok ? i64 : half
ok ? i64 : i32
ok ? i64 : i64
ok ? i64 : ok
ok ? int(1) : div
ok ? list : -1
ok ? list : add
ok ? list : array
ok ? list : div
ok ? list : f32
ok ? list : i32
ok ? list : i64
ok ? list : list
ok ? list : nil in array
ok ? list : ok
ok ? list : score
ok ? lower("foo") : f32
ok ? map(array, #) : duration("foo")
ok ? map(list, #) : score
ok ? min(f32) : score
ok ? min(i) : score
ok ? nil : foo?.Bar
ok ? ok : -f32
ok ? ok : 0.5 + i
ok ? ok : array
ok ? ok : f64
ok ? ok : foo
ok ? ok : greet
ok ? ok : i64
ok ? ok : list
ok ? ok : score
ok ? score : add
ok ? score : array
ok ? score : f32
ok ? score : foo.String
ok ? score : foo?.String
ok ? score : greet
ok ? score : half
ok ? score : i
ok ? score : i32
ok ? score : list
ok ? score : nil != div
ok ? score : ok
ok ? score : score
ok ? string(half) : array
ok ? toJSON("foo") : i32
ok ? true : foo?.Qux
ok and !ok
ok and "bar" not endsWith foo?.Bar
ok and "foo" endsWith "foo"
ok and 0.5 <= f32
ok and 0.5 > f64
ok and 0.5 >= f64
ok and 1 != 1
ok and 1 != nil
ok and 1 < i64
ok and 1 == 1
ok and add == add
ok and any(list, false)
ok and f32 >= 1
ok and f64 != i
ok and f64 != nil
ok and f64 > 1
ok and false != true
ok and i > i32
ok and i >= f64
ok and i >= i64
ok and i32 != nil
ok and i32 == 0.5
ok and i32 >= f64
ok and i64 != nil
ok and i64 <= i
ok and i64 > 1
ok and list == list
ok and nil != i
ok and nil != true
ok and none(list, ok)
ok and not ok
ok and not true
ok and ok
ok not in sort(array)
ok or !false
ok or !ok
ok or !true
ok or "bar" < "bar"
ok or "foo" != nil
ok or 0.5 != i32
ok or 0.5 != i64
ok or 0.5 <= 0.5
ok or 0.5 == 1
ok or 0.5 >= i
ok or 1 != i32
ok or 1 >= 0.5
ok or f64 < f32
ok or f64 < i64
ok or fromJSON("bar")
ok or greet != add
ok or half == nil
ok or half == score
ok or i != 0.5
ok or i < 1
ok or i32 < 0.5
ok or i32 == f64
ok or i32 > 0.5
ok or i64 != f32
ok or i64 == 1
ok or list == array
ok or nil != 0.5
ok or not false
ok or not ok
ok or not true
ok or ok
ok or ok || false
ok or one(array, true)
ok || "bar" not contains string(true)
ok || 0.5 < i32
ok || 0.5 <= 0.5
ok || 0.5 == i64
ok || 1 != 0.5
ok || 1 != 1
ok || 1 != nil
ok || 1 < 0.5
ok || 1 <= 1
ok || add != score
ok || all(array, ok)
ok || div == nil
ok || f32 <= 0.5
ok || f32 <= 1
ok || f32 > i64
ok || f32 >= f64
ok || false && ok
ok || i != f64
ok || i <= 0.5
ok || i32 != 0.5
ok || i32 < 0.5
ok || i32 > 1
ok || i64 > 0.5
ok || ok
ok || score != score
ok || toJSON(f64) > trimSuffix("bar")
one([1], ok)
one([i32], i32 >= #)
one([score, greet], # == #)
one([score], ok)
one(array, "bar" matches "foo")
one(array, "bar" not in foo)
one(array, "foo" != "foo")
one(array, "foo" > "foo")
one(array, # != #)
one(array, # != 0.5)
one(array, # != f64)
one(array, # != i32)
one(array, # != nil)
one(array, # % # <= #)
one(array, # < #)
one(array, # < 0.5)
one(array, # < 1)
one(array, # < f32)
one(array, # < f64)
one(array, # < i)
one(array, # < i32)
one(array, # <= #)
one(array, # <= f32)
one(array, # <= f64)
one(array, # <= i)
one(array, # <= i32)
one(array, # == #)
one(array, # == 0.5)
one(array, # == 1)
one(array, # == f64)
one(array, # == i)
one(array, # == i32)
one(array, # == i64)
one(array, # > #)
one(array, # > f64)
one(array, # > i32)
one(array, # > i64)
one(array, # >= #)
one(array, # >= 0.5)
one(array, # >= 1)
one(array, # >= f32)
one(array, # >= i)
one(array, # >= i32)
one(array, # in array)
one(array, 0.5 != #)
one(array, 0.5 < #)
one(array, 0.5 <= #)
one(array, 0.5 == #)
one(array, 0.5 > #)
one(array, 0.5 > f32)
one(array, 0.5 >= #)
one(array, 1 != #)
one(array, 1 < 0.5)
one(array, 1 < i)
one(array, 1 <= #)
one(array, 1 <= 0.5)
one(array, 1 == #)
one(array, 1 == i32)
one(array, 1 > #)
one(array, 1 >= #)
one(array, 1 >= f32)
one(array, f32 < 1)
one(array, f32 <= #)
one(array, f32 <= i64)
one(array, f32 == #)
one(array, f32 == 0.5)
one(array, f32 == 1)
one(array, f32 >= #)
one(array, f64 != #)
one(array, f64 != 1)
one(array, f64 != i)
one(array, f64 != nil)
one(array, f64 == #)
one(array, f64 > #)
one(array, false == nil)
one(array, greet == score)
one(array, i != 0.5)
one(array, i < i32)
one(array, i <= #)
one(array, i == #)
one(array, i > f64)
one(array, i >= #)
one(array, i >= f32)
one(array, i32 != #)
one(array, i32 <= #)
one(array, i32 == #)
one(array, i32 == i)
one(array, i32 > #)
one(array, i64 <= #)
one(array, i64 == #)
one(array, i64 > #)
one(array, i64 > 1)
one(array, nil != #)
one(array, nil != foo)
one(array, nil == i64)
one(array, not ok)
one(array, not true)
one(array, ok && true)
one(array, ok)
one(array, one(array, false))
one(array, score != greet)
one(array, score == div)
one(array, true || ok)
one(array, true || true)
one(filter(list, true), ok)
one(i32 .. i32, ok)
one(i32 .. i64, # >= #)
one(list, !ok)
one(list, !true)
one(list, "bar" not in #)
one(list, "foo" != "bar")
one(list, "foo" < "foo")
one(list, "foo" not in #)
one(list, # != #)
one(list, # != nil)
one(list, # == #)
one(list, # == foo)
one(list, # == nil)
one(list, # in list)
one(list, 0.5 != f32)
one(list, 0.5 > 0.5)
one(list, 1 < 1)
one(list, any(array, true))
one(list, any(list, ok))
one(list, any(list, true))
one(list, f32 == 0.5)
one(list, f32 == f64)
one(list, f32 > f32)
one(list, f64 != nil)
one(list, f64 == f32)
one(list, f64 >= 0.5)
one(list, f64 >= 1)
one(list, foo == #)
one(list, greet != nil)
one(list, greet == score)
one(list, half != add)
one(list, i != nil)
one(list, i == i64)
one(list, i64 != f32)
one(list, i64 < 1)
one(list, i64 <= 0.5)
one(list, i64 > 0.5)
one(list, i64 > 1)
one(list, list != nil)
one(list, nil != nil)
one(list, nil != score)
one(list, nil == #)
one(list, none(array, ok))
one(list, none(list, ok))
one(list, not false)
one(list, not ok)
one(list, not true)
one(list, ok)
one(list, ok) and ok
one(list, one(list, ok))
one(list, score == half)
one(list, true) && ok ? i : i64
one(map(array, "foo"), # matches #)
one(map(array, #), # != #)
one(map(array, #), # < #)
one(map(array, #), # <= #)
one(map(array, #), # > #)
one(map(array, #), # > 1)
one(map(array, #), f64 <= 0.5)
one(map(array, #), ok)
one(map(array, div), # == nil)
one(map(array, i64), ok)
one(map(array, true), #)
one(map(list, "bar"), ok)
one(map(list, #), nil != #)
one(map(list, 1), # < 0.5)
one(map(list, f64), # <= #)
one(map(list, false), #)
one(map(list, i), ok)
one(map(list, list), ok)
one(map(list, ok), #)
repeat(toJSON(nil), i)
score
score != add
score != add != true
score != add ? i64 : "foo"
score != div
score != div ? i : f32
score != div and ok
score != foo.Qux
score != foo.String
score != foo?.Qux
score != foo?.String
score != greet
score != greet ? score : array
score != half
score != score
score != score ? 1 : i
score == add
score == add == false
score == add ? f64 : not false
score == div
score == div || foo == foo
score == foo.Qux
score == foo.String
score == foo?.Qux
score == foo?.String
score == greet
score == greet ? half : f64
score == greet and ok
score == half
score == score
score == score ? 0.5 : foo
score == score ? nil : i32
score == score or ok
score == {"bar": 0.5}.f32
score(-1)
score(-i)
score(-i, i)
score(1 % 1)
score(1 % i)
score(1 % i32)
score(1 % i64)
score(1 * 1)
score(1 * 1, i)
score(1 * i)
score(1 * i32)
score(1 * i64)
score(1 + 1)
score(1 + i)
score(1 + i32)
score(1 + i64)
score(1 - 1)
score(1 - i)
score(1 - i32)
score(1 - i64)
score(1) != -0.5
score(1) != f32
score(1) != float(f64)
score(1) != i
score(1) % i32
score(1) * f32
score(1) * f64
score(1) * i64
score(1) ** -1
score(1) ** f32
score(1) ** i64
score(1) + f32
score(1) + f64
score(1) - f32
score(1) - i
score(1) .. i64
score(1) / f64
score(1) / i
score(1) / i32
score(1) / i64
score(1) < i32
score(1) < i64
score(1) <= i32
score(1) <= i64
score(1) == 1 ^ 1
score(1) == f64
score(1) == i ** f64
score(1) == i32
score(1) == i64
score(1) > i64
score(1) >= f32
score(1) >= f64
score(1) >= i
score(1) >= i32
score(1) >= i64
score(1) ^ f32
score(1) ^ f64
score(1) ^ i
score(1) in array
score(1, i) > f32
score(abs(1))
score(abs(i))
score(add(1, 1))
score(add(1, i))
score(array[1])
score(array[i32])
score(array[i64])
score(array[i])
score(count(array, f64 < 1))
score(count(array, false))
score(count(array, ok))
score(count(array, true))
score(count(list, false))
score(count(list, ok))
score(count(list, true))
score(div(1, 1))
score(div(i, 1))
score(false ? true : i)
score(find(array, ok))
score(findIndex(array, ok))
score(findIndex(array, true))
score(findIndex(list, ok))
score(findIndex(list, true))
score(findLast(array, 0.5 != #))
score(findLast(array, ok))
score(findLastIndex(array, ok))
score(findLastIndex(array, true))
score(findLastIndex(list, ok))
score(findLastIndex(list, true))
score(first(array))
score(get(array, 1))
score(get(array, i))
score(get(array, i32))
score(get(array, i64))
score(i % i)
score(i % i32)
score(i * 1)
score(i * i32)
score(i * i64)
score(i + 1)
score(i + i)
score(i + i32)
score(i + i64)
score(i - 1)
score(i - i)
score(i - i32)
score(i - i64)
score(i)
score(i) != 1 == true
score(i) != float(i32)
score(i) != i
score(i) != i32
score(i) % i32 % i64
score(i) % i64
score(i) * f64
score(i) * i32
score(i) * i64
score(i) ** f64
score(i) ** i32
score(i) + f32
score(i) + i
score(i) + i32
score(i) + i64
score(i) - f32
score(i) - i
score(i) - i32
score(i) / f32
score(i) / i
score(i) < f32
score(i) < i32
score(i) <= f32 - f32
score(i) == f32
score(i) == i32
score(i) == i64
score(i) >= f32
score(i) ^ f64
score(i) ^ i
score(i, i + i)
score(i, i)
score(i, i) >= i
score(i, int(i64))
score(i, score(i)) - i32
score(i32 % i)
score(i32 % i64)
score(i32 * 1)
score(i32 * i)
score(i32 + i)
score(i32 + i64)
score(i32 - 1)
score(i32 - i)
score(i64 % 1)
score(i64 % i)
score(i64 * 1)
score(i64 * i)
score(i64 * i32)
score(i64 + 1)
score(i64 - 1)
score(i64 - i)
score(i64 - i32)
score(int(0.5))
score(int(1))
score(int(f32 * i))
score(int(f32))
score(int(f64))
score(int(i))
score(int(i32))
score(int(i64))
score(last(array))
score(len("bar"))
score(len("foo"))
score(len(array))
score(len(i32 .. i64))
score(len(list))
score(max(1))
score(max(1, 1))
score(max(i))
score(max(i, 1))
score(min(1))
score(min(1, i64))
score(min(i))
score(score(1))
score(score(1, 1))
score(score(i))
score(score(i32 % 1))
score(true ? 1 : true)
score(true ? i : i64)
sort(1 .. 1)
sort(1 .. i64)
sort([0.5])
sort([1])
sort([i32])
sort([i64])
sort([nil])
sort(array)
sort(array) != list
sort(false ? i64 : array)
sort(filter(array, false))
sort(filter(array, true))
sort(filter(list, false))
sort(i .. 1)
sort(i .. i64)
sort(i32 .. 1)
sort(i32 .. i32)
sort(map(array, "bar"))
sort(map(array, "foo"))
sort(map(array, #))
sort(map(array, 1))
sort(map(array, i32))
sort(map(list, "foo")) != list
sort(map(list, i))
sort(sort(array))
string(!(i <= f32))
string(!false)
string(!ok)
string(!true)
string("bar" != "bar")
string("bar" < "bar")
string("bar" == "bar")
string("bar" > "bar")
string("bar" contains "foo")
string("bar" endsWith "bar")
string("bar" not endsWith "bar")
string("bar" not matches "foo")
string("bar" not startsWith "foo")
string("bar" startsWith "bar")
string("bar") >= type(score)
string("bar") endsWith "foo" + "foo"
string("bar") in foo
string("foo" != nil)
string("foo" <= "foo")
string("foo" >= "bar")
string("foo" matches "foo")
string("foo" not endsWith "foo")
string("foo" not in foo)
string("foo" not matches "foo")
string("foo" startsWith "bar")
string(-(0.5 + f64))
string(-0.5)
string(-1)
string(-f32)
string(-f64)
string(-i)
string(-i32)
string(-i64)
string(0.5 != 0.5)
string(0.5 != 1)
string(0.5 != f32)
string(0.5 != f64)
string(0.5 != i)
string(0.5 != nil)
string(0.5 * 0.5)
string(0.5 * f32)
string(0.5 * i)
string(0.5 * i32)
string(0.5 ** 0.5)
string(0.5 ** 1)
string(0.5 ** i32)
string(0.5 ** i64)
string(0.5 + 0.5)
string(0.5 + 1)
string(0.5 + f32)
string(0.5 + f64)
string(0.5 + i64)
string(0.5 - 0.5)
string(0.5 - 1)
string(0.5 / 0.5)
string(0.5 / f64)
string(0.5 / i)
string(0.5 < 1)
string(0.5 < f32)
string(0.5 < i)
string(0.5 < i32)
string(0.5 <= f64)
string(0.5 <= i)
string(0.5 <= i64)
string(0.5 == 0.5)
string(0.5 == 1)
string(0.5 == f32)
string(0.5 == f64)
string(0.5 == i)
string(0.5 == i32)
string(0.5 == i64)
string(0.5 == nil)
string(0.5 > 0.5)
string(0.5 > 1)
string(0.5 > i64)
string(0.5 >= 0.5)
string(0.5 >= 1)
string(0.5 >= f32)
string(0.5 >= f64)
string(0.5 >= i)
string(0.5 >= i32)
string(0.5 ^ 0.5)
string(0.5 ^ 1)
string(0.5 ^ f32)
string(0.5 ^ i)
string(0.5 ^ i32)
string(0.5) not endsWith type(1)
string(1 != 1)
string(1 != f32)
string(1 != f64)
string(1 != i)
string(1 != i32)
string(1 != nil)
string(1 % 1)
string(1 % i)
string(1 % i32)
string(1 % i64)
string(1 * 1)
string(1 * i)
string(1 * i64)
string(1 ** 0.5)
string(1 ** 1)
string(1 ** f64)
string(1 ** i)
string(1 ** i32)
string(1 + 0.5)
string(1 + f32)
string(1 + f64)
string(1 + i64)
string(1 - f32)
string(1 - i)
string(1 - i64)
string(1 .. 1)
string(1 .. i)
string(1 .. i32)
string(1 / 0.5)
string(1 / 1)
string(1 / f32)
string(1 / i)
string(1 < i)
string(1 < i32)
string(1 < i64)
string(1 <= 0.5)
string(1 <= 1)
string(1 <= f32)
string(1 <= f64)
string(1 <= i32)
string(1 == 0.5)
string(1 == 1)
string(1 == f64)
string(1 == i)
string(1 == i64)
string(1 == nil)
string(1 > 1)
string(1 > f32)
string(1 >= 0.5)
string(1 >= 1)
string(1 >= f32)
string(1 >= f64)
string(1 >= i)
string(1 >= i32)
string(1 >= i64)
string(1 ^ 1)
string(1 ^ f32)
string(1 ^ f64)
string(1 ^ i)
string(1 ^ i32)
string(1 ^ i64)
string(1 in array)
string(1 not in array)
string(1)[i64:i64]
string([0.5, f32])
string([add])
string([f32])
string([greet])
string([i32, half])
string([i32])
string([i])
string([ok])
string([score])
string(abs(0.5))
string(abs(1))
string(abs(f32))
string(abs(f64))
string(abs(half(0.5)))
string(abs(i))
string(abs(i64))
string(add != add)
string(add != half)
string(add != nil)
string(add != score)
string(add == greet)
string(add)
string(add) contains type(list)
string(add) not in foo
string(all(array, false))
string(all(array, true))
string(any(array, false))
string(any(list, true))
string(array != array)
string(array == nil)
string(array)
string(array) not in foo
string(array[1:i])
string(array[1])
string(array[i64])
string(count(array, # <= #))
string(count(array, ok))
string(div != greet)
string(div != nil)
string(div == nil)
string(div == score)
string(div)
string(f32 != 0.5)
string(f32 != 1)
string(f32 != f32)
string(f32 != f64)
string(f32 != nil)
string(f32 * 0.5)
string(f32 * f64)
string(f32 * i)
string(f32 * i32)
string(f32 ** 1)
string(f32 ** i64)
string(f32 + 1)
string(f32 + f32)
string(f32 - i)
string(f32 / 1)
string(f32 / i)
string(f32 / i64)
string(f32 < 0.5)
string(f32 < f64)
string(f32 < i32)
string(f32 <= 0.5)
string(f32 <= 1)
string(f32 <= f32)
string(f32 <= i)
string(f32 <= i32)
string(f32 == 0.5)
string(f32 == 1)
string(f32 == i64)
string(f32 == nil)
string(f32 > 1)
string(f32 > f32)
string(f32 > f64)
string(f32 > i)
string(f32 > i32)
string(f32 >= 0.5)
string(f32 >= f32)
string(f32 >= f64)
string(f32 >= i32)
string(f32 ^ 1)
string(f32 ^ f32)
string(f32 ^ f64)
string(f32 ^ i)
string(f32 ^ i64)
string(f32)
string(f32) matches trim("bar")
string(f64 != 1)
string(f64 != f32)
string(f64 * 0.5)
string(f64 * 1)
string(f64 * f32)
string(f64 * f64)
string(f64 * i)
string(f64 ** 0.5)
string(f64 ** 1)
string(f64 ** f64)
string(f64 ** i32)
string(f64 + 0.5)
string(f64 + 1)
string(f64 + f32)
string(f64 + i)
string(f64 + i32)
string(f64 + i64)
string(f64 - 0.5)
string(f64 - f64)
string(f64 - i32)
string(f64 / 0.5)
string(f64 / f64)
string(f64 / i64)
string(f64 < 1)
string(f64 < f64)
string(f64 < i32)
string(f64 <= f64)
string(f64 <= i)
string(f64 == 0.5)
string(f64 == 1)
string(f64 == f32)
string(f64 == f64)
string(f64 == i)
string(f64 == i32)
string(f64 == i64)
string(f64 > 0.5)
string(f64 > 1)
string(f64 > f32)
string(f64 > f64)
string(f64 > i64)
string(f64 >= 1)
string(f64 >= f32)
string(f64 >= i)
string(f64 >= i64)
string(f64 ^ 0.5)
string(f64 ^ i)
string(f64 ^ i32)
string(f64 ^ i64)
string(f64)
string(false && false)
string(false ? 0.5 : i32)
string(false ? 1 : "bar")
string(false ? 1 : f32)
string(false ? 1 : score)
string(false ? div : "foo")
string(false ? f32 : foo)
string(false and true)
string(false) <= foo.Bar
string(false) > string(add)
string(filter(list, ok))
string(find(array, ok))
string(findIndex(array, true))
string(findIndex(list, ok))
string(findLast(array, # >= #))
string(findLast(array, false))
string(findLast(array, ok))
string(findLast(list, ok))
string(findLastIndex(array, not false))
string(findLastIndex(array, ok))
string(findLastIndex(array, true))
string(findLastIndex(list, false))
string(findLastIndex(list, ok))
string(findLastIndex(list, true))
string(first(array))
string(first(list))
string(float(0.5))
string(float(1))
string(float(f32))
string(float(f64))
string(float(i))
string(float(i64))
string(foo != nil)
string(foo not in list)
string(foo)
string(foo.Bar)
string(foo.Qux)
string(foo.String())
string(foo.String)
string(foo?.Bar)
string(foo?.Qux)
string(foo?.String())
string(foo?.String)
string(get(array, 1))
string(get(array, i))
string(get(list, i))
string(get(list, i64))
string(greet != add)
string(greet != greet)
string(greet != nil)
string(greet != score)
string(greet == add)
string(greet == greet)
string(greet == half)
string(greet == nil)
string(greet == score)
string(greet("bar"))
string(greet("foo"))
string(greet)
string(greet)[i64:i]
string(half != add)
string(half != div)
string(half != half)
string(half == greet)
string(half == nil)
string(half == score)
string(half(-1))
string(half(0.5))
string(half(f64))
string(half)
string(half) > toJSON(nil)
string(half) not endsWith type("foo")
string(i != 0.5)
string(i != f32)
string(i != f64)
string(i % 1)
string(i % i32)
string(i * i32)
string(i * i64)
string(i ** 1)
string(i ** f32)
string(i + 1)
string(i + i)
string(i + i32)
string(i + i64)
string(i - f32)
string(i - i64)
string(i .. 1)
string(i .. i)
string(i .. i64)
string(i / 1)
string(i / f32)
string(i / i)
string(i / i32)
string(i / i64)
string(i < 1)
string(i < f32)
string(i < i32)
string(i <= 0.5)
string(i <= 1)
string(i == 0.5)
string(i == f32)
string(i == i32)
string(i > 0.5)
string(i > 1)
string(i > f64)
string(i > i64)
string(i >= 1)
string(i >= f64)
string(i ^ 0.5)
string(i ^ 1)
string(i ^ i)
string(i in array)
string(i not in array)
string(i)
string(i32 != f64)
string(i32 != i)
string(i32 != nil)
string(i32 * 0.5)
string(i32 * 1)
string(i32 * f32)
string(i32 * f64)
string(i32 * i64)
string(i32 ** 0.5)
string(i32 ** f64)
string(i32 ** i)
string(i32 + f64)
string(i32 + i32)
string(i32 - f32)
string(i32 - f64)
string(i32 .. 1)
string(i32 .. i32)
string(i32 .. i64)
string(i32 / 0.5)
string(i32 / i64)
string(i32 < 0.5)
string(i32 < f32)
string(i32 < i)
string(i32 < i32)
string(i32 < i64)
string(i32 <= f64)
string(i32 <= i64)
string(i32 == 1)
string(i32 == f32)
string(i32 == f64)
string(i32 == i)
string(i32 == nil)
string(i32 > 1)
string(i32 > f64)
string(i32 >= 0.5)
string(i32 >= 1)
string(i32 >= f64)
string(i32 >= i)
string(i32 >= i64)
string(i32 ^ 1)
string(i32 ^ f64)
string(i32 ^ i32)
string(i32 ^ i64)
string(i32 in array)
string(i32 not in array)
string(i32)
string(i32) == type("bar")
string(i64 != 0.5)
string(i64 != 1)
string(i64 != i)
string(i64 != i32)
string(i64 != i64)
string(i64 != nil)
string(i64 % 1)
string(i64 % i64)
string(i64 * 1)
string(i64 * f32)
string(i64 * i32)
string(i64 * i64)
string(i64 ** 0.5)
string(i64 ** f32)
string(i64 ** i)
string(i64 ** i32)
string(i64 + 0.5)
string(i64 + f32)
string(i64 + f64)
string(i64 + i)
string(i64 + i32)
string(i64 - f32)
string(i64 - i)
string(i64 / 0.5)
string(i64 / 1)
string(i64 / f32)
string(i64 / f64)
string(i64 / i)
string(i64 / i64)
string(i64 < 1)
string(i64 <= 0.5)
string(i64 <= f32)
string(i64 <= i)
string(i64 <= i32)
string(i64 <= i64)
string(i64 == 1)
string(i64 == i)
string(i64 == i32)
string(i64 == nil)
string(i64 > 1)
string(i64 > f32)
string(i64 > f64)
string(i64 > i)
string(i64 > i32)
string(i64 > i64)
string(i64 >= f64)
string(i64 >= i64)
string(i64 ^ 0.5)
string(i64 ^ f64)
string(i64 ^ i)
string(i64 in array)
string(i64)
string(i64) >= foo.Bar
string(i64) not in foo
string(int(0.5))
string(int(1))
string(int(f32 - i))
string(int(f32))
string(int(f64))
string(int(i))
string(int(i32))
string(int(i64))
string(last(array))
string(last(list))
string(len(array))
string(len(list))
string(len(string("foo")))
string(list == array)
string(list == list)
string(list == nil)
string(list)
string(list) != toJSON(i64)
string(list[1])
string(list[i64])
string(list[i64].String)
string(lower("bar"))
string(lower("foo"))
string(map(array, "bar"))
string(map(array, #))
string(map(array, 0.5))
string(map(array, 1))
string(map(array, array))
string(map(array, div))
string(map(array, greet))
string(map(array, i))
string(map(array, i32))
string(map(array, ok))
string(map(array, true))
string(map(list, "bar"))
string(map(list, "foo"))
string(map(list, #))
string(map(list, 0.5))
string(map(list, 1))
string(map(list, add))
string(map(list, f32))
string(map(list, f64))
string(map(list, false))
string(map(list, greet))
string(map(list, i64))
string(map(list, list))
string(max(0.5))
string(max(1))
string(max(1, 0.5))
string(max(1, f32))
string(max(f32))
string(max(f64))
string(max(i))
string(max(i32))
string(max(i32, 1, i64))
string(max(i64))
string(min(0.5))
string(min(0.5, f64, f32))
string(min(1))
string(min(f32))
string(min(f64))
string(min(i))
string(min(i32))
string(min(i32, i64))
string(min(i64))
string(nil != "foo")
string(nil != 0.5)
string(nil != 1)
string(nil != array)
string(nil != div)
string(nil != f64)
string(nil != false)
string(nil != greet)
string(nil != i)
string(nil != i64)
string(nil != nil)
string(nil != score)
string(nil == "foo")
string(nil == 1)
string(nil == add)
string(nil == f32)
string(nil == f64)
string(nil == false)
string(nil == list)
string(nil == ok)
string(nil == true)
string(nil in array)
string(nil in list)
string(nil) > string(1)
string(nil) >= string(greet)
string(nil) in foo
string(none(array, ok))
string(none(list, true))
string(not false)
string(not ok)
string(not true)
string(ok && false)
string(ok && ok)
string(ok == nil)
string(ok == true)
string(ok ? 0.5 : "foo")
string(ok ? 0.5 : true)
string(ok ? true : i32)
string(ok or false)
string(ok or ok)
string(ok || ok)
string(ok)
string(one(array, false))
string(one(array, ok))
string(one(array, true))
string(one(list, true))
string(score != nil)
string(score == div)
string(score == nil)
string(score(1))
string(score(i))
string(score(score(i)))
string(score)
string(score) < string(ok)
string(score) not in foo
string(sort(array))
string(string("bar"))
string(string("foo"))
string(string(0.5))
string(string(1))
string(string(add))
string(string(array))
string(string(div))
string(string(f64))
string(string(false))
string(string(foo))
string(string(greet))
string(string(half))
string(string(i))
string(string(i32))
string(string(i64))
string(string(list))
string(string(nil))
string(string(ok))
string(string(score))
string(string(true))
string(toJSON("bar"))
string(toJSON("foo"))
string(toJSON(0.5))
string(toJSON(1))
string(toJSON(array))
string(toJSON(f32))
string(toJSON(f64))
string(toJSON(false))
string(toJSON(foo))
string(toJSON(i))
string(toJSON(i64))
string(toJSON(list))
string(toJSON(nil))
string(toJSON(ok))
string(toJSON(true))
string(trim("foo"))
string(trim(toJSON(0.5)))
string(trimPrefix("bar"))
string(trimPrefix("foo"))
string(trimPrefix(type(f32)))
string(trimSuffix("bar"))
string(true != true)
string(true == nil)
string(true == ok)
string(true ? 1 : true)
string(true ? array : f32)
string(true ? div : i64)
string(true ? i32 : "foo")
string(true ? i32 : greet)
string(true ? score : 0.5)
string(true ? true : i32)
string(true and false)
string(true or true)
string(true || false)
string(true) endsWith string(i64)
string(true) not in foo
string(type("foo"))
string(type(0.5))
string(type(1 < f64))
string(type(1))
string(type(add))
string(type(array))
string(type(div))
string(type(f32))
string(type(f64))
string(type(false))
string(type(foo))
string(type(half))
string(type(i))
string(type(i32))
string(type(i64))
string(type(list))
string(type(nil))
string(type(ok))
string(type(score(1)))
string(type(score))
string(type(true))
string(type(type(false)))
string(upper("bar"))
string(upper("foo"))
string({"bar": 0.5})
string({"bar": i32, "foo": i64})
string({"foo": f64})
string({"foo": true})
toBase64(foo.Bar)
toBase64(foo.String())
toBase64(foo?.Bar)
toBase64(foo?.String())
toBase64(greet("bar"))
toBase64(greet("foo"))
toBase64(greet(string(array)))
toBase64(lower("bar"))
toBase64(lower("foo"))
toBase64(lower(type(i32)))
toBase64(ok ? "foo" : 1)
toBase64(ok ? "foo" : foo)
toBase64(string("bar"))
toBase64(string("foo"))
toBase64(string(0.5))
toBase64(string(1))
toBase64(string(array))
toBase64(string(f32 <= i32))
toBase64(string(f32))
toBase64(string(f64))
toBase64(string(false))
toBase64(string(foo))
toBase64(string(greet))
toBase64(string(half))
toBase64(string(i))
toBase64(string(i32))
toBase64(string(i64))
toBase64(string(list))
toBase64(string(nil))
toBase64(string(ok))
toBase64(string(score))
toBase64(string(true))
toBase64(toBase64("bar"))
toBase64(toBase64("foo"))
toBase64(toJSON("bar"))
toBase64(toJSON("foo"))
toBase64(toJSON(0.5))
toBase64(toJSON(1))
toBase64(toJSON(array))
toBase64(toJSON(f32))
toBase64(toJSON(f64))
toBase64(toJSON(false))
toBase64(toJSON(foo))
toBase64(toJSON(i))
toBase64(toJSON(i32))
toBase64(toJSON(i64))
toBase64(toJSON(list))
toBase64(toJSON(nil))
toBase64(toJSON(ok))
toBase64(toJSON(true))
toBase64(trim("bar"))
toBase64(trim("foo"))
toBase64(trimPrefix("foo"))
toBase64(trimSuffix("bar"))
toBase64(trimSuffix("foo"))
toBase64(true ? "bar" : ok)
toBase64(type("bar"))
toBase64(type("foo"))
toBase64(type(0.5))
toBase64(type(1))
toBase64(type(add))
toBase64(type(array))
toBase64(type(div))
toBase64(type(f32))
toBase64(type(f64))
toBase64(type(false))
toBase64(type(foo))
toBase64(type(get(array, i)))
toBase64(type(greet))
toBase64(type(i))
toBase64(type(i32))
toBase64(type(i64))
toBase64(type(list))
toBase64(type(ok))
toBase64(type(true))
toBase64(upper("bar"))
toBase64(upper("foo"))
toBase64(upper(foo.Bar))
toJSON(!false)
toJSON(!ok)
toJSON(!true)
toJSON("bar" != "foo")
toJSON("bar" + "bar")
toJSON("bar" + "foo")
toJSON("bar" <= "foo")
toJSON("bar" >= "foo")
toJSON("bar" contains "bar")
toJSON("bar" matches "bar")
toJSON("bar" not matches "bar")
toJSON("bar" not matches "foo")
toJSON("foo" != "bar")
toJSON("foo" + "bar")
toJSON("foo" <= "bar")
toJSON("foo" == nil)
toJSON("foo" contains "bar")
toJSON("foo" matches "foo")
toJSON("foo" not in foo)
toJSON("foo" not matches "bar")
toJSON("foo") > foo?.Bar
toJSON("foo") not in foo
toJSON(-0.5)
toJSON(-1)
toJSON(-f32)
toJSON(-f64)
toJSON(-i)
toJSON(-i32)
toJSON(-i64)
toJSON(0.5 != 0.5)
toJSON(0.5 != 1)
toJSON(0.5 != f32)
toJSON(0.5 != f64)
toJSON(0.5 != i)
toJSON(0.5 != i32)
toJSON(0.5 * 0.5)
toJSON(0.5 * i)
toJSON(0.5 * i32)
toJSON(0.5 ** f64)
toJSON(0.5 ** i)
toJSON(0.5 ** i64)
toJSON(0.5 + 0.5)
toJSON(0.5 + f32)
toJSON(0.5 - 0.5)
toJSON(0.5 - 1)
toJSON(0.5 - f32)
toJSON(0.5 - f64)
toJSON(0.5 / 0.5)
toJSON(0.5 / 1)
toJSON(0.5 / f32)
toJSON(0.5 / f64)
toJSON(0.5 / i)
toJSON(0.5 / i32)
toJSON(0.5 / i64)
toJSON(0.5 < 0.5)
toJSON(0.5 < 1)
toJSON(0.5 < f32)
toJSON(0.5 < i)
toJSON(0.5 <= 1)
toJSON(0.5 <= f32)
toJSON(0.5 <= f64)
toJSON(0.5 <= i)
toJSON(0.5 == 0.5)
toJSON(0.5 == 1)
toJSON(0.5 == f32)
toJSON(0.5 == i)
toJSON(0.5 == i64)
toJSON(0.5 > 1)
toJSON(0.5 > f32)
toJSON(0.5 > f64)
toJSON(0.5 > i32)
toJSON(0.5 >= 0.5)
toJSON(0.5 >= 1)
toJSON(0.5 >= f32)
toJSON(0.5 >= f64)
toJSON(0.5 >= i)
toJSON(0.5 >= i32)
toJSON(0.5 >= i64)
toJSON(0.5 ^ 0.5)
toJSON(0.5 ^ 1)
toJSON(0.5 ^ f32)
toJSON(0.5 ^ f64)
toJSON(0.5 ^ i)
toJSON(0.5 ^ i32)
toJSON(0.5 ^ i64)
toJSON(0.5) contains "bar" ? "bar" : array
toJSON(1 != 0.5)
toJSON(1 != f32)
toJSON(1 != nil)
toJSON(1 % 1)
toJSON(1 % i32)
toJSON(1 * 0.5)
toJSON(1 * f32)
toJSON(1 * f64)
toJSON(1 * i32)
toJSON(1 * i64)
toJSON(1 ** 0.5)
toJSON(1 ** 1)
toJSON(1 ** f32)
toJSON(1 ** f64)
toJSON(1 ** i >= f64)
toJSON(1 ** i32)
toJSON(1 + 0.5)
toJSON(1 + f32)
toJSON(1 + f64)
toJSON(1 + i64)
toJSON(1 - 0.5)
toJSON(1 - 1)
toJSON(1 - f32)
toJSON(1 - f64)
toJSON(1 - i32)
toJSON(1 .. 1)
toJSON(1 .. i)
toJSON(1 .. i64)
toJSON(1 / 0.5)
toJSON(1 / 1)
toJSON(1 / f32)
toJSON(1 / i32)
toJSON(1 < 0.5)
toJSON(1 < 1)
toJSON(1 < f32)
toJSON(1 < f64)
toJSON(1 < i)
toJSON(1 <= 0.5)
toJSON(1 <= 1)
toJSON(1 <= i)
toJSON(1 <= i32)
toJSON(1 <= i64)
toJSON(1 == 0.5)
toJSON(1 == f32)
toJSON(1 == i)
toJSON(1 == i32)
toJSON(1 == i64)
toJSON(1 == nil)
toJSON(1 > 0.5)
toJSON(1 > f64)
toJSON(1 > i)
toJSON(1 > i32)
toJSON(1 > i64)
toJSON(1 >= 0.5)
toJSON(1 >= 1)
toJSON(1 >= f32)
toJSON(1 >= i32)
toJSON(1 ^ 0.5)
toJSON(1 ^ 1)
toJSON(1 ^ f32)
toJSON(1 ^ f64)
toJSON(1 ^ i32)
toJSON(1 ^ i64)
toJSON(1 in array)
toJSON(1) == nil == true
toJSON(1) in foo
toJSON(1) not in foo
toJSON(1) startsWith foo.String()
toJSON([1])
toJSON([i64])
toJSON(abs(0.5))
toJSON(abs(1))
toJSON(abs(f32))
toJSON(abs(f64))
toJSON(abs(i))
toJSON(abs(i32))
toJSON(abs(i64))
toJSON(add != nil)
toJSON(add != score)
toJSON(add == div)
toJSON(add == half)
toJSON(add == nil)
toJSON(add == score)
toJSON(all(list, false))
toJSON(all(list, ok))
toJSON(all(list, true))
toJSON(any(array, false))
toJSON(any(array, true))
toJSON(array != array)
toJSON(array != nil)
toJSON(array)
toJSON(array) != toJSON(ok)
toJSON(array) > "bar" != false
toJSON(array) endsWith greet("foo")
toJSON(array) endsWith string(i32)
toJSON(array) in foo
toJSON(array) not startsWith greet("foo")
toJSON(array[1:1])
toJSON(array[i32])
toJSON(array[i])
toJSON(count(array, false))
toJSON(count(array, ok))
toJSON(div != div)
toJSON(div != greet)
toJSON(div != score)
toJSON(div == div)
toJSON(div == half)
toJSON(div == nil)
toJSON(div == score)
toJSON(f32 != 1)
toJSON(f32 * 0.5)
toJSON(f32 * 1)
toJSON(f32 * f32)
toJSON(f32 * f64)
toJSON(f32 * i32)
toJSON(f32 ** f32)
toJSON(f32 ** i32)
toJSON(f32 ** i64)
toJSON(f32 + 1)
toJSON(f32 + i)
toJSON(f32 + i32)
toJSON(f32 - f64)
toJSON(f32 - i32)
toJSON(f32 / 0.5)
toJSON(f32 / 1)
toJSON(f32 < 0.5)
toJSON(f32 < f32)
toJSON(f32 < f64)
toJSON(f32 <= f32)
toJSON(f32 == 1)
toJSON(f32 == f64)
toJSON(f32 == i)
toJSON(f32 == nil)
toJSON(f32 > 0.5)
toJSON(f32 > f64)
toJSON(f32 > i)
toJSON(f32 >= 1)
toJSON(f32 >= f32)
toJSON(f32 ^ 0.5)
toJSON(f32 ^ 1)
toJSON(f32 ^ f64)
toJSON(f32 ^ i)
toJSON(f32 ^ i64)
toJSON(f32)
toJSON(f64 != 1)
toJSON(f64 != f32)
toJSON(f64 != f64)
toJSON(f64 != i)
toJSON(f64 != i32 / i32)
toJSON(f64 != i32)
toJSON(f64 != nil)
toJSON(f64 * 0.5)
toJSON(f64 * f64)
toJSON(f64 * i)
toJSON(f64 * i64)
toJSON(f64 ** 0.5)
toJSON(f64 ** f32)
toJSON(f64 ** i)
toJSON(f64 ** i64)
toJSON(f64 + 1)
toJSON(f64 + f32)
toJSON(f64 + i)
toJSON(f64 + i32)
toJSON(f64 - 1)
toJSON(f64 - f64)
toJSON(f64 - i)
toJSON(f64 - i32)
toJSON(f64 / 0.5)
toJSON(f64 / f32)
toJSON(f64 / i32)
toJSON(f64 < 1)
toJSON(f64 < f32)
toJSON(f64 < i32)
toJSON(f64 < i64)
toJSON(f64 <= 0.5)
toJSON(f64 <= 1)
toJSON(f64 <= i32)
toJSON(f64 == 1)
toJSON(f64 == i64)
toJSON(f64 == nil)
toJSON(f64 > 1)
toJSON(f64 > f64)
toJSON(f64 >= 0.5)
toJSON(f64 >= i64)
toJSON(f64 ^ 1)
toJSON(f64 ^ f64)
toJSON(f64 ^ i)
toJSON(f64)
toJSON(false != nil)
toJSON(false && false)
toJSON(false == false)
toJSON(false ? 0.5 : nil)
toJSON(false ? 1 : f32)
toJSON(false ? f32 : list)
toJSON(false ? false : i32)
toJSON(false ? greet : 1)
toJSON(false ? greet : i32)
toJSON(false ? nil : f64)
toJSON(false and ok)
toJSON(false and true)
toJSON(filter(array, ok))
toJSON(filter(list, false))
toJSON(filter(list, true))
toJSON(find(array, false))
toJSON(find(array, ok))
toJSON(findIndex(array, ok))
toJSON(findIndex(array, true))
toJSON(findIndex(list, ok))
toJSON(findIndex(list, true))
toJSON(findLast(array, false))
toJSON(findLast(list, true))
toJSON(findLastIndex(array, true))
toJSON(findLastIndex(list, false))
toJSON(findLastIndex(list, ok))
toJSON(first(array))
toJSON(first(list))
toJSON(float(0.5))
toJSON(float(1))
toJSON(float(f32))
toJSON(float(f64))
toJSON(float(i))
toJSON(float(i32))
toJSON(float(i64))
toJSON(foo != foo)
toJSON(foo != nil)
toJSON(foo == foo)
toJSON(foo == nil)
toJSON(foo in list)
toJSON(foo)
toJSON(foo.Bar)
toJSON(foo.String())
toJSON(foo?.Bar)
toJSON(foo?.String())
toJSON(get(array, 1))
toJSON(get(array, i64))
toJSON(get(list, 1))
toJSON(get(list, i))
toJSON(get(list, i64))
toJSON(greet != div)
toJSON(greet != greet)
toJSON(greet != half)
toJSON(greet == add)
toJSON(greet == div)
toJSON(greet == greet)
toJSON(greet == half)
toJSON(greet("bar"))
toJSON(greet("foo"))
toJSON(half != greet)
toJSON(half != nil)
toJSON(half != score)
toJSON(half == add)
toJSON(half == div)
toJSON(half == greet)
toJSON(half == nil)
toJSON(half == score)
toJSON(half(0.5))
toJSON(half(f64))
toJSON(i != 1)
toJSON(i != f32)
toJSON(i != i)
toJSON(i != i32)
toJSON(i % 1)
toJSON(i % i64)
toJSON(i * 0.5)
toJSON(i * 1)
toJSON(i * f32)
toJSON(i * i32)
toJSON(i ** 0.5)
toJSON(i ** f32)
toJSON(i ** i32)
toJSON(i + 0.5)
toJSON(i + 1)
toJSON(i + f32)
toJSON(i + f64)
toJSON(i + i)
toJSON(i - 1)
toJSON(i .. 1)
toJSON(i .. i)
toJSON(i / f32)
toJSON(i < i32)
toJSON(i < i64)
toJSON(i <= 1)
toJSON(i <= f32)
toJSON(i <= f64)
toJSON(i <= i)
toJSON(i <= i32)
toJSON(i == i32)
toJSON(i == i64)
toJSON(i == nil)
toJSON(i > 0.5)
toJSON(i > 1)
toJSON(i > f32)
toJSON(i >= 0.5)
toJSON(i >= 1)
toJSON(i >= f32)
toJSON(i >= i)
toJSON(i ^ 1)
toJSON(i ^ f64)
toJSON(i)
toJSON(i) != string(1)
toJSON(i32 != f32)
toJSON(i32 != i)
toJSON(i32 % 1)
toJSON(i32 % i64)
toJSON(i32 * i)
toJSON(i32 * i64)
toJSON(i32 ** i64)
toJSON(i32 + f64)
toJSON(i32 + i)
toJSON(i32 + i32)
toJSON(i32 + i64)
toJSON(i32 - 0.5)
toJSON(i32 - 1)
toJSON(i32 - f32)
toJSON(i32 - f64)
toJSON(i32 - i)
toJSON(i32 .. i)
toJSON(i32 .. i64)
toJSON(i32 / 0.5)
toJSON(i32 / f32)
toJSON(i32 / i)
toJSON(i32 / i64)
toJSON(i32 < 0.5)
toJSON(i32 < f32)
toJSON(i32 <= 0.5)
toJSON(i32 <= i32)
toJSON(i32 == 1)
toJSON(i32 == f32)
toJSON(i32 == i)
toJSON(i32 == nil ? i32 : i32)
toJSON(i32 == nil)
toJSON(i32 > 0.5)
toJSON(i32 > f64)
toJSON(i32 > i)
toJSON(i32 >= 0.5)
toJSON(i32 >= 1)
toJSON(i32 >= f32)
toJSON(i32 >= f64)
toJSON(i32 >= i)
toJSON(i32 ^ 1)
toJSON(i32 ^ f64)
toJSON(i32 ^ i)
toJSON(i32 in array)
toJSON(i32 not in array)
toJSON(i32)
toJSON(i32) < string(i64)
toJSON(i64 != 0.5)
toJSON(i64 != 1)
toJSON(i64 != f32)
toJSON(i64 != i)
toJSON(i64 != i32)
toJSON(i64 != nil)
toJSON(i64 % 1)
toJSON(i64 % i)
toJSON(i64 % i32)
toJSON(i64 % i64)
toJSON(i64 * i)
toJSON(i64 + 0.5)
toJSON(i64 + i)
toJSON(i64 + i64)
toJSON(i64 - 0.5)
toJSON(i64 - 1)
toJSON(i64 - i64)
toJSON(i64 .. 1)
toJSON(i64 / 1)
toJSON(i64 / f32)
toJSON(i64 / i)
toJSON(i64 / i64)
toJSON(i64 < 0.5)
toJSON(i64 < i32)
toJSON(i64 <= 0.5)
toJSON(i64 <= 1)
toJSON(i64 <= f32)
toJSON(i64 <= i64)
toJSON(i64 == 0.5)
toJSON(i64 == 1)
toJSON(i64 == i32)
toJSON(i64 == nil)
toJSON(i64 > f32)
toJSON(i64 > i)
toJSON(i64 >= 0.5)
toJSON(i64 >= 1)
toJSON(i64 >= i64)
toJSON(i64 ^ i)
toJSON(i64)
toJSON(int(0.5))
toJSON(int(1))
toJSON(int(f32))
toJSON(int(f64))
toJSON(int(i))
toJSON(int(i32))
toJSON(last(list))
toJSON(len("bar"))
toJSON(len("foo"))
toJSON(len(array))
toJSON(len(list))
toJSON(list != list)
toJSON(list == nil)
toJSON(list)
toJSON(list) <= foo?.Bar
toJSON(list[1])
toJSON(list[i32])
toJSON(list[i64:1])
toJSON(list[i64])
toJSON(list[i])
toJSON(lower("bar"))
toJSON(lower("foo"))
toJSON(map(array, #))
toJSON(map(array, 0.5))
toJSON(map(array, 1))
toJSON(map(array, false))
toJSON(map(array, i))
toJSON(map(array, i32))
toJSON(map(array, list))
toJSON(map(array, true))
toJSON(map(list, "foo"))
toJSON(map(list, #))
toJSON(map(list, 1))
toJSON(map(list, f32))
toJSON(map(list, f64))
toJSON(map(list, list))
toJSON(max(0.5))
toJSON(max(1))
toJSON(max(f32))
toJSON(max(f64))
toJSON(max(i))
toJSON(max(i32))
toJSON(max(i64))
toJSON(min(0.5))
toJSON(min(0.5, f32))
toJSON(min(1))
toJSON(min(1, 1))
toJSON(min(f32))
toJSON(min(f64))
toJSON(min(i))
toJSON(min(i32) / f32)
toJSON(min(i32))
toJSON(min(i64))
toJSON(nil != "bar")
toJSON(nil != "foo")
toJSON(nil != 0.5)
toJSON(nil != add)
toJSON(nil != f32)
toJSON(nil != f64)
toJSON(nil != foo)
toJSON(nil != i32)
toJSON(nil != list)
toJSON(nil != nil)
toJSON(nil != score)
toJSON(nil != true)
toJSON(nil == 0.5)
toJSON(nil == 1)
toJSON(nil == add)
toJSON(nil == div)
toJSON(nil == f32)
toJSON(nil == f64)
toJSON(nil == false)
toJSON(nil == foo)
toJSON(nil == i)
toJSON(nil == i64)
toJSON(nil == list)
toJSON(nil == ok)
toJSON(nil == score)
toJSON(nil == true)
toJSON(nil in array)
toJSON(nil not in array)
toJSON(nil not in list)
toJSON(nil) + string("bar")
toJSON(nil) == toJSON(1)
toJSON(nil) == type(nil)
toJSON(nil) in foo
toJSON(none(array, true))
toJSON(none(list, true))
toJSON(not ("foo" not in foo))
toJSON(not false)
toJSON(not ok)
toJSON(not true)
toJSON(ok != false)
toJSON(ok != nil)
toJSON(ok != ok)
toJSON(ok && true)
toJSON(ok == nil)
toJSON(ok == ok)
toJSON(ok ? 1 : half)
toJSON(ok ? f32 : div)
toJSON(ok ? false : i32)
toJSON(ok ? nil : f32)
toJSON(ok or true)
toJSON(ok || ok)
toJSON(ok)
toJSON(one(array, i32 < #))
toJSON(score != div)
toJSON(score != greet)
toJSON(score != nil)
toJSON(score != score)
toJSON(score == add)
toJSON(score == div)
toJSON(score == nil)
toJSON(score(1))
toJSON(score(i))
toJSON(score(i, i))
toJSON(string("bar"))
toJSON(string("foo"))
toJSON(string(0.5))
toJSON(string(1))
toJSON(string(array))
toJSON(string(div))
toJSON(string(f32))
toJSON(string(f64))
toJSON(string(false))
toJSON(string(foo))
toJSON(string(greet))
toJSON(string(half))
toJSON(string(i))
toJSON(string(i32))
toJSON(string(i64))
toJSON(string(list))
toJSON(string(nil))
toJSON(string(ok))
toJSON(string(score))
toJSON(toBase64("bar"))
toJSON(toBase64("foo"))
toJSON(toJSON("bar"))
toJSON(toJSON("foo"))
toJSON(toJSON(1))
toJSON(toJSON(array))
toJSON(toJSON(f32))
toJSON(toJSON(f64))
toJSON(toJSON(false))
toJSON(toJSON(foo))
toJSON(toJSON(i))
toJSON(toJSON(i32))
toJSON(toJSON(i64))
toJSON(toJSON(list))
toJSON(toJSON(nil))
toJSON(toJSON(ok))
toJSON(toJSON(true))
toJSON(trim("bar"))
toJSON(trim("foo"))
toJSON(trimPrefix("foo"))
toJSON(trimSuffix("foo"))
toJSON(true && true)
toJSON(true ? array : nil)
toJSON(true ? i32 : div)
toJSON(true ? list : true)
toJSON(true ? nil : array)
toJSON(true ? ok : list)
toJSON(true ? true : f64)
toJSON(true and ok)
toJSON(true) in foo
toJSON(type("bar"))
toJSON(type("foo"))
toJSON(type(0.5))
toJSON(type(1))
toJSON(type(add))
toJSON(type(array))
toJSON(type(f32))
toJSON(type(f64))
toJSON(type(false))
toJSON(type(foo))
toJSON(type(greet))
toJSON(type(half))
toJSON(type(i))
toJSON(type(i32))
toJSON(type(i64))
toJSON(type(list))
toJSON(type(nil))
toJSON(type(ok))
toJSON(type(score))
toJSON(type(true))
toJSON(upper("bar"))
toJSON(upper("foo"))
toJSON({"bar": 0.5, "bar": array})
toJSON({"foo": "foo"})
toJSON({"foo": 0.5})
toJSON({"foo": nil})
toJSON({"foo": ok, "bar": 0.5})
trim("bar") in foo
trim("foo" + "foo")
trim(false ? greet : "bar")
trim(foo.Bar)
trim(foo.String())
trim(foo?.Bar)
trim(foo?.String())
trim(greet("bar"))
trim(greet("foo"))
trim(lower("bar"))
trim(lower(toJSON(0.5)))
trim(ok ? "bar" : i32)
trim(string("foo"))
trim(string(0.5))
trim(string(1))
trim(string(add))
trim(string(div))
trim(string(f32))
trim(string(f64))
trim(string(false))
trim(string(foo))
trim(string(greet))
trim(string(half))
trim(string(i))
trim(string(i32))
trim(string(i64))
trim(string(list))
trim(string(nil))
trim(string(ok))
trim(string(score))
trim(string(true))
trim(toBase64("bar"))
trim(toBase64("foo"))
trim(toJSON("foo"))
trim(toJSON(0.5))
trim(toJSON(1))
trim(toJSON(array))
trim(toJSON(f32))
trim(toJSON(f64))
trim(toJSON(false))
trim(toJSON(foo))
trim(toJSON(i))
trim(toJSON(i32))
trim(toJSON(i64))
trim(toJSON(list))
trim(toJSON(nil))
trim(toJSON(ok))
trim(toJSON(true))
trim(trim("bar"))
trim(trimPrefix("bar"))
trim(trimPrefix("foo"))
trim(trimPrefix(string(i)))
trim(trimSuffix("bar"))
trim(trimSuffix("foo"))
trim(type("foo"))
trim(type(0.5))
trim(type(1))
trim(type(add))
trim(type(array))
trim(type(div))
trim(type(f32))
trim(type(f64))
trim(type(false))
trim(type(foo))
trim(type(greet))
trim(type(half))
trim(type(i))
trim(type(i32))
trim(type(i64))
trim(type(list))
trim(type(nil != list))
trim(type(nil))
trim(type(ok))
trim(type(score))
trim(type(toJSON(1)))
trim(type(true))
trim(upper("bar"))
trimPrefix("foo" + "foo")
trimPrefix(foo.Bar)
trimPrefix(foo.String())
trimPrefix(foo?.Bar)
trimPrefix(foo?.String())
trimPrefix(greet("bar"))
trimPrefix(greet("foo"))
trimPrefix(greet(foo.String()))
trimPrefix(lower("bar"))
trimPrefix(lower("foo"))
trimPrefix(ok ? "bar" : i64)
trimPrefix(string("foo"))
trimPrefix(string(0.5))
trimPrefix(string(1))
trimPrefix(string(add))
trimPrefix(string(array))
trimPrefix(string(div))
trimPrefix(string(f32))
trimPrefix(string(foo))
trimPrefix(string(greet))
trimPrefix(string(half))
trimPrefix(string(i))
trimPrefix(string(i32))
trimPrefix(string(i64))
trimPrefix(string(list))
trimPrefix(string(nil))
trimPrefix(string(ok))
trimPrefix(string(score))
trimPrefix(toBase64("bar"))
trimPrefix(toBase64("foo"))
trimPrefix(toJSON("bar"))
trimPrefix(toJSON("foo"))
trimPrefix(toJSON(0.5))
trimPrefix(toJSON(1))
trimPrefix(toJSON(array))
trimPrefix(toJSON(f32))
trimPrefix(toJSON(f64))
trimPrefix(toJSON(false))
trimPrefix(toJSON(foo))
trimPrefix(toJSON(i))
trimPrefix(toJSON(i32))
trimPrefix(toJSON(i64))
trimPrefix(toJSON(nil))
trimPrefix(toJSON(true))
trimPrefix(trim("bar"))
trimPrefix(trim("foo"))
trimPrefix(trimPrefix("bar"))
trimPrefix(trimPrefix("foo"))
trimPrefix(trimSuffix("bar"))
trimPrefix(trimSuffix("foo"))
trimPrefix(type("bar"))
trimPrefix(type(0.5 == 0.5))
trimPrefix(type(0.5))
trimPrefix(type(1 == f64))
trimPrefix(type(1))
trimPrefix(type(add))
trimPrefix(type(array))
trimPrefix(type(div))
trimPrefix(type(f32))
trimPrefix(type(f64))
trimPrefix(type(false))
trimPrefix(type(foo))
trimPrefix(type(greet))
trimPrefix(type(half))
trimPrefix(type(i))
trimPrefix(type(i32))
trimPrefix(type(i64))
trimPrefix(type(list))
trimPrefix(type(nil))
trimPrefix(type(ok))
trimPrefix(type(score))
trimPrefix(upper("foo"))
trimSuffix("bar" + "bar")
trimSuffix("foo") <= trimPrefix("foo")
trimSuffix(foo.Bar)
trimSuffix(foo.String())
trimSuffix(foo?.Bar)
trimSuffix(foo?.Qux("bar"))
trimSuffix(foo?.String())
trimSuffix(greet("bar"))
trimSuffix(greet("foo"))
trimSuffix(greet(toJSON(i64)))
trimSuffix(lower("bar"))
trimSuffix(lower("foo"))
trimSuffix(repeat("foo", i))
trimSuffix(string("bar"))
trimSuffix(string(0.5))
trimSuffix(string(1))
trimSuffix(string(add))
trimSuffix(string(array))
trimSuffix(string(f32))
trimSuffix(string(f64))
trimSuffix(string(false))
trimSuffix(string(foo))
trimSuffix(string(greet))
trimSuffix(string(half))
trimSuffix(string(i))
trimSuffix(string(i32))
trimSuffix(string(i64))
trimSuffix(string(list))
trimSuffix(string(nil))
trimSuffix(string(score))
trimSuffix(string(type("foo")))
trimSuffix(toBase64("bar"))
trimSuffix(toJSON("bar"))
trimSuffix(toJSON(0.5))
trimSuffix(toJSON(1))
trimSuffix(toJSON(array))
trimSuffix(toJSON(f64))
trimSuffix(toJSON(false))
trimSuffix(toJSON(first(array)))
trimSuffix(toJSON(foo))
trimSuffix(toJSON(i))
trimSuffix(toJSON(i32))
trimSuffix(toJSON(i64))
trimSuffix(toJSON(list))
trimSuffix(toJSON(nil))
trimSuffix(toJSON(ok))
trimSuffix(trim("bar"))
trimSuffix(trim("foo"))
trimSuffix(trimPrefix("bar"))
trimSuffix(trimPrefix("foo"))
trimSuffix(trimSuffix("foo"))
trimSuffix(type("bar"))
trimSuffix(type("foo"))
trimSuffix(type(0.5))
trimSuffix(type(1))
trimSuffix(type(add))
trimSuffix(type(array))
trimSuffix(type(div))
trimSuffix(type(f32))
trimSuffix(type(f64))
trimSuffix(type(false))
trimSuffix(type(foo))
trimSuffix(type(half))
trimSuffix(type(i))
trimSuffix(type(i32))
trimSuffix(type(i64))
trimSuffix(type(list))
trimSuffix(type(nil))
trimSuffix(type(ok))
trimSuffix(type(true))
trimSuffix(upper("bar"))
trimSuffix(upper("foo"))
true != nil || true != nil
true == nil && ok
true ? "bar" : 0.5 ^ i
true ? "bar" : 1 <= 1 / 1
true ? "bar" : i != i32
true ? "foo" : foo?.Bar
true ? 0.5 : foo.Qux
true ? 1 : f64 + f32
true ? 1 : nil == array
true ? array : foo.Qux
true ? array : foo.String
true ? array : i32 / i32
true ? array : nil != map(list, #)
true ? array : nil != ok
true ? f32 : f64 == i32
true ? f64 : foo?.String
true ? greet : 0.5 == i
true ? i : 0.5 + i64
true ? i : 0.5 >= i64
true ? i32 : foo.Bar
true ? i64 : foo.Bar
true ? list : f64 / f64
true ? nil : 0.5 != i32
true ? nil : foo.Qux
true ? nil : foo.String
true ? nil : i32 .. i
true ? nil : i64 ** -i
true ? ok : f32 / f32
true ? ok : f64 + f64
true ? score : foo.Qux
true ? true : f32 >= i64
true ? true : foo?.String
true and ok and ok
true || 1 not in array
type(!false)
type(!ok)
type(!true)
type("bar" != nil)
type("bar" + "foo")
type("bar" < "bar")
type("bar" <= "bar")
type("bar" <= "foo")
type("bar" == nil)
type("bar" > "foo")
type("bar" endsWith "foo")
type("bar" matches "bar")
type("bar" matches "foo")
type("bar" not contains "bar")
type("bar" not endsWith "bar")
type("bar" not endsWith "foo")
type("bar" startsWith "foo")
type("bar") == string(array)
type("foo" != "bar")
type("foo" == "foo")
type("foo" > "bar")
type("foo" contains "foo")
type("foo" endsWith "foo")
type("foo" in foo)
type("foo" not endsWith "bar")
type("foo" not endsWith "foo")
type("foo" startsWith "foo")
type("foo" startsWith foo.Bar)
type(-0.5)
type(-1)
type(-f32)
type(-f64)
type(-i)
type(-i32)
type(-i64)
type(0.5 != 0.5)
type(0.5 != 1)
type(0.5 != i)
type(0.5 != i32)
type(0.5 != nil)
type(0.5 * 0.5)
type(0.5 * 1)
type(0.5 * i)
type(0.5 * i32)
type(0.5 * i64)
type(0.5 ** 0.5)
type(0.5 ** 1)
type(0.5 ** f32)
type(0.5 ** i)
type(0.5 ** i32)
type(0.5 ** i64)
type(0.5 + f32)
type(0.5 + i32)
type(0.5 + i64)
type(0.5 - 0.5)
type(0.5 - i)
type(0.5 / 0.5)
type(0.5 / 1)
type(0.5 / f64)
type(0.5 / i)
type(0.5 < 1)
type(0.5 < f64)
type(0.5 < i)
type(0.5 < i64)
type(0.5 <= 1)
type(0.5 <= f32)
type(0.5 <= i)
type(0.5 <= i64)
type(0.5 == 1)
type(0.5 == i)
type(0.5 == nil)
type(0.5 > 0.5)
type(0.5 > 1)
type(0.5 > f64)
type(0.5 > i)
type(0.5 >= 0.5)
type(0.5 >= 1)
type(0.5 >= f64)
type(0.5 >= i)
type(0.5 >= i32)
type(0.5 ^ 0.5)
type(0.5 ^ 1)
type(0.5 ^ f32)
type(0.5 ^ f64)
type(0.5 ^ i)
type(0.5) not contains trimPrefix("bar")
type(0.5) not in foo
type(0.5) startsWith "bar" == nil
type(0.5)[i32:i64]
type(1 != 0.5)
type(1 != 1)
type(1 != f32)
type(1 != i32)
type(1 != nil)
type(1 % 1)
type(1 % i)
type(1 % i32)
type(1 % i64)
type(1 * 1)
type(1 * f32)
type(1 * i)
type(1 * i64)
type(1 ** 0.5)
type(1 ** 1)
type(1 ** f64)
type(1 ** i32)
type(1 ** i64)
type(1 + 0.5)
type(1 + f32)
type(1 + f64)
type(1 + i64)
type(1 - 0.5)
type(1 - 1)
type(1 - f64)
type(1 - i32)
type(1 .. 1)
type(1 .. i)
type(1 .. i64)
type(1 / 1)
type(1 / f32)
type(1 / f64)
type(1 < 1)
type(1 < f32)
type(1 < i)
type(1 <= f32)
type(1 <= f64)
type(1 <= i32)
type(1 <= i64)
type(1 == 1)
type(1 == i)
type(1 == i64)
type(1 == nil)
type(1 > 0.5)
type(1 > 1)
type(1 > f32)
type(1 > f64)
type(1 >= 0.5)
type(1 >= 1)
type(1 >= f64)
type(1 >= i)
type(1 >= i32)
type(1 >= i64)
type(1 ^ 0.5)
type(1 ^ f32)
type(1 ^ i64)
type(1 in array)
type(1 not in array)
type(1) != toJSON(0.5)
type(1) == nil ? 1 : f64
type(1) endsWith greet("foo")
type(1) in foo
type(1) in foo != true
type(1) not contains type(nil)
type(1) not endsWith toJSON(ok)
type([half, 1])
type([nil])
type(abs(0.5))
type(abs(1))
type(abs(f64))
type(abs(i))
type(abs(i32))
type(abs(i64))
type(add != add)
type(add != greet)
type(add != half)
type(add == half)
type(add == nil)
type(add(1, 1))
type(add)
type(add) in foo
type(all(array, true))
type(all(list, false))
type(any(array, false))
type(any(list, true))
type(array == array)
type(array == list)
type(array)
type(array) in foo
type(array) not in foo
type(array[1])
type(array[i32])
type(array[i])
type(count(list, ok))
type(count(list, true))
type(div != div)
type(div != half)
type(div != nil)
type(div == add)
type(div == greet)
type(div == half)
type(div)
type(div) not in foo
type(f32 != 0.5)
type(f32 != 1)
type(f32 != f32)
type(f32 != i32)
type(f32 * 0.5)
type(f32 * 1)
type(f32 * f32)
type(f32 * f64)
type(f32 * i)
type(f32 * i64)
type(f32 ** 0.5)
type(f32 ** 1)
type(f32 ** f32)
type(f32 ** i)
type(f32 ** i32)
type(f32 + 0.5)
type(f32 + 1)
type(f32 + f64)
type(f32 + i)
type(f32 + i64)
type(f32 - 0.5)
type(f32 - 1)
type(f32 - f32)
type(f32 - i)
type(f32 - i32)
type(f32 - i64)
type(f32 < 1)
type(f32 < f64)
type(f32 < i32)
type(f32 <= 0.5)
type(f32 <= 1)
type(f32 <= i64)
type(f32 == 0.5)
type(f32 == 1)
type(f32 == i32)
type(f32 > 1)
type(f32 > f32)
type(f32 > f64)
type(f32 >= 0.5)
type(f32 ^ 0.5)
type(f32 ^ f32)
type(f32 ^ f64)
type(f32 ^ i32)
type(f32 ^ i64)
type(f32)
type(f64 != f64)
type(f64 != i64)
type(f64 * 0.5)
type(f64 * 1)
type(f64 * i32)
type(f64 * i64)
type(f64 ** 0.5)
type(f64 ** 1)
type(f64 ** f32)
type(f64 ** i)
type(f64 ** i32)
type(f64 + 0.5)
type(f64 + f64)
type(f64 + i)
type(f64 - 0.5)
type(f64 - f32)
type(f64 - f64)
type(f64 - i)
type(f64 / 1)
type(f64 / i)
type(f64 < 0.5)
type(f64 < 1)
type(f64 < f64)
type(f64 < i64)
type(f64 <= 0.5)
type(f64 <= i)
type(f64 <= i32)
type(f64 == 1)
type(f64 == f64)
type(f64 == nil)
type(f64 > 1)
type(f64 > f64)
type(f64 > i)
type(f64 > i32)
type(f64 >= 0.5)
type(f64 >= 1)
type(f64 ^ 1)
type(f64 ^ f64)
type(f64 ^ i)
type(f64 ^ i32)
type(f64 ^ i64)
type(f64)
type(false != nil)
type(false && true)
type(false == ok)
type(false ? add : div)
type(false ? half : i)
type(false ? half : i32)
type(false ? i32 : 1)
type(false ? i32 : true)
type(false ? list : "foo")
type(false || ok)
type(false) not contains toJSON(i)
type(filter(array, true))
type(filter(list, false))
type(find([f64], "foo" == nil))
type(find(array, false))
type(find(list, false))
type(findIndex(array, false))
type(findIndex(list, ok))
type(findIndex(list, true))
type(findLast(array, false))
type(findLast(array, ok))
type(findLast(list, false))
type(findLastIndex(array, ok))
type(findLastIndex(array, true))
type(findLastIndex(list, ok))
type(first(array))
type(first(list))
type(float(0.5))
type(float(1))
type(float(f32))
type(float(f64))
type(float(i))
type(float(i32))
type(float(i64))
type(foo != foo)
type(foo in list)
type(foo)
type(foo) in foo
type(foo.Bar)
type(foo.Qux)
type(foo.String())
type(foo.String)
type(foo?.Bar)
type(foo?.Qux)
type(foo?.String())
type(foo?.String)
type(get(array, 1))
type(get(array, i))
type(get(array, i32))
type(get(list, 1))
type(get(list, i32))
type(greet != div)
type(greet != half)
type(greet != score)
type(greet == div)
type(greet == greet)
type(greet == half)
type(greet("bar"))
type(greet("foo"))
type(greet(lower("foo")))
type(greet)
type(greet) not in foo
type(half != add)
type(half != nil)
type(half == add)
type(half == div)
type(half(0.5))
type(half(f64))
type(half)
type(half) endsWith toJSON(1)
type(i != 0.5)
type(i != 1)
type(i != f32)
type(i != i64)
type(i % 1)
type(i * 0.5)
type(i * i64)
type(i ** 0.5)
type(i ** 1)
type(i ** f32)
type(i ** f64)
type(i ** i)
type(i ** i32)
type(i + 1)
type(i + i)
type(i + i32)
type(i .. i64)
type(i / 0.5)
type(i / 1)
type(i < f32)
type(i < i64)
type(i == f32)
type(i == i32)
type(i == i64)
type(i > f64)
type(i >= 1)
type(i >= f32)
type(i >= f64)
type(i ^ 0.5)
type(i ^ 1)
type(i ^ f32)
type(i ^ f64)
type(i ^ i64)
type(i not in array)
type(i)
type(i) not endsWith greet("foo")
type(i32 != 0.5)
type(i32 != 1)
type(i32 != nil)
type(i32 % 1)
type(i32 % i64)
type(i32 * 0.5)
type(i32 * 1)
type(i32 * i32)
type(i32 * i64)
type(i32 ** f32)
type(i32 ** f64)
type(i32 ** i)
type(i32 + 1)
type(i32 + f32)
type(i32 + f64)
type(i32 + i)
type(i32 + i32)
type(i32 + i64)
type(i32 - f32)
type(i32 - i32)
type(i32 .. 1)
type(i32 .. i)
type(i32 / f64)
type(i32 / i32)
type(i32 < 1)
type(i32 < f32)
type(i32 < i)
type(i32 < i64)
type(i32 <= f64)
type(i32 <= i32)
type(i32 <= i64)
type(i32 == 0.5)
type(i32 == 1)
type(i32 == f32)
type(i32 == f64)
type(i32 == i)
type(i32 == i64)
type(i32 > 0.5)
type(i32 > 1)
type(i32 > f64)
type(i32 > i32)
type(i32 >= 1)
type(i32 >= f32)
type(i32 >= i)
type(i32 >= i32)
type(i32 ^ 0.5)
type(i32 ^ i)
type(i32 ^ i32)
type(i32 ^ i64)
type(i32 in array)
type(i32)
type(i32) startsWith greet("foo")
type(i64 != 1)
type(i64 != array[i32])
type(i64 != f32)
type(i64 != i)
type(i64 != nil)
type(i64 % i)
type(i64 % i64)
type(i64 * 0.5)
type(i64 * f32)
type(i64 * f64)
type(i64 * i64)
type(i64 ** 1)
type(i64 + 0.5)
type(i64 + f64)
type(i64 + i)
type(i64 + i64)
type(i64 - 0.5)
type(i64 .. 1)
type(i64 .. i32)
type(i64 .. i64)
type(i64 / 0.5)
type(i64 / 1)
type(i64 / i)
type(i64 / i64)
type(i64 < 1)
type(i64 < f64)
type(i64 < i)
type(i64 < i64)
type(i64 <= 1)
type(i64 <= f32)
type(i64 <= i64)
type(i64 == i32)
type(i64 == nil)
type(i64 > f64)
type(i64 >= 0.5)
type(i64 >= f32)
type(i64 >= i)
type(i64 >= i64)
type(i64 ^ 0.5)
type(i64 ^ 1)
type(i64 ^ f32)
type(i64 ^ f64)
type(i64 ^ i)
type(i64 ^ i32)
type(i64 in array)
type(i64 not in array)
type(i64)
type(i64) != foo?.Bar
type(i64) contains string(foo) ? i : array
type(i64) not in foo
type(i64) not startsWith lower("foo")
type(int(0.5))
type(int(1))
type(int(f32))
type(int(f64))
type(int(i))
type(int(i32))
type(int(i64) <= f32)
type(int(i64))
type(last(array))
type(last(list))
type(len("bar"))
type(len("foo"))
type(len(array))
type(len(list))
type(list == array)
type(list == nil)
type(list)
type(list[1])
type(list[i32])
type(list[i64])
type(list[i])
type(lower("bar"))
type(lower("foo"))
type(lower(string(nil)))
type(map(array, "foo"))
type(map(array, #))
type(map(array, 0.5))
type(map(array, add))
type(map(array, array))
type(map(array, false))
type(map(array, foo))
type(map(array, half))
type(map(array, i))
type(map(array, i64))
type(map(array, ok))
type(map(i .. i32, i64))
type(map(list, #))
type(map(list, 0.5))
type(map(list, 1))
type(map(list, array))
type(map(list, f32))
type(map(list, f64))
type(map(list, foo))
type(map(list, greet))
type(map(list, i))
type(map(list, list))
type(map(list, ok))
type(max(0.5))
type(max(1))
type(max(f32))
type(max(f32, i32))
type(max(f64))
type(max(f64, 0.5))
type(max(i))
type(max(i32))
type(max(i32, i64))
type(max(i64))
type(min(0.5))
type(min(1))
type(min(1, 0.5))
type(min(1, 1, f32))
type(min(f32))
type(min(f64))
type(min(i))
type(min(i, 1))
type(min(i32))
type(min(i32, 0.5))
type(min(i64))
type(nil != "bar")
type(nil != 0.5)
type(nil != 1)
type(nil != div)
type(nil != f64)
type(nil != false)
type(nil != foo)
type(nil != greet)
type(nil != i32)
type(nil != nil)
type(nil != ok)
type(nil == "bar")
type(nil == "foo")
type(nil == 0.5)
type(nil == 1)
type(nil == add)
type(nil == array)
type(nil == f32)
type(nil == f64)
type(nil == i)
type(nil == i32)
type(nil == nil)
type(nil == ok)
type(nil == score)
type(nil == true)
type(nil in array)
type(nil not in array)
type(nil) != type(1)
type(none(array, ok))
type(none(array, true))
type(none(list, ok))
type(none(list, true))
type(not false)
type(not ok)
type(not true)
type(ok != nil)
type(ok == false)
type(ok ? 0.5 : i32)
type(ok ? 0.5 : list)
type(ok ? 1 : f32)
type(ok ? add : "bar")
type(ok ? false : i64)
type(ok ? foo : false)
type(ok ? half : half)
type(ok ? i32 : f64)
type(ok ? i64 : "bar")
type(ok ? list : "foo")
type(ok ? ok : half)
type(ok ? true : false)
type(ok and ok)
type(ok and true)
type(ok or false)
type(ok or true)
type(ok || true)
type(ok)
type(ok) in foo
type(ok) not matches string(i64)
type(ok) not startsWith lower("bar")
type(score != div)
type(score != greet)
type(score != half)
type(score != nil)
type(score == add)
type(score == foo.String)
type(score == greet)
type(score == half)
type(score == nil)
type(score == score)
type(score(1))
type(score(i))
type(score(i, 1))
type(score)
type(score) < foo?.Bar
type(score) > string(score)
type(score) in foo
type(score) not contains type(1)
type(sort(array))
type(string("bar"))
type(string("foo"))
type(string(0.5))
type(string(1))
type(string(add))
type(string(array))
type(string(div))
type(string(f64))
type(string(false))
type(string(foo))
type(string(greet))
type(string(half))
type(string(i <= i32))
type(string(i))
type(string(i64))
type(string(list))
type(string(nil))
type(string(ok))
type(string(score))
type(toBase64("foo"))
type(toJSON("bar"))
type(toJSON("foo"))
type(toJSON(0.5 < i))
type(toJSON(0.5))
type(toJSON(1))
type(toJSON(array))
type(toJSON(f32))
type(toJSON(f64))
type(toJSON(false))
type(toJSON(foo))
type(toJSON(i32))
type(toJSON(i64))
type(toJSON(list))
type(toJSON(nil))
type(toJSON(ok))
type(toJSON(true))
type(trim("bar"))
type(trim("foo"))
type(trimPrefix("foo"))
type(trimPrefix(toJSON(true)))
type(trimSuffix("bar"))
type(true == false)
type(true == nil)
type(true ? "bar" : 0.5)
type(true ? div : 0.5)
type(true ? f64 : array)
type(true ? foo : foo)
type(true ? foo : true)
type(true ? greet : "foo")
type(true ? list : ok)
type(true ? nil : list)
type(true ? nil : ok)
type(true ? true : 1)
type(true and true)
type(true) endsWith toBase64("foo")
type(type("bar"))
type(type("foo"))
type(type(0.5))
type(type(1))
type(type(add))
type(type(array))
type(type(div))
type(type(f32))
type(type(f64))
type(type(false))
type(type(foo))
type(type(half))
type(type(i))
type(type(i32))
type(type(i64))
type(type(list))
type(type(nil))
type(type(ok))
type(type(score))
type(type(true))
type(upper("bar"))
type(upper("foo"))
type({"bar": 0.5})
type({"bar": 1})
type({"bar": greet})
type({"foo": 0.5, "bar": foo})
type({"foo": div})
type({"foo": i64})
type({"foo": nil})
upper("bar" + "foo")
upper("bar") <= type(nil)
upper("bar") contains lower("foo")
upper("foo" + "bar")
upper(false ? 0.5 : "foo")
upper(foo.Bar)
upper(foo.String())
upper(foo?.Bar)
upper(foo?.String())
upper(greet("foo"))
upper(greet(string(ok)))
upper(lower("bar"))
upper(ok ? "bar" : i)
upper(string("bar"))
upper(string("foo"))
upper(string(0.5))
upper(string(1))
upper(string(array))
upper(string(div))
upper(string(f32))
upper(string(f64))
upper(string(foo))
upper(string(greet))
upper(string(half))
upper(string(i))
upper(string(i32))
upper(string(i64))
upper(string(list))
upper(string(nil))
upper(string(ok))
upper(string(score))
upper(string(string(0.5)))
upper(string(true))
upper(toBase64("foo"))
upper(toJSON("foo"))
upper(toJSON(0.5))
upper(toJSON(1))
upper(toJSON(array))
upper(toJSON(f32))
upper(toJSON(f64))
upper(toJSON(false))
upper(toJSON(foo))
upper(toJSON(i))
upper(toJSON(i32))
upper(toJSON(i64))
upper(toJSON(list))
upper(toJSON(nil))
upper(toJSON(ok))
upper(toJSON(true))
upper(trim("bar"))
upper(trim("bar", "bar"))
upper(trim("foo"))
upper(trimPrefix("bar"))
upper(trimPrefix("foo"))
upper(trimSuffix("bar"))
upper(trimSuffix("foo"))
upper(true ? "bar" : f32)
upper(true ? "foo" : i32)
upper(type("bar"))
upper(type("foo"))
upper(type(0.5))
upper(type(1))
upper(type(add))
upper(type(div))
upper(type(f32))
upper(type(f64))
upper(type(false))
upper(type(foo))
upper(type(greet))
upper(type(half))
upper(type(i))
upper(type(i64))
upper(type(list))
upper(type(nil))
upper(type(score))
upper(type(true))
upper(upper("bar"))
values({"bar": f32})
values({"bar": greet})
values({"bar": i64})
values({"foo": 1})
values({"foo": div})
values({"foo": false})
values({"foo": foo, "foo": ok})
values({"foo": list, "bar": 1})
{"bar": !false}
{"bar": !true}
{"bar": "bar", "foo": nil}?.String
{"bar": "bar", "foo": score}.i
{"bar": "bar", "foo": true}?.i?.foo
{"bar": "bar"}.add
{"bar": "bar"}.array
{"bar": "bar"}.f32
{"bar": "bar"}.f64
{"bar": "bar"}.list
{"bar": "bar"}.ok
{"bar": "bar"}?.Bar
{"bar": "bar"}?.greet
{"bar": "bar"}?.half
{"bar": "bar"}?.i
{"bar": "foo", "foo": 0.5}.add
{"bar": "foo", "foo": 1}.String?.ok
{"bar": "foo", "foo": greet}.half
{"bar": "foo", "foo": ok, "bar": f64}?.Bar
{"bar": "foo", "foo": ok}.Qux
{"bar": "foo", "foo": true}.ok
{"bar": "foo"}.Qux
{"bar": "foo"}.String
{"bar": "foo"}.add
{"bar": "foo"}.array
{"bar": "foo"}.div
{"bar": "foo"}.f32
{"bar": "foo"}.i
{"bar": "foo"}.i64
{"bar": "foo"}.score
{"bar": "foo"}?.Qux
{"bar": "foo"}?.Qux?.score
{"bar": "foo"}?.String
{"bar": "foo"}?.div
{"bar": "foo"}?.foo
{"bar": "foo"}?.i32
{"bar": "foo"}?.i64
{"bar": -0.5}
{"bar": -1}
{"bar": -1}?.array
{"bar": -f32}
{"bar": 0.5 * f64}
{"bar": 0.5 + 1}
{"bar": 0.5 - i32}
{"bar": 0.5 - i64}
{"bar": 0.5 < i64}
{"bar": 0.5 == nil}
{"bar": 0.5 > 1}.Qux
{"bar": 0.5, "bar": "bar"}.ok
{"bar": 0.5, "bar": 0.5}.f32
{"bar": 0.5, "bar": 1}?.half
{"bar": 0.5, "foo": array}?.ok
{"bar": 0.5, "foo": i32, "bar": add}?.Bar
{"bar": 0.5}.Bar
{"bar": 0.5}.Qux
{"bar": 0.5}.String
{"bar": 0.5}.add
{"bar": 0.5}.div
{"bar": 0.5}.div?.array.foo
{"bar": 0.5}.f32
{"bar": 0.5}.f64
{"bar": 0.5}.foo
{"bar": 0.5}.greet
{"bar": 0.5}.i32
{"bar": 0.5}.ok
{"bar": 0.5}.score
{"bar": 0.5}?.Bar
{"bar": 0.5}?.String
{"bar": 0.5}?.add
{"bar": 0.5}?.array
{"bar": 0.5}?.div
{"bar": 0.5}?.f32
{"bar": 0.5}?.foo
{"bar": 0.5}?.greet?.i32
{"bar": 0.5}?.half
{"bar": 0.5}?.i
{"bar": 0.5}?.i32
{"bar": 0.5}?.i32?.i32
{"bar": 0.5}?.i64
{"bar": 1 * i32}
{"bar": 1 * i}
{"bar": 1 + i32}
{"bar": 1 - f32}
{"bar": 1 / 0.5}
{"bar": 1 < f32}
{"bar": 1 <= 1}
{"bar": 1, "bar": "bar"}.i32
{"bar": 1, "bar": array}?.f32
{"bar": 1, "bar": false}.array
{"bar": 1, "bar": greet, "foo": "bar"}?.i64
{"bar": 1, "bar": i64}?.array
{"bar": 1, "foo": 0.5}?.String
{"bar": 1, "foo": add, "foo": f32}?.i
{"bar": 1, "foo": foo}.div
{"bar": 1, "foo": i64}.i64
{"bar": 1}.Bar
{"bar": 1}.Qux
{"bar": 1}.String
{"bar": 1}.add
{"bar": 1}.div
{"bar": 1}.f64
{"bar": 1}.greet
{"bar": 1}.half
{"bar": 1}.i
{"bar": 1}.ok
{"bar": 1}?.Bar
{"bar": 1}?.add
{"bar": 1}?.add?.i32
{"bar": 1}?.div?.list
{"bar": 1}?.f32
{"bar": 1}?.f64
{"bar": 1}?.i
{"bar": 1}?.i32
{"bar": 1}?.ok
{"bar": ["bar", score]}
{"bar": add, "bar": "foo"}.String?.array
{"bar": add, "bar": 1}?.i64
{"bar": add, "bar": div}?.f32
{"bar": add, "bar": foo}
{"bar": add, "bar": list}.Bar
{"bar": add, "bar": score}.f64?.f64
{"bar": add, "foo": "foo"}.i64
{"bar": add, "foo": f64}?.score
{"bar": add, "foo": i32}?.half
{"bar": add, "foo": ok}
{"bar": add, "foo": score}
{"bar": add}
{"bar": add}.Qux
{"bar": add}.String
{"bar": add}.f64
{"bar": add}.foo
{"bar": add}.greet
{"bar": add}.i32
{"bar": add}.list
{"bar": add}?.String
{"bar": add}?.add
{"bar": add}?.div
{"bar": add}?.i
{"bar": add}?.i64
{"bar": add}?.score
{"bar": any(array, false)}
{"bar": any(list, ok)}
{"bar": array, "bar": f64}
{"bar": array, "bar": false, "bar": i}?.Qux
{"bar": array, "bar": false}.Qux
{"bar": array, "bar": half}.i32
{"bar": array, "bar": i64}.i64
{"bar": array, "bar": score}
{"bar": array, "foo": "foo"}?.array
{"bar": array, "foo": add == add}
{"bar": array, "foo": count(list, true)}.add
{"bar": array}
{"bar": array}.Bar
{"bar": array}.Qux
{"bar": array}.String
{"bar": array}.add
{"bar": array}.f32
{"bar": array}.half?.foo
{"bar": array}.i
{"bar": array}.i64
{"bar": array}?.Bar
{"bar": array}?.div
{"bar": array}?.greet
{"bar": array}?.half
{"bar": array}?.i32
{"bar": array}?.i64
{"bar": array}?.ok
{"bar": div != greet}
{"bar": div, "bar": "bar", "bar": foo}.greet
{"bar": div, "bar": "bar", "foo": 1}?.div
{"bar": div, "bar": greet}?.i32
{"bar": div, "bar": i32}?.array
{"bar": div, "foo": div}?.list
{"bar": div, "foo": greet, "foo": 1}?.score?.Qux
{"bar": div, "foo": i}?.i
{"bar": div, "foo": list}.f64
{"bar": div, "foo": ok}?.i64
{"bar": div, "foo": score}
{"bar": div}
{"bar": div}.add
{"bar": div}.div
{"bar": div}.f32
{"bar": div}.f32?.score
{"bar": div}.half
{"bar": div}.i32
{"bar": div}.i64
{"bar": div}.score
{"bar": div}?.div
{"bar": div}?.div?.f32
{"bar": div}?.foo
{"bar": div}?.half
{"bar": div}?.i
{"bar": div}?.i64
{"bar": div}?.list
{"bar": div}?.ok
{"bar": f32 ** 1}
{"bar": f32 - i32}
{"bar": f32, "bar": true, "bar": list}?.Bar
{"bar": f32, "foo": i32}
{"bar": f32, "foo": ok, "foo": f32}.half
{"bar": f32, "foo": score}?.greet
{"bar": f32}
{"bar": f32}.Bar
{"bar": f32}.Qux?.i64
{"bar": f32}.String
{"bar": f32}.add
{"bar": f32}.half
{"bar": f32}.list
{"bar": f32}?.String?.score
{"bar": f32}?.f64
{"bar": f32}?.foo
{"bar": f32}?.i32
{"bar": f32}?.i64
{"bar": f32}?.list
{"bar": f32}?.score
{"bar": f64, "bar": 0.5}.div
{"bar": f64, "bar": i}
{"bar": f64, "bar": nil}?.f64
{"bar": f64, "foo": "foo"}?.half
{"bar": f64, "foo": 0.5, "bar": foo}?.half
{"bar": f64, "foo": f64}.foo
{"bar": f64, "foo": i32}
{"bar": f64}
{"bar": f64}.String
{"bar": f64}.div?.String()
{"bar": f64}.f32
{"bar": f64}.f64
{"bar": f64}.f64?.list
{"bar": f64}.greet
{"bar": f64}.half
{"bar": f64}.i
{"bar": f64}.ok
{"bar": f64}?.Bar
{"bar": f64}?.Qux
{"bar": f64}?.f64
{"bar": f64}?.half
{"bar": f64}?.i32
{"bar": f64}?.i64
{"bar": f64}?.score
{"bar": false, "bar": 0.5, "bar": foo}.add
{"bar": false, "foo": greet, "foo": i64}.div
{"bar": false}.add
{"bar": false}.div
{"bar": false}.f64
{"bar": false}.foo
{"bar": false}.greet
{"bar": false}.half
{"bar": false}.i32
{"bar": false}.list
{"bar": false}.ok
{"bar": false}.score
{"bar": false}?.array
{"bar": false}?.greet
{"bar": false}?.i32
{"bar": false}?.ok?.Qux?.score()
{"bar": false}?.score
{"bar": first(list)}
{"bar": float(f32)}
{"bar": foo, "bar": 0.5}.div
{"bar": foo, "bar": div}.array
{"bar": foo, "bar": half}
{"bar": foo, "bar": list}.f32
{"bar": foo, "foo": greet}?.div
{"bar": foo, "foo": i32}.score
{"bar": foo, "foo": true}?.f32
{"bar": foo.Bar}
{"bar": foo.String()}
{"bar": foo?.Qux}?.foo
{"bar": foo?.String}
{"bar": foo}
{"bar": foo}.Qux
{"bar": foo}.String
{"bar": foo}.array
{"bar": foo}.div
{"bar": foo}.f64
{"bar": foo}.half
{"bar": foo}.half?.list(i32).array
{"bar": foo}.i
{"bar": foo}.list
{"bar": foo}.ok
{"bar": foo}?.div
{"bar": foo}?.f64
{"bar": foo}?.greet
{"bar": foo}?.i
{"bar": foo}?.i64
{"bar": foo}?.list
{"bar": greet, "bar": foo}
{"bar": greet, "bar": nil}.f64
{"bar": greet, "foo": foo}
{"bar": greet}
{"bar": greet}.Qux
{"bar": greet}.add
{"bar": greet}.array
{"bar": greet}.div
{"bar": greet}.foo
{"bar": greet}.i
{"bar": greet}.i32
{"bar": greet}.ok
{"bar": greet}.score
{"bar": greet}?.Bar
{"bar": greet}?.String
{"bar": greet}?.add
{"bar": greet}?.f32
{"bar": greet}?.foo?.foo
{"bar": greet}?.half
{"bar": greet}?.i
{"bar": greet}?.list
{"bar": greet}?.ok
{"bar": half(0.5), "bar": ok}
{"bar": half(0.5)}
{"bar": half(0.5)}?.array
{"bar": half, "bar": "foo", "bar": ok}?.String
{"bar": half, "bar": array}?.div?.i32
{"bar": half, "bar": div}
{"bar": half, "bar": f32}
{"bar": half, "bar": greet}?.i64
{"bar": half, "bar": list}
{"bar": half, "bar": score, "bar": i == f32}
{"bar": half, "bar": score}
{"bar": half, "foo": array}
{"bar": half, "foo": f64 == i64}
{"bar": half, "foo": greet}
{"bar": half, "foo": i64}.array
{"bar": half, "foo": list}?.list?.ok
{"bar": half}
{"bar": half}.String
{"bar": half}.String?.score
{"bar": half}.half
{"bar": half}.i32
{"bar": half}.i64
{"bar": half}.ok
{"bar": half}.score
{"bar": half}?.Qux
{"bar": half}?.Qux?.f32
{"bar": half}?.div
{"bar": half}?.f32
{"bar": half}?.foo?.f32()
{"bar": half}?.half
{"bar": half}?.half?.f32
{"bar": half}?.i
{"bar": i ** 0.5}
{"bar": i + i64}
{"bar": i .. i32}
{"bar": i .. i}
{"bar": i > i32}
{"bar": i >= 0.5, "bar": array}
{"bar": i >= i}
{"bar": i, "bar": 0.5}?.Qux
{"bar": i, "bar": foo}.foo
{"bar": i, "bar": nil}?.f32
{"bar": i, "foo": 1 >= f64}
{"bar": i, "foo": array}.array
{"bar": i, "foo": f64}.i64
{"bar": i, "foo": greet}?.foo
{"bar": i32 + 0.5}
{"bar": i32 < i32}
{"bar": i32 <= f64}
{"bar": i32, "bar": "foo"}?.half
{"bar": i32, "foo": f64}?.foo
{"bar": i32, "foo": foo, "foo": i32}?.i32?.String()
{"bar": i32, "foo": i64, "bar": true}?.i64
{"bar": i32, "foo": i64}.half
{"bar": i32, "foo": list}
{"bar": i32, "foo": score, "foo": 1}.array
{"bar": i32, "foo": score, "foo": greet}.add
{"bar": i32, "foo": score, "foo": ok}.foo
{"bar": i32}
{"bar": i32}.Bar
{"bar": i32}.i
{"bar": i32}.i64
{"bar": i32}.list
{"bar": i32}.score?.f32
{"bar": i32}?.String
{"bar": i32}?.div
{"bar": i32}?.f32
{"bar": i32}?.foo
{"bar": i32}?.greet
{"bar": i32}?.half
{"bar": i32}?.i
{"bar": i32}?.list?.list
{"bar": i32}?.ok
{"bar": i32}?.score
{"bar": i64 != f32, "bar": score}
{"bar": i64 ** f64}
{"bar": i64 / f64}
{"bar": i64, "bar": "bar", "foo": i64}.array
{"bar": i64, "bar": foo}.list
{"bar": i64, "bar": greet, "foo": score}.array
{"bar": i64, "bar": half}?.f64
{"bar": i64, "bar": i64}?.Qux?.array()
{"bar": i64, "bar": list}
{"bar": i64, "foo": "foo"}.Bar
{"bar": i64, "foo": 0.5, "foo": list}.i64
{"bar": i64, "foo": f32, "foo": nil}.i32
{"bar": i64, "foo": f32}?.half
{"bar": i64, "foo": i, "foo": greet}.array
{"bar": i64, "foo": nil}.add
{"bar": i64, "foo": nil}?.Qux
{"bar": i64}
{"bar": i64}.add
{"bar": i64}.array
{"bar": i64}.div
{"bar": i64}.div?.i64
{"bar": i64}.f32
{"bar": i64}.foo
{"bar": i64}.greet
{"bar": i64}.i64
{"bar": i64}.list
{"bar": i64}.ok
{"bar": i64}?.Qux
{"bar": i64}?.String
{"bar": i64}?.array
{"bar": i64}?.array?.foo
{"bar": i64}?.div
{"bar": i64}?.f32
{"bar": i64}?.i64
{"bar": i64}?.list
{"bar": i64}?.ok
{"bar": i64}?.score
{"bar": i}
{"bar": i}.Bar
{"bar": i}.String
{"bar": i}.array
{"bar": i}.div
{"bar": i}.f64
{"bar": i}.foo
{"bar": i}.greet
{"bar": i}.half
{"bar": i}.i
{"bar": i}.i32
{"bar": i}.i64
{"bar": i}.list?.list
{"bar": i}?.Qux
{"bar": i}?.String
{"bar": i}?.add
{"bar": i}?.foo
{"bar": i}?.greet
{"bar": i}?.list
{"bar": list, "bar": 1}?.f64
{"bar": list, "bar": div}
{"bar": list, "bar": f32, "bar": i64}.Bar
{"bar": list, "bar": f32, "bar": ok}.add
{"bar": list, "bar": f64}.foo
{"bar": list, "bar": false, "bar": 1}?.f32
{"bar": list, "bar": i32}.half
{"bar": list, "bar": ok}
{"bar": list, "foo": div, "foo": ok}?.i64
{"bar": list, "foo": f64, "foo": list}.half
{"bar": list, "foo": half}?.Qux
{"bar": list, "foo": i}
{"bar": list, "foo": list}
{"bar": list, "foo": ok, "foo": f64}?.half
{"bar": list}
{"bar": list}.Bar
{"bar": list}.add
{"bar": list}.f32
{"bar": list}.f64
{"bar": list}.greet
{"bar": list}.score
{"bar": list}?.add
{"bar": list}?.add?.array
{"bar": list}?.div
{"bar": list}?.half
{"bar": list}?.i32
{"bar": list}?.list
{"bar": list}?.score
{"bar": map(list, i32)}
{"bar": min(0.5)}
{"bar": min(f32)}
{"bar": nil != "bar"}
{"bar": nil != false}
{"bar": nil == "foo"}
{"bar": nil == 1}
{"bar": nil == f64}
{"bar": nil, "bar": div}.f32
{"bar": nil, "bar": greet, "foo": "bar"}?.i64
{"bar": nil, "bar": greet}.score
{"bar": nil, "bar": i}.f64
{"bar": nil, "foo": 0.5}?.array
{"bar": nil, "foo": f64}?.add
{"bar": nil, "foo": half}?.foo
{"bar": nil}.String
{"bar": nil}.add
{"bar": nil}.array
{"bar": nil}.f32
{"bar": nil}.foo
{"bar": nil}.half
{"bar": nil}?.Bar
{"bar": nil}?.add
{"bar": nil}?.array
{"bar": nil}?.f32
{"bar": nil}?.f64
{"bar": nil}?.foo
{"bar": nil}?.foo?.i32
{"bar": nil}?.greet
{"bar": nil}?.half
{"bar": nil}?.i32
{"bar": nil}?.i64
{"bar": nil}?.list
{"bar": nil}?.ok
{"bar": ok or ok}
{"bar": ok || ok}
{"bar": ok, "bar": list}
{"bar": ok, "bar": nil == half}.f64
{"bar": ok, "foo": div, "bar": "bar"}.Qux
{"bar": ok, "foo": i32, "bar": 1}.score
{"bar": ok}
{"bar": ok}.String
{"bar": ok}.add
{"bar": ok}.array
{"bar": ok}.i
{"bar": ok}.i64
{"bar": ok}.ok
{"bar": ok}?.Qux
{"bar": ok}?.array
{"bar": ok}?.f64
{"bar": ok}?.foo
{"bar": ok}?.greet
{"bar": ok}?.i
{"bar": ok}?.i32
{"bar": ok}?.i64
{"bar": score != score}
{"bar": score, "bar": 0.5}?.Bar
{"bar": score, "bar": div}
{"bar": score, "bar": foo}
{"bar": score, "bar": i64}.div
{"bar": score, "bar": i}
{"bar": score, "foo": greet}
{"bar": score}
{"bar": score}.Bar
{"bar": score}.add
{"bar": score}.array
{"bar": score}.div
{"bar": score}.f64
{"bar": score}.i32
{"bar": score}.i64
{"bar": score}.list
{"bar": score}.ok
{"bar": score}.score
{"bar": score}?.f32
{"bar": score}?.f64
{"bar": score}?.i32
{"bar": score}?.list
{"bar": score}?.score
{"bar": string(array)}
{"bar": toJSON(array)}
{"bar": toJSON(i)}.i64?.i64
{"bar": toJSON(i32)}
{"bar": true, "bar": false}.Bar
{"bar": true, "bar": foo}?.String
{"bar": true, "foo": 0.5}?.i
{"bar": true, "foo": div}.score
{"bar": true, "foo": foo}.div
{"bar": true}.Bar
{"bar": true}.Qux?.greet()
{"bar": true}.f32
{"bar": true}.f64
{"bar": true}.half
{"bar": true}.i
{"bar": true}.list?.String()
{"bar": true}.score
{"bar": true}?.Bar
{"bar": true}?.i64
{"bar": true}?.list
{"bar": type(f64)}
{"bar": type(greet)}
{"bar": {"foo": "bar", "bar": "bar", "bar": nil}}
{"foo": "bar", "bar": i32}.half
{"foo": "bar", "bar": nil}?.add?.i64
{"foo": "bar"}.Bar
{"foo": "bar"}.Qux
{"foo": "bar"}.String
{"foo": "bar"}.array
{"foo": "bar"}.f64
{"foo": "bar"}.half
{"foo": "bar"}.i
{"foo": "bar"}.i64
{"foo": "bar"}.list
{"foo": "bar"}.ok
{"foo": "bar"}?.add
{"foo": "bar"}?.div?.ok
{"foo": "bar"}?.f64
{"foo": "bar"}?.foo
{"foo": "bar"}?.half
{"foo": "foo" != "bar"}
{"foo": "foo", "bar": nil}?.String
{"foo": "foo", "foo": add, "foo": "foo"}?.i
{"foo": "foo", "foo": div}.i64
{"foo": "foo", "foo": greet}.array
{"foo": "foo", "foo": i, "bar": greet}?.score
{"foo": "foo", "foo": i32, "bar": f32}.greet
{"foo": "foo", "foo": i}?.foo
{"foo": "foo", "foo": list}.f32
{"foo": "foo"}.Bar
{"foo": "foo"}.array
{"foo": "foo"}.f32
{"foo": "foo"}.foo
{"foo": "foo"}.greet
{"foo": "foo"}.i64
{"foo": "foo"}?.Bar
{"foo": "foo"}?.add
{"foo": "foo"}?.div
{"foo": "foo"}?.greet
{"foo": "foo"}?.half
{"foo": "foo"}?.score
{"foo": -1}
{"foo": -i64}
{"foo": -i}
{"foo": 0.5 ** i64}
{"foo": 0.5 - 0.5}
{"foo": 0.5 <= 0.5}
{"foo": 0.5 > i64}
{"foo": 0.5, "bar": 1}.half
{"foo": 0.5, "bar": add}.Bar
{"foo": 0.5, "bar": div}.array
{"foo": 0.5, "bar": i32}?.String
{"foo": 0.5, "bar": score, "foo": score}.half
{"foo": 0.5, "foo": 1, "foo": list}.div
{"foo": 0.5, "foo": nil}?.div
{"foo": 0.5, "foo": nil}?.i64
{"foo": 0.5}.Bar
{"foo": 0.5}.Qux
{"foo": 0.5}.array
{"foo": 0.5}.f32
{"foo": 0.5}.f64
{"foo": 0.5}.greet
{"foo": 0.5}.half
{"foo": 0.5}.i
{"foo": 0.5}.i64
{"foo": 0.5}.list
{"foo": 0.5}.ok
{"foo": 0.5}?.Bar?.i
{"foo": 0.5}?.String
{"foo": 0.5}?.add
{"foo": 0.5}?.array
{"foo": 0.5}?.array?.score
{"foo": 0.5}?.foo
{"foo": 0.5}?.greet
{"foo": 0.5}?.half
{"foo": 0.5}?.i64
{"foo": 0.5}?.ok
{"foo": 1 + 0.5}
{"foo": 1 / 0.5}
{"foo": 1 / i64}
{"foo": 1 < i32}?.i64
{"foo": 1 not in array}
{"foo": 1, "bar": 0.5}.array
{"foo": 1, "bar": div}.f32
{"foo": 1, "bar": f32}.Qux?.half?.list
{"foo": 1, "bar": i64, "foo": 0.5}.list
{"foo": 1, "bar": i64}?.ok
{"foo": 1, "bar": score}.foo
{"foo": 1, "foo": 0.5}.f32
{"foo": 1, "foo": array}?.array
{"foo": 1, "foo": ok}.add
{"foo": 1, "foo": true}?.Qux
{"foo": 1}.add
{"foo": 1}.f32
{"foo": 1}.foo
{"foo": 1}.greet
{"foo": 1}.half
{"foo": 1}.i64
{"foo": 1}.list
{"foo": 1}.ok
{"foo": 1}?.Bar
{"foo": 1}?.add
{"foo": 1}?.div
{"foo": 1}?.f32
{"foo": 1}?.foo
{"foo": 1}?.greet
{"foo": 1}?.half
{"foo": 1}?.i
{"foo": 1}?.i32
{"foo": 1}?.score
{"foo": abs(0.5)}
{"foo": add, "bar": 0.5}.i
{"foo": add, "bar": nil}.score
{"foo": add, "bar": ok}
{"foo": add, "bar": score}.half
{"foo": add, "foo": "bar"}?.String
{"foo": add, "foo": half, "foo": div}?.greet
{"foo": add, "foo": i32}.foo
{"foo": add, "foo": nil}?.list
{"foo": add}
{"foo": add}.Bar
{"foo": add}.div
{"foo": add}.foo
{"foo": add}.half
{"foo": add}.i
{"foo": add}.i64
{"foo": add}.list
{"foo": add}.ok
{"foo": add}?.String
{"foo": add}?.array
{"foo": add}?.div
{"foo": add}?.greet
{"foo": add}?.half
{"foo": add}?.i32
{"foo": add}?.ok
{"foo": array, "bar": "foo"}?.f32
{"foo": array, "bar": f64}
{"foo": array, "bar": greet}
{"foo": array, "bar": list}?.f32
{"foo": array, "bar": ok}
{"foo": array, "foo": add}
{"foo": array, "foo": greet}
{"foo": array, "foo": true}?.i
{"foo": array}
{"foo": array}.Qux
{"foo": array}.Qux?.String
{"foo": array}.String
{"foo": array}.f64
{"foo": array}.greet
{"foo": array}.i32
{"foo": array}.ok
{"foo": array}?.Bar
{"foo": array}?.String
{"foo": array}?.add
{"foo": array}?.array
{"foo": array}?.div
{"foo": array}?.f64
{"foo": array}?.half
{"foo": array}?.ok
{"foo": div, "bar": 1}?.add
{"foo": div, "bar": add}
{"foo": div, "bar": div}
{"foo": div, "bar": half}.half
{"foo": div, "bar": list, "bar": 0.5}?.Qux
{"foo": div, "foo": array}.Bar
{"foo": div, "foo": true}?.Qux
{"foo": div}
{"foo": div}.Qux
{"foo": div}.array
{"foo": div}.div
{"foo": div}.foo
{"foo": div}.greet
{"foo": div}?.Bar
{"foo": div}?.Qux
{"foo": div}?.String
{"foo": div}?.add
{"foo": div}?.f64
{"foo": div}?.half
{"foo": div}?.i
{"foo": div}?.i64
{"foo": div}?.list
{"foo": div}?.ok
{"foo": f32 != i}
{"foo": f32 - f32}
{"foo": f32 == 0.5}
{"foo": f32, "bar": "bar"}?.String
{"foo": f32, "bar": 0.5}.f32
{"foo": f32, "bar": i32}
{"foo": f32, "bar": list}
{"foo": f32, "foo": 1, "foo": i32}?.i32
{"foo": f32, "foo": div}
{"foo": f32, "foo": i}
{"foo": f32, "foo": ok}?.i
{"foo": f32, "foo": type("bar")}
{"foo": f32}
{"foo": f32}.String
{"foo": f32}.add
{"foo": f32}.array
{"foo": f32}.f32
{"foo": f32}.foo
{"foo": f32}.greet
{"foo": f32}.half
{"foo": f32}.i
{"foo": f32}.i32
{"foo": f32}.list
{"foo": f32}?.Bar
{"foo": f32}?.Qux
{"foo": f32}?.add
{"foo": f32}?.f32
{"foo": f32}?.f64
{"foo": f32}?.half
{"foo": f32}?.i32
{"foo": f32}?.score
{"foo": f64 * i}
{"foo": f64 / 1}
{"foo": f64 == 0.5}
{"foo": f64 >= 1}
{"foo": f64 ^ f32}
{"foo": f64, "bar": "foo"}.Qux
{"foo": f64, "bar": "foo"}.add
{"foo": f64, "bar": 0.5}.div
{"foo": f64, "bar": div}
{"foo": f64, "bar": greet}
{"foo": f64, "bar": half}?.list
{"foo": f64, "bar": ok}.half
{"foo": f64, "foo": foo, "bar": greet}.String
{"foo": f64, "foo": foo, "foo": "foo"}.Bar
{"foo": f64, "foo": greet}
{"foo": f64, "foo": ok, "foo": i64}?.f64
{"foo": f64}
{"foo": f64}.Qux
{"foo": f64}.String?.f32
{"foo": f64}.String?.i64
{"foo": f64}.add
{"foo": f64}.array
{"foo": f64}.f64
{"foo": f64}.foo
{"foo": f64}.greet
{"foo": f64}.i
{"foo": f64}.list
{"foo": f64}?.Bar
{"foo": f64}?.String
{"foo": f64}?.div
{"foo": f64}?.f32
{"foo": f64}?.f64
{"foo": f64}?.foo
{"foo": f64}?.greet
{"foo": f64}?.i
{"foo": f64}?.ok
{"foo": false, "foo": greet}?.add
{"foo": false, "foo": ok}.score
{"foo": false}.Bar
{"foo": false}.array
{"foo": false}.div
{"foo": false}.half
{"foo": false}.i
{"foo": false}?.array
{"foo": false}?.f32
{"foo": false}?.f64
{"foo": false}?.foo
{"foo": false}?.i64
{"foo": false}?.list
{"foo": foo, "bar": add, "foo": foo}.Bar
{"foo": foo, "bar": ok, "foo": array}.String
{"foo": foo, "foo": foo}
{"foo": foo, "foo": list, "foo": greet}.i
{"foo": foo, "foo": nil}?.f32
{"foo": foo, "foo": true}?.array
{"foo": foo?.Qux}
{"foo": foo}
{"foo": foo}.div
{"foo": foo}.f64
{"foo": foo}.greet
{"foo": foo}.list
{"foo": foo}.ok
{"foo": foo}.score
{"foo": foo}?.String
{"foo": foo}?.array
{"foo": foo}?.div
{"foo": foo}?.f32
{"foo": foo}?.foo
{"foo": foo}?.greet
{"foo": foo}?.half
{"foo": foo}?.list
{"foo": foo}?.ok
{"foo": get(array, i32)}?.i64
{"foo": greet, "bar": 0.5, "bar": "foo"}?.half
{"foo": greet, "bar": 0.5}.Bar
{"foo": greet, "bar": f64}
{"foo": greet, "bar": f64}.list
{"foo": greet, "bar": i, "foo": foo}?.f32
{"foo": greet, "foo": "bar", "foo": score}.i
{"foo": greet, "foo": f32}
{"foo": greet}
{"foo": greet}.Qux
{"foo": greet}.String
{"foo": greet}.add
{"foo": greet}.array
{"foo": greet}.f32?.greet
{"foo": greet}.half?.greet
{"foo": greet}.i64
{"foo": greet}.list
{"foo": greet}.ok
{"foo": greet}?.add
{"foo": greet}?.array
{"foo": greet}?.f32
{"foo": greet}?.half
{"foo": greet}?.i32
{"foo": greet}?.i64
{"foo": greet}?.list
{"foo": greet}?.score
{"foo": half(0.5)}
{"foo": half(f64)}
{"foo": half, "bar": 1}?.half
{"foo": half, "bar": add}?.foo
{"foo": half, "bar": f32}.i32
{"foo": half, "bar": foo}
{"foo": half, "bar": half}
{"foo": half, "bar": i64, "bar": i32}.foo
{"foo": half, "bar": i64}
{"foo": half, "bar": nil}?.ok
{"foo": half, "foo": 1}?.ok
{"foo": half, "foo": div}
{"foo": half, "foo": greet, "bar": f32}?.add
{"foo": half, "foo": true}.f64
{"foo": half}
{"foo": half}.Bar
{"foo": half}.String
{"foo": half}.div
{"foo": half}.f64
{"foo": half}.greet
{"foo": half}.half
{"foo": half}.i
{"foo": half}.i32
{"foo": half}.ok
{"foo": half}?.Bar
{"foo": half}?.Qux
{"foo": half}?.add
{"foo": half}?.f64
{"foo": half}?.foo
{"foo": half}?.greet
{"foo": half}?.half
{"foo": half}?.list
{"foo": half}?.score
{"foo": hasPrefix("bar", "foo")}
{"foo": i < f64}
{"foo": i > 0.5}
{"foo": i, "bar": score}
{"foo": i, "foo": i}.i64
{"foo": i, "foo": ok}
{"foo": i, "foo": ok}?.ok
{"foo": i32, "bar": 0.5, "foo": array}.Bar
{"foo": i32, "bar": i32}.i64
{"foo": i32, "bar": nil}?.i64
{"foo": i32, "foo": 0.5}.i
{"foo": i32, "foo": add}
{"foo": i32, "foo": div, "foo": nil}.Bar
{"foo": i32, "foo": foo}
{"foo": i32, "foo": greet}?.foo
{"foo": i32, "foo": i32}?.score
{"foo": i32, "foo": ok, "bar": true}.f32
{"foo": i32, "foo": ok}?.i32
{"foo": i32}
{"foo": i32}.Bar
{"foo": i32}.Qux
{"foo": i32}.i64
{"foo": i32}.list
{"foo": i32}.ok
{"foo": i32}.score
{"foo": i32}?.Bar
{"foo": i32}?.Qux
{"foo": i32}?.add
{"foo": i32}?.div
{"foo": i32}?.f32
{"foo": i32}?.greet
{"foo": i32}?.half
{"foo": i32}?.i
{"foo": i32}?.i64
{"foo": i32}?.score
{"foo": i64 * f64, "foo": i64}
{"foo": i64 <= 0.5}
{"foo": i64 ^ i32}
{"foo": i64, "bar": "bar"}.Qux
{"foo": i64, "bar": array}.add
{"foo": i64, "bar": div}
{"foo": i64, "bar": f64, "bar": greet}.f32
{"foo": i64, "bar": list}
{"foo": i64, "foo": 0.5, "bar": 0.5}.half
{"foo": i64, "foo": div}
{"foo": i64, "foo": i32}
{"foo": i64}
{"foo": i64}.Qux
{"foo": i64}.add
{"foo": i64}.array
{"foo": i64}?.Qux
{"foo": i64}?.String
{"foo": i64}?.f32
{"foo": i64}?.foo
{"foo": i64}?.greet
{"foo": i64}?.i32
{"foo": i64}?.list
{"foo": i64}?.score
{"foo": i}
{"foo": i}.Bar
{"foo": i}.String
{"foo": i}.div
{"foo": i}.foo
{"foo": i}.greet
{"foo": i}.i32?.add
{"foo": i}.ok
{"foo": i}.score
{"foo": i}?.Bar
{"foo": i}?.array
{"foo": i}?.div
{"foo": i}?.f64
{"foo": i}?.foo
{"foo": i}?.half
{"foo": i}?.i64
{"foo": i}?.score
{"foo": list == list}.f32
{"foo": list, "bar": f32, "foo": i32}.i32
{"foo": list, "bar": foo}?.list
{"foo": list, "bar": i64}
{"foo": list, "bar": score}
{"foo": list, "foo": score}
{"foo": list}
{"foo": list}.Bar
{"foo": list}.String
{"foo": list}.add
{"foo": list}.div
{"foo": list}.foo
{"foo": list}.half
{"foo": list}.i32
{"foo": list}.score
{"foo": list}?.add
{"foo": list}?.div
{"foo": list}?.i
{"foo": list}?.i64
{"foo": list}?.ok
{"foo": map(array, #)}
{"foo": map(array, 0.5)}
{"foo": map(array, foo)}
{"foo": map(array, ok), "bar": i32}
{"foo": map(list, 0.5)}
{"foo": map(list, score)}
{"foo": min(0.5)}
{"foo": min(1)}?.f32
{"foo": nil == 0.5}
{"foo": nil, "bar": 0.5}.score
{"foo": nil, "bar": add}?.array
{"foo": nil, "bar": div}.Bar
{"foo": nil, "bar": f64, "foo": div}.i32
{"foo": nil, "bar": greet}?.add
{"foo": nil, "bar": i64}?.i64
{"foo": nil, "bar": list}?.i32
{"foo": nil, "foo": "foo"}.add
{"foo": nil, "foo": 1}.score
{"foo": nil, "foo": false}?.add
{"foo": nil, "foo": i64}.add
{"foo": nil}.Bar
{"foo": nil}.Qux
{"foo": nil}.String
{"foo": nil}.array
{"foo": nil}.div
{"foo": nil}.f32
{"foo": nil}.f64
{"foo": nil}.greet?.i()
{"foo": nil}.greet?.i32
{"foo": nil}.half
{"foo": nil}.i
{"foo": nil}.i64
{"foo": nil}.list
{"foo": nil}?.Bar
{"foo": nil}?.Qux
{"foo": nil}?.String
{"foo": nil}?.array
{"foo": nil}?.div
{"foo": nil}?.f32?.ok
{"foo": nil}?.greet
{"foo": nil}?.i32
{"foo": nil}?.i?.half
{"foo": nil}?.list
{"foo": nil}?.list?.greet()
{"foo": nil}?.score
{"foo": not false}
{"foo": not ok}
{"foo": ok && ok}
{"foo": ok == nil}
{"foo": ok ? true : div}
{"foo": ok, "bar": f32}
{"foo": ok, "bar": i, "foo": greet}.i32
{"foo": ok, "bar": i32}
{"foo": ok, "foo": 0.5}?.array
{"foo": ok, "foo": 1}.Qux
{"foo": ok, "foo": half, "bar": div}.score
{"foo": ok, "foo": i64}
{"foo": ok, "foo": i64}.i
{"foo": ok, "foo": nil}?.add
{"foo": ok}
{"foo": ok}.Bar
{"foo": ok}.add
{"foo": ok}.div
{"foo": ok}.f64
{"foo": ok}.greet
{"foo": ok}.i
{"foo": ok}.score
{"foo": ok}?.Qux
{"foo": ok}?.String
{"foo": ok}?.div
{"foo": ok}?.f32
{"foo": ok}?.greet
{"foo": ok}?.half?.half
{"foo": ok}?.i32
{"foo": ok}?.i64
{"foo": ok}?.list
{"foo": score(1)}
{"foo": score, "bar": 0.5}.list
{"foo": score, "bar": 1 ^ 1}
{"foo": score, "bar": i32}
{"foo": score, "bar": i64}
{"foo": score, "foo": 0.5}.add
{"foo": score, "foo": 1}?.div
{"foo": score, "foo": add, "bar": ok}
{"foo": score, "foo": f32, "bar": false}.div
{"foo": score, "foo": f32}?.i32
{"foo": score, "foo": i}?.f32
{"foo": score}
{"foo": score}.Bar
{"foo": score}.array
{"foo": score}.list
{"foo": score}?.Bar
{"foo": score}?.String
{"foo": score}?.add
{"foo": score}?.f32
{"foo": score}?.greet
{"foo": score}?.half
{"foo": score}?.i
{"foo": score}?.list
{"foo": score}?.score
{"foo": string(i32)}
{"foo": string(list)}
{"foo": toBase64("bar")}
{"foo": toJSON(f32)}
{"foo": toJSON(i64)}?.i32
{"foo": toJSON(nil)}
{"foo": true, "bar": false}?.array
{"foo": true, "bar": nil}?.div
{"foo": true, "bar": true}.f64
{"foo": true, "foo": array, "bar": i32}?.ok
{"foo": true, "foo": i32}.i64
{"foo": true, "foo": ok, "foo": add}.foo
{"foo": true}.String
{"foo": true}.f32
{"foo": true}.foo
{"foo": true}.i
{"foo": true}.i64
{"foo": true}?.String
{"foo": true}?.greet
{"foo": true}?.i32
{"foo": type(1)}
{"foo": type(list)}
{"foo": type(nil)}
{"foo": type(ok)}
