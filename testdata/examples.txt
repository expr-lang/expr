!!!false
!!(1 <= f64)
!!(1 > 0.5)
!!(i64 != f64)
!!all(array, ok)
!!false
!!ok
!!true
!("bar" != "bar")
!("bar" != "foo")
!("bar" != nil)
!("bar" < "foo")
!("bar" <= "foo")
!("bar" == "bar")
!("bar" == "foo")
!("bar" == nil)
!("bar" > "bar")
!("bar" > "foo")
!("bar" >= "bar")
!("bar" >= "foo")
!("bar" contains "bar")
!("bar" contains "foo")
!("bar" endsWith "bar")
!("bar" endsWith "foo")
!("bar" in foo)
!("bar" matches "foo")
!("bar" not contains "bar")
!("bar" not endsWith "bar")
!("bar" not endsWith "foo")
!("bar" not in foo)
!("bar" not matches "bar")
!("bar" not startsWith "bar")
!("bar" not startsWith "foo")
!("bar" startsWith "bar")
!("foo" != "bar")
!("foo" != nil)
!("foo" < "foo")
!("foo" <= "bar")
!("foo" <= "foo")
!("foo" == "bar")
!("foo" == nil)
!("foo" > "bar")
!("foo" > "foo")
!("foo" >= "bar")
!("foo" contains "bar")
!("foo" contains "foo")
!("foo" endsWith "foo")
!("foo" in foo)
!("foo" matches "bar")
!("foo" matches "foo")
!("foo" not contains "bar")
!("foo" not contains "foo")
!("foo" not endsWith "bar")
!("foo" not matches "bar")
!("foo" not matches "foo")
!("foo" not startsWith "bar")
!("foo" not startsWith "foo")
!("foo" startsWith "bar")
!("foo" startsWith "foo")
!(-f32 < f32)
!(-i < i32)
!(-i32 >= i)
!(0.5 != 0.5)
!(0.5 != 1)
!(0.5 != f32)
!(0.5 != f64)
!(0.5 != i)
!(0.5 != i32)
!(0.5 != i64)
!(0.5 != nil)
!(0.5 < 0.5)
!(0.5 < 1)
!(0.5 < f32)
!(0.5 < f64)
!(0.5 < i)
!(0.5 < i32)
!(0.5 < i64)
!(0.5 <= 0.5)
!(0.5 <= 1)
!(0.5 <= f32)
!(0.5 <= f64)
!(0.5 <= i)
!(0.5 <= i32)
!(0.5 <= i64)
!(0.5 == 0.5)
!(0.5 == 1)
!(0.5 == f32)
!(0.5 == f64)
!(0.5 == i)
!(0.5 == i32)
!(0.5 == i64)
!(0.5 == nil)
!(0.5 > 0.5)
!(0.5 > 1)
!(0.5 > f32)
!(0.5 > f64)
!(0.5 > i)
!(0.5 > i32)
!(0.5 > i64)
!(0.5 >= 0.5)
!(0.5 >= 1)
!(0.5 >= f32)
!(0.5 >= f64)
!(0.5 >= i)
!(0.5 >= i32)
!(0.5 >= i64)
!(0.5 in array)
!(0.5 not in array)
!(1 != 0.5)
!(1 != 1)
!(1 != f32)
!(1 != f64)
!(1 != i)
!(1 != i32)
!(1 != i64)
!(1 != nil)
!(1 / i64 == i64)
!(1 < 0.5)
!(1 < 1)
!(1 < f32)
!(1 < f64)
!(1 < i)
!(1 < i32)
!(1 < i64)
!(1 <= 0.5)
!(1 <= 1)
!(1 <= f32)
!(1 <= f64)
!(1 <= i)
!(1 <= i32)
!(1 <= i64)
!(1 == 0.5)
!(1 == 1)
!(1 == f32)
!(1 == f64)
!(1 == i)
!(1 == i32)
!(1 == i64)
!(1 == nil)
!(1 > 0.5)
!(1 > 1)
!(1 > f32)
!(1 > f64)
!(1 > i)
!(1 > i32)
!(1 > i64)
!(1 >= 0.5)
!(1 >= 1)
!(1 >= f32)
!(1 >= f64)
!(1 >= i)
!(1 >= i32)
!(1 >= i64)
!(1 in array)
!(1 not in array)
!(add != add)
!(add != div)
!(add != greet)
!(add != half)
!(add != nil)
!(add != score)
!(add == add)
!(add == div)
!(add == greet)
!(add == half)
!(add == nil)
!(add == score)
!(array != array)
!(array != list)
!(array != nil)
!(array == array)
!(array == list)
!(array == nil)
!(div != add)
!(div != div)
!(div != greet)
!(div != half)
!(div != nil)
!(div != score)
!(div == add)
!(div == div)
!(div == greet)
!(div == half)
!(div == score)
!(f32 != 0.5)
!(f32 != 1)
!(f32 != f32)
!(f32 != f64)
!(f32 != i)
!(f32 != i32)
!(f32 != i64)
!(f32 != nil)
!(f32 < 0.5)
!(f32 < 1)
!(f32 < f32)
!(f32 < f64)
!(f32 < i)
!(f32 < i32)
!(f32 < i64)
!(f32 <= 0.5)
!(f32 <= 1)
!(f32 <= f32)
!(f32 <= f64)
!(f32 <= i32)
!(f32 <= i64)
!(f32 == 0.5)
!(f32 == 1)
!(f32 == f32)
!(f32 == f64)
!(f32 == i)
!(f32 == i32)
!(f32 == i64)
!(f32 == nil)
!(f32 > 0.5)
!(f32 > 1)
!(f32 > f32)
!(f32 > f64)
!(f32 > i)
!(f32 > i32)
!(f32 > i64)
!(f32 >= 0.5)
!(f32 >= 1)
!(f32 >= f32)
!(f32 >= i)
!(f32 >= i32)
!(f32 >= i64)
!(f32 in array)
!(f32 not in array)
!(f64 != 0.5)
!(f64 != 1)
!(f64 != f32)
!(f64 != f64)
!(f64 != i)
!(f64 != i32)
!(f64 != i64)
!(f64 != nil)
!(f64 < 0.5 + 1)
!(f64 < 0.5)
!(f64 < 1)
!(f64 < f64)
!(f64 < i)
!(f64 < i32)
!(f64 < i64)
!(f64 < max(1))
!(f64 <= 0.5)
!(f64 <= 1)
!(f64 <= i32)
!(f64 <= i64)
!(f64 == 0.5)
!(f64 == 1)
!(f64 == f32)
!(f64 == f64)
!(f64 == i)
!(f64 == i32)
!(f64 == i64)
!(f64 == nil)
!(f64 > 0.5)
!(f64 > 1)
!(f64 > f32)
!(f64 > f64)
!(f64 > i)
!(f64 > i32)
!(f64 > i64)
!(f64 >= 0.5)
!(f64 >= 1)
!(f64 >= f32)
!(f64 >= f64)
!(f64 >= i)
!(f64 >= i32)
!(f64 >= i64)
!(f64 in array)
!(f64 not in array)
!(false != false)
!(false != nil)
!(false != ok)
!(false != true)
!(false && false)
!(false && ok)
!(false && true)
!(false == false)
!(false == nil)
!(false == ok)
!(false == true)
!(false and false)
!(false and ok)
!(false and true)
!(false or false)
!(false or ok)
!(false || false)
!(false || ok)
!(false || true)
!(foo != foo)
!(foo != nil)
!(foo == foo)
!(foo == nil)
!(foo == reduce(list, #))
!(foo in list)
!(foo not in list)
!(greet != add)
!(greet != div)
!(greet != greet)
!(greet != half)
!(greet != nil)
!(greet != score)
!(greet == add)
!(greet == greet)
!(greet == half)
!(greet == nil)
!(greet == score)
!(half != add)
!(half != div)
!(half != greet)
!(half != half)
!(half != nil)
!(half != score)
!(half == add)
!(half == div)
!(half == greet)
!(half == half)
!(half == nil)
!(half == score)
!(i != 0.5)
!(i != 1)
!(i != f32)
!(i != f64)
!(i != i)
!(i != i32)
!(i != i64)
!(i != nil)
!(i < 0.5)
!(i < 1)
!(i < f64)
!(i < i)
!(i < i32)
!(i < i64)
!(i <= 0.5)
!(i <= 1)
!(i <= f32)
!(i <= f64)
!(i <= i32)
!(i == 0.5)
!(i == 1)
!(i == f32)
!(i == f64)
!(i == i)
!(i == i32)
!(i == i64)
!(i == nil)
!(i > 0.5)
!(i > 1)
!(i > f32)
!(i > f64)
!(i > i)
!(i > i32)
!(i > i64)
!(i >= 0.5)
!(i >= 1 * i64)
!(i >= 1)
!(i >= f32)
!(i >= f64)
!(i >= i)
!(i >= i32)
!(i >= i64)
!(i in array)
!(i not in array)
!(i32 != 0.5)
!(i32 != 1)
!(i32 != f32)
!(i32 != f64)
!(i32 != i)
!(i32 != i32)
!(i32 != i64)
!(i32 != nil)
!(i32 < 0.5)
!(i32 < 1)
!(i32 < f32)
!(i32 < f64)
!(i32 < i)
!(i32 < i32)
!(i32 < i64)
!(i32 <= 0.5)
!(i32 <= 1)
!(i32 <= f32)
!(i32 <= f64)
!(i32 <= i)
!(i32 <= i32)
!(i32 <= i64)
!(i32 == 0.5)
!(i32 == 1)
!(i32 == f32)
!(i32 == f64)
!(i32 == i)
!(i32 == i32)
!(i32 == i64)
!(i32 == nil)
!(i32 > 0.5)
!(i32 > 1)
!(i32 > f32)
!(i32 > f64)
!(i32 > i)
!(i32 > i32)
!(i32 >= 0.5)
!(i32 >= 1)
!(i32 >= f32)
!(i32 >= f64)
!(i32 >= i)
!(i32 >= i32)
!(i32 >= i64)
!(i32 in array)
!(i32 not in array)
!(i64 != 0.5)
!(i64 != 1)
!(i64 != f32)
!(i64 != f64)
!(i64 != i)
!(i64 != i32)
!(i64 != i64)
!(i64 != nil)
!(i64 < 0.5)
!(i64 < 1)
!(i64 < f32)
!(i64 < f64)
!(i64 < i)
!(i64 < i32 + i64)
!(i64 < i32)
!(i64 < i64)
!(i64 <= 0.5)
!(i64 <= 1)
!(i64 <= f32)
!(i64 <= f64)
!(i64 <= i)
!(i64 <= i32)
!(i64 <= i64)
!(i64 == 0.5)
!(i64 == 1)
!(i64 == f32)
!(i64 == f64)
!(i64 == i32)
!(i64 == i64)
!(i64 == nil)
!(i64 > 0.5)
!(i64 > 1)
!(i64 > f32)
!(i64 > f64)
!(i64 > i)
!(i64 > i32)
!(i64 > i64)
!(i64 >= 0.5)
!(i64 >= 1)
!(i64 >= f32)
!(i64 >= f64)
!(i64 >= i)
!(i64 >= i32)
!(i64 >= i64)
!(i64 in array)
!(len("bar") <= i)
!(list != array)
!(list != list)
!(list != nil)
!(list == array)
!(list == list)
!(list == nil)
!(nil != "bar")
!(nil != "foo")
!(nil != 0.5)
!(nil != 1)
!(nil != add)
!(nil != array)
!(nil != div)
!(nil != f32)
!(nil != f64)
!(nil != false)
!(nil != foo)
!(nil != greet)
!(nil != half)
!(nil != i)
!(nil != i32)
!(nil != i64)
!(nil != list)
!(nil != nil)
!(nil != ok)
!(nil != score)
!(nil != true)
!(nil == "bar")
!(nil == "foo")
!(nil == 0.5)
!(nil == 1)
!(nil == add)
!(nil == array)
!(nil == div)
!(nil == f32)
!(nil == f64)
!(nil == false)
!(nil == foo)
!(nil == greet)
!(nil == half)
!(nil == i)
!(nil == i32)
!(nil == i64)
!(nil == list)
!(nil == nil)
!(nil == ok)
!(nil == score)
!(nil == true)
!(nil in array)
!(nil in list)
!(nil not in array)
!(nil not in list)
!(ok != false)
!(ok != nil)
!(ok != ok)
!(ok != true)
!(ok && false)
!(ok && ok)
!(ok && true)
!(ok == nil)
!(ok == ok)
!(ok == true)
!(ok and ok)
!(ok and true)
!(ok or false)
!(ok or ok)
!(ok or true)
!(ok || false)
!(ok || ok)
!(ok || true)
!(score != add)
!(score != div)
!(score != greet)
!(score != half)
!(score != nil)
!(score != score)
!(score == add)
!(score == div)
!(score == greet)
!(score == half)
!(score == nil)
!(score == score)
!(true != false)
!(true != nil)
!(true != ok)
!(true != true)
!(true && false)
!(true && ok)
!(true && true)
!(true == false)
!(true == nil)
!(true == ok)
!(true == true)
!(true and ok)
!(true and true)
!(true or ok)
!(true or true)
!(true || false)
!(true || ok)
!(true || true)
!all(array, false)
!all(array, ok)
!all(array, true)
!all(list, false)
!all(list, ok)
!all(list, true)
!any(array, i == #)
!any(array, ok)
!any(array, true)
!any(list, false)
!any(list, ok)
!any(list, true)
!false != not true
!false != ok
!false && 0.5 == 1
!false == ok
!false ? "foo" : 0.5
!false ? "foo" : f32
!false ? 0.5 : "foo"
!false ? 0.5 : f32
!false ? 1 : half
!false ? 1 : i
!false ? add : f32
!false ? add : i64
!false ? array : add
!false ? array : ok
!false ? div != half : map(list, i32)
!false ? div : array
!false ? div : greet
!false ? div : half
!false ? f32 : add
!false ? f32 : false
!false ? f64 : "foo"
!false ? foo : "bar"
!false ? half : 1
!false ? half : add
!false ? half : list
!false ? half : true
!false ? i : nil
!false ? i32 : list
!false ? i64 : foo
!false ? i64 : i64
!false ? nil : add
!false ? nil : f64
!false ? nil : foo
!false ? nil : half
!false ? ok : 1
!false ? score : "bar"
!false ? score : foo
!false ? score : ok
!false ? true : "foo"
!false or 0.5 > i32
!false or ok
!false || ok
!hasPrefix("foo", "foo")
!none(array, # > #)
!none(array, # >= #)
!none(array, false)
!none(array, ok)
!none(list, ok)
!none(list, true)
!not ("bar" == nil)
!not (1 <= 1)
!not (1 > 0.5)
!not (greet != score)
!not (greet == div)
!not (greet == nil)
!not (i32 == f64)
!not false
!not none(list, true)
!not ok
!not true
!ok
!ok != !true
!ok != ok
!ok && ok
!ok == ok
!ok ? "bar" : "foo"
!ok ? "bar" : foo
!ok ? "foo" : 0.5
!ok ? "foo" : list
!ok ? 0.5 : 1
!ok ? 0.5 : i
!ok ? 1 : array
!ok ? 1 : div
!ok ? 1 : f64
!ok ? 1 : list
!ok ? 1 : ok
!ok ? add : 0.5
!ok ? array : div
!ok ? array : f32
!ok ? array : foo
!ok ? array : i
!ok ? array : i32
!ok ? div : "foo"
!ok ? div : 1
!ok ? div : i
!ok ? f32 : "bar"
!ok ? f32 : add
!ok ? f32 : false
!ok ? f32 : greet
!ok ? f64 : "bar"
!ok ? f64 : "foo"
!ok ? f64 : 0.5
!ok ? f64 : half
!ok ? f64 : score
!ok ? false : ok
!ok ? foo : "foo"
!ok ? foo : f32
!ok ? foo : false
!ok ? foo : i32
!ok ? greet : div
!ok ? greet : list
!ok ? greet : nil
!ok ? half : f64
!ok ? i : "bar"
!ok ? i : array
!ok ? i : div
!ok ? i : foo
!ok ? i32 : 0.5
!ok ? i32 : f32
!ok ? i32 : greet
!ok ? i32 : nil
!ok ? i64 : 0.5
!ok ? i64 : 1
!ok ? i64 : f32
!ok ? i64 : true
!ok ? list : f32
!ok ? list : i
!ok ? nil : 1
!ok ? nil : array
!ok ? ok : f32
!ok ? ok : list
!ok and ok
!ok or f32 < i64
!ok or false or false
!ok or ok
!ok || ok
!one(array, false)
!one(array, ok)
!one(array, true)
!one(list, false)
!one(list, ok)
!one(list, true)
!reduce(array, false)
!reduce(array, ok)
!reduce(array, true)
!reduce(list, # != #)
!reduce(list, false)
!reduce(list, ok)
!reduce(list, true)
!true != all(array, ok)
!true ? "bar" : "foo"
!true ? "bar" : true
!true ? "foo" : "foo"
!true ? "foo" : 0.5
!true ? "foo" : i
!true ? 1 : "foo"
!true ? 1 : i64
!true ? add : 0.5
!true ? add : score
!true ? array : f64
!true ? array : list
!true ? div : add
!true ? f32 : false
!true ? f64 : f64
!true ? foo : 1
!true ? foo : array
!true ? greet : ok
!true ? greet : score
!true ? greet : true
!true ? half : f64
!true ? i : 1
!true ? i : add
!true ? i : ok
!true ? i32 : 1
!true ? i64 : false
!true ? i64 : i64
!true ? i64 : list
!true ? list : 0.5
!true ? list : nil
!true ? list : score
!true ? nil : 0.5
!true ? nil : false
!true ? nil : ok
!true ? ok : add
!true ? ok : div
!true ? score : false
!true ? true : f32
!true ? true : half
!true and foo != nil
!true || ok
"bar" != "bar" || ok
"bar" != foo.Bar
"bar" != foo?.Bar
"bar" + "bar" not in foo
"bar" + foo.Bar
"bar" + foo?.Bar
"bar" < foo.Bar
"bar" < foo?.Bar
"bar" < foo?.String()
"bar" <= foo.Bar
"bar" <= foo.String()
"bar" <= foo?.Bar
"bar" == foo.Bar
"bar" == foo?.Bar
"bar" == foo?.String()
"bar" > "bar" or ok ? f32 : i64
"bar" > foo.Bar
"bar" > foo?.String()
"bar" >= foo.Bar
"bar" >= foo.String()
"bar" >= foo?.Bar
"bar" contains foo.Bar
"bar" contains foo.String()
"bar" contains foo?.Bar
"bar" endsWith foo.Bar
"bar" endsWith foo?.Bar
"bar" endsWith foo?.String()
"bar" matches "bar" and ok
"bar" matches foo.Bar
"bar" matches foo.String()
"bar" matches foo?.Bar
"bar" matches foo?.String()
"bar" not contains foo.Bar
"bar" not contains foo?.Bar
"bar" not endsWith foo.Bar
"bar" not endsWith foo?.Bar
"bar" not endsWith foo?.String()
"bar" not matches foo.Bar
"bar" not matches foo.String()
"bar" not matches foo?.Bar
"bar" not matches foo?.String()
"bar" not startsWith foo.Bar
"bar" not startsWith foo?.Bar
"bar" not startsWith foo?.String()
"bar" startsWith "foo" or list == array
"bar" startsWith foo.Bar
"bar" startsWith foo.String()
"foo" != "foo" ? f64 : array
"foo" != "foo" or ok
"foo" != foo.Bar
"foo" != foo.String()
"foo" != foo?.Bar
"foo" != foo?.String()
"foo" + "bar" not in foo
"foo" + foo.Bar
"foo" + foo?.Bar
"foo" + foo?.String()
"foo" < "bar" and ok
"foo" < foo.Bar
"foo" < foo?.Bar
"foo" < foo?.String()
"foo" <= foo.Bar
"foo" <= foo?.Bar
"foo" == "bar" != ok
"foo" == "bar" and ok
"foo" == foo.Bar
"foo" == foo?.Bar
"foo" == foo?.String()
"foo" > foo.Bar
"foo" > foo.String()
"foo" > foo?.Bar
"foo" >= foo.Bar
"foo" >= foo.String()
"foo" >= foo?.Bar
"foo" >= foo?.String()
"foo" contains "bar" == ok
"foo" contains foo?.Bar
"foo" endsWith foo.Bar
"foo" endsWith foo?.Bar
"foo" matches "bar" ? add : div
"foo" matches "foo" || true ? greet : "bar"
"foo" matches foo.Bar
"foo" matches foo.String()
"foo" matches foo?.Bar
"foo" not contains foo.Bar
"foo" not contains foo?.Bar
"foo" not contains foo?.String()
"foo" not endsWith foo.Bar
"foo" not endsWith foo?.Bar
"foo" not matches foo.Bar
"foo" not matches foo?.Bar
"foo" not matches foo?.String()
"foo" not startsWith foo.Bar
"foo" not startsWith foo?.Bar
"foo" not startsWith foo?.String()
"foo" startsWith foo.Bar
"foo" startsWith foo?.Bar
("bar" not endsWith "bar") != ok
("bar" not endsWith "foo") != ok
("bar" not endsWith "foo") && false != nil
("bar" not matches "foo") || reduce(list, ok)
("foo" not matches "bar") == ok
(0.5 * 0.5) ** i
(0.5 * 0.5) ^ f32
(0.5 * 1) ** f64
(0.5 * 1) ** i
(0.5 * 1) ^ i32
(0.5 * f64) ^ f32
(0.5 * i) ^ i
(0.5 + 0.5) * f32
(0.5 + 0.5) ^ i32
(0.5 + 1) ^ i
(0.5 + f64) * f64
(0.5 + f64) / i32
(0.5 + i) ** i
(0.5 + i) ^ i
(0.5 + i64) ** f32
(0.5 + i64) / f32
(0.5 + i64) / i
(0.5 - 0.5) * (i32 - 0.5)
(0.5 - 0.5) * i64
(0.5 - 0.5) ** f32
(0.5 - 1) * i32
(0.5 - 1) ** f64
(0.5 - 1) ^ i64
(0.5 - f32) ** i
(0.5 - f64) * i
(0.5 - f64) / f32
(0.5 - f64) / f64
(0.5 - i) ^ f32
(0.5 - i32) ** (i32 * 1)
(0.5 - i32) / f64
(0.5 - i32) ^ f32
(0.5 - i64) * i
(0.5 - i64) / f64
(0.5 - i64) / i64
(0.5 / 0.5) ** f32
(0.5 / 0.5) ** i32
(0.5 / 0.5) ^ f64
(0.5 / 1) ^ f32
(0.5 / i) ** f64
(0.5 / i) ** i
(0.5 / i32) ** i
(0.5 / i32) ^ f32
(1 * 0.5) ** (f64 * 1)
(1 * 0.5) ** i32
(1 * 0.5) ^ f64
(1 * 1) ^ -1
(1 * 1) ^ f32
(1 * f32) ^ i32
(1 * i) ** i32
(1 * i32) ^ i
(1 * i64) ** i64
(1 + 0.5) ** i
(1 + 1) * i64
(1 + 1) / i
(1 + f32) ^ i
(1 + f64) ^ i
(1 + f64) ^ i32
(1 + i) ** f32
(1 + i) / f64
(1 + i) ^ i64
(1 + i32) * f64
(1 + i32) ^ f64
(1 - 0.5) * f32 ^ 1
(1 - 0.5) * i64
(1 - 0.5) / i
(1 - 0.5) ^ min(f32)
(1 - f32) * f32
(1 - f64) ** f64
(1 - i) * -i32
(1 - i32) ^ f32
(1 - i32) ^ i
(1 - i64) ** f32
(1 - i64) / f64
(1 - i64) / i64
(1 / 0.5) ** f32
(1 / 0.5) ^ i32
(1 / 1) ** (f64 * 0.5)
(1 / 1) ^ ceil(i64)
(1 / 1) ^ max(0.5)
(1 / f32) ^ f32
(1 / i) ^ f32
(1 / i32) ^ i
(1 / i64) ** i64
(f32 * 0.5) ** f64
(f32 * 0.5) ^ i32
(f32 * f32) ^ -f32
(f32 * f32) ^ i
(f32 * i) ^ -1
(f32 * i64) ** i
(f32 + f64) * i
(f32 + i) ^ f64
(f32 - 0.5) / f64
(f32 - 0.5) ^ f32
(f32 - 1) / f64
(f32 - 1) ^ f64
(f32 - f32) / i64
(f32 - i32) * i64
(f32 / 0.5) ^ f32
(f32 / i64) ^ f64
(f64 * 0.5) ** f32
(f64 * 0.5) ** i64
(f64 * f32) ** f64
(f64 * i64) ** f64
(f64 * i64) ** i32
(f64 + 0.5) * f32
(f64 + 0.5) * i64
(f64 + f32) ** get(array, i)
(f64 + f32) ** i32
(f64 + f64) * (i64 - i64)
(f64 + f64) ^ f64
(f64 + i) * (0.5 + i64)
(f64 + i32) ^ i64
(f64 + i64) ^ i
(f64 - 0.5) ** f64
(f64 - 1) ** i64
(f64 - 1) ^ i32
(f64 - f32) ** i
(f64 - f32) ^ i64
(f64 - i) * i32
(f64 - i32) / i
(f64 - i64) ** i
(f64 - i64) / f32
(f64 - i64) / f64
(f64 / 1) ** i64
(f64 / f32) ^ i
(f64 / f64) ** i32
(f64 / f64) ^ i32 ** 0.5
(false || ok) == ok
(i % i) ^ i
(i % i32) ^ (1 - i32)
(i % i64) ^ f64
(i * 0.5) ** f32
(i * 1) ^ f64
(i * 1) ^ i
(i * i64) ** f32
(i + 0.5) ** half(f64)
(i + 1) % i64
(i + 1) / i64
(i + i) ^ i64
(i + i32) * i64 ^ f64
(i + i32) / i32
(i + i32) ^ f32
(i + i64) ^ i32
(i - 0.5) / i64
(i - 1) ^ i64
(i / 0.5) ** f32
(i / f32) ^ f64
(i32 % 1) ** f32
(i32 % i) ** f32
(i32 % i32) ** i32
(i32 % i32) ^ i32
(i32 * 0.5) ^ f32
(i32 * 1) ^ i32
(i32 + 0.5) ** i64
(i32 + f32) * i64
(i32 + f64) / i
(i32 + i) / i
(i32 + i32) ^ i32
(i32 - 0.5) * f64
(i32 - 0.5) / i64
(i32 - 1) ^ f64
(i32 - f32) / i64
(i32 - i) % i64
(i32 - i) / f32
(i32 - i32) ^ (i32 * i)
(i32 - i64) * i32
(i32 - i64) * i32 * i64
(i32 / i) ** f32
(i32 / i) ^ i64
(i32 < f64 ? nil : i) .. i32
(i32 not in array) and ok
(i64 % i) ** f32
(i64 * 0.5) ^ f64
(i64 * f32) ^ i64
(i64 * f64) ^ i32
(i64 * i) ** score(1)
(i64 * i64) ** i ** 0.5
(i64 * i64) ^ i
(i64 + 0.5) * f32
(i64 + 0.5) ** i64
(i64 + 1) % i
(i64 + 1) ^ i
(i64 + f32) * -i32
(i64 + f32) ** i32
(i64 + f32) / f64
(i64 + f32) / i
(i64 + f32) / i32
(i64 + f64) * i32
(i64 + i) % i64
(i64 + i) / f64
(i64 + i32) * i64
(i64 + i64) / i64
(i64 - 0.5) / f64
(i64 - 0.5) ^ i64
(i64 - 1) ^ i32
(i64 - f32) ** f64
(i64 - f32) ^ i64
(i64 - i) ** i
(i64 - i32) * i64
(i64 / 1) ** f32
(i64 / f64) ** i32
(nil not in array) || ok
(ok || true) && (ok or true)
-((i64 + 1) % i32)
-(0.5 * 0.5)
-(0.5 * 1)
-(0.5 * f32)
-(0.5 * f64)
-(0.5 * i)
-(0.5 * i32)
-(0.5 * i64)
-(0.5 ** 0.5)
-(0.5 ** 1)
-(0.5 ** f32)
-(0.5 ** f64)
-(0.5 ** i)
-(0.5 ** i32)
-(0.5 ** i64)
-(0.5 + 0.5)
-(0.5 + 1)
-(0.5 + f32)
-(0.5 + f64)
-(0.5 + i)
-(0.5 + i32)
-(0.5 + i64)
-(0.5 - 0.5)
-(0.5 - 1)
-(0.5 - f32)
-(0.5 - f64)
-(0.5 - i)
-(0.5 - i32)
-(0.5 - i64)
-(0.5 / 0.5)
-(0.5 / 1)
-(0.5 / f32)
-(0.5 / f64)
-(0.5 / i)
-(0.5 / i32)
-(0.5 / i64)
-(0.5 ^ 0.5)
-(0.5 ^ 1)
-(0.5 ^ f32)
-(0.5 ^ f64)
-(0.5 ^ i)
-(0.5 ^ i32)
-(0.5 ^ i64)
-(1 % 1)
-(1 % i)
-(1 % i32)
-(1 % i64)
-(1 * 0.5)
-(1 * 1)
-(1 * f32)
-(1 * f64)
-(1 * i)
-(1 * i32)
-(1 * i64)
-(1 ** 0.5)
-(1 ** 1)
-(1 ** f32)
-(1 ** f64)
-(1 ** i)
-(1 ** i32)
-(1 ** i64)
-(1 + 0.5)
-(1 + 1)
-(1 + f32)
-(1 + f64)
-(1 + i)
-(1 + i32)
-(1 + i64)
-(1 - 0.5)
-(1 - 1)
-(1 - f32)
-(1 - f64)
-(1 - i)
-(1 - i32)
-(1 - i64)
-(1 / 0.5)
-(1 / 1)
-(1 / f32)
-(1 / f64)
-(1 / i)
-(1 / i32)
-(1 / i64)
-(1 ^ 0.5)
-(1 ^ 1)
-(1 ^ f32)
-(1 ^ f64)
-(1 ^ i)
-(1 ^ i32)
-(1 ^ i64)
-(f32 * 0.5)
-(f32 * 1)
-(f32 * f32)
-(f32 * f64)
-(f32 * i)
-(f32 * i32)
-(f32 * i64)
-(f32 ** 0.5)
-(f32 ** 1)
-(f32 ** f32)
-(f32 ** f64)
-(f32 ** i)
-(f32 ** i32)
-(f32 ** i64)
-(f32 + 0.5)
-(f32 + 1)
-(f32 + f32)
-(f32 + f64)
-(f32 + i)
-(f32 + i64)
-(f32 - 0.5)
-(f32 - 1)
-(f32 - f32)
-(f32 - i)
-(f32 - i32)
-(f32 - i64)
-(f32 / 0.5)
-(f32 / 1)
-(f32 / f32)
-(f32 / f64)
-(f32 / i)
-(f32 / i32)
-(f32 / i64)
-(f32 ^ 0.5)
-(f32 ^ 1)
-(f32 ^ f32)
-(f32 ^ f64)
-(f32 ^ i)
-(f32 ^ i32)
-(f32 ^ i64)
-(f64 * 0.5)
-(f64 * 1)
-(f64 * f32)
-(f64 * f64)
-(f64 * i)
-(f64 * i32)
-(f64 * i64)
-(f64 ** 0.5)
-(f64 ** 1)
-(f64 ** f32)
-(f64 ** f64)
-(f64 ** i)
-(f64 ** i32)
-(f64 ** i64)
-(f64 + 0.5)
-(f64 + 1)
-(f64 + f32)
-(f64 + i)
-(f64 + i32)
-(f64 + i64)
-(f64 - 0.5)
-(f64 - 1)
-(f64 - f32)
-(f64 - f64)
-(f64 - i)
-(f64 - i64)
-(f64 / 0.5)
-(f64 / 1)
-(f64 / f32)
-(f64 / f64)
-(f64 / i)
-(f64 / i64)
-(f64 ^ 0.5)
-(f64 ^ 1)
-(f64 ^ f32)
-(f64 ^ f64)
-(f64 ^ i)
-(f64 ^ i32)
-(f64 ^ i64)
-(i % 1)
-(i % i)
-(i % i32)
-(i % i64)
-(i * 0.5)
-(i * 1)
-(i * f32)
-(i * f64)
-(i * i)
-(i * i32)
-(i * i64)
-(i ** 0.5)
-(i ** 1)
-(i ** f64)
-(i ** i)
-(i ** i32)
-(i ** i64)
-(i + 0.5)
-(i + 1)
-(i + i32)
-(i + i64)
-(i - 0.5)
-(i - 1)
-(i - f32)
-(i - f64)
-(i - i ** 1)
-(i - i)
-(i - i32)
-(i - i64)
-(i / 0.5)
-(i / 1)
-(i / f32)
-(i / f64)
-(i / i)
-(i / i32)
-(i / i64)
-(i ^ 0.5)
-(i ^ 1)
-(i ^ f32)
-(i ^ f64)
-(i ^ i)
-(i ^ i32)
-(i ^ i64)
-(i32 % 1)
-(i32 % i)
-(i32 % i32)
-(i32 % i64)
-(i32 * 0.5)
-(i32 * 1)
-(i32 * f32)
-(i32 * f64)
-(i32 * i)
-(i32 * i32)
-(i32 * i64)
-(i32 ** 0.5)
-(i32 ** 1)
-(i32 ** f32)
-(i32 ** f64)
-(i32 ** i)
-(i32 ** i32)
-(i32 ** i64)
-(i32 + 0.5)
-(i32 + 1)
-(i32 + f32)
-(i32 + f64)
-(i32 + i)
-(i32 + i32)
-(i32 + i64)
-(i32 - 0.5)
-(i32 - 1)
-(i32 - f32)
-(i32 - f64)
-(i32 - i)
-(i32 - i32)
-(i32 - i64)
-(i32 / 0.5)
-(i32 / 1)
-(i32 / f64)
-(i32 / i)
-(i32 / i32)
-(i32 / i64)
-(i32 ^ 0.5)
-(i32 ^ 1)
-(i32 ^ f32)
-(i32 ^ f64)
-(i32 ^ i)
-(i32 ^ i32)
-(i32 ^ i64)
-(i64 % 1)
-(i64 % i)
-(i64 % i32)
-(i64 % i64)
-(i64 * 0.5)
-(i64 * 1)
-(i64 * f32)
-(i64 * f64)
-(i64 * i)
-(i64 * i32)
-(i64 * i64)
-(i64 ** 0.5)
-(i64 ** 1)
-(i64 ** f32)
-(i64 ** f64)
-(i64 ** i)
-(i64 ** i32)
-(i64 ** i64)
-(i64 + 0.5)
-(i64 + 1)
-(i64 + f32)
-(i64 + f64)
-(i64 + i32)
-(i64 + i64)
-(i64 - 0.5)
-(i64 - 1)
-(i64 - f32)
-(i64 - f64)
-(i64 - i)
-(i64 - i32)
-(i64 - i64)
-(i64 / 0.5)
-(i64 / 1)
-(i64 / f32)
-(i64 / f64)
-(i64 / i)
-(i64 / i32)
-(i64 / i64)
-(i64 ^ 0.5)
-(i64 ^ 1)
-(i64 ^ f32)
-(i64 ^ f64)
-(i64 ^ i)
-(i64 ^ i32)
-(i64 ^ i64)
-(max(f32) ^ i32)
-(min(0.5) ^ i32)
--(f64 ** 0.5)
--(i64 ** i64)
--0.5
--1
--ceil(1)
--f32
--f64
--f64 ** i64
--float(f64)
--i
--i32
--i64
-0.5 != f32
-0.5 != i32
-0.5 * 1 ** 1
-0.5 * f32
-0.5 * f64
-0.5 * i32
-0.5 * i64
-0.5 ** -1
-0.5 ** ceil(i)
-0.5 ** f32
-0.5 ** f64
-0.5 ** i
-0.5 ** i32
-0.5 ** i64
-0.5 + f64
-0.5 + i
-0.5 + i32
-0.5 + i64
-0.5 - abs(i)
-0.5 - f32
-0.5 - f64
-0.5 - i
-0.5 - i32
-0.5 - i64
-0.5 / f32
-0.5 / i
-0.5 / i32
-0.5 < i32
-0.5 < i64
-0.5 <= 0.5 + 0.5
-0.5 <= f32
-0.5 <= i
-0.5 <= i32
-0.5 <= i64
-0.5 == f32
-0.5 == f64
-0.5 == i
-0.5 == i32
-0.5 == i32 ^ i32
-0.5 == i64
-0.5 > f32
-0.5 > i
-0.5 >= f32
-0.5 >= f32 ? f32 : i32
-0.5 >= f64
-0.5 >= i
-0.5 >= i32
-0.5 >= i64
-0.5 ^ f32
-0.5 ^ f64
-0.5 ^ float(f64)
-0.5 ^ i32
-0.5 ^ i64
-0.5 in array
-0.5 not in sort(array)
-1 != -i
-1 != f32
-1 != f64
-1 != i32
-1 != i64
-1 % i
-1 % i32
-1 * array[i]
-1 * f32
-1 * f64
-1 * i
-1 * i32
-1 * i64
-1 ** (f32 + f32)
-1 ** (i + i64)
-1 ** ceil(0.5)
-1 ** f32
-1 ** f64
-1 ** i
-1 ** i64 ^ 1
-1 + -i32
-1 + f32
-1 + f64
-1 + i
-1 + i32
-1 + i64
-1 + reduce(array, #)
-1 + reduce(list, f32)
-1 - f64
-1 - i
-1 - i % i32
-1 - i32
-1 - i64
-1 .. i
-1 .. i64
-1 / f32
-1 / f64
-1 / i
-1 / i32
-1 < f64
-1 < i
-1 < i64
-1 <= -1
-1 <= f64
-1 <= i
-1 <= i32
-1 <= i64
-1 == f32
-1 == f64
-1 == floor(f64)
-1 == i
-1 == i32
-1 == i64
-1 > f32
-1 > i
-1 > i64
-1 >= f32 * f32
-1 >= f64
-1 >= i32
-1 >= i64
-1 ^ f32
-1 ^ f64
-1 ^ i32
-1 ^ i64
-1 in array
-1 not in array
-abs(0.5)
-abs(1)
-abs(f32)
-abs(f64)
-abs(i)
-abs(i32)
-abs(i64)
-add(i, 1)
-add(i, i)
-array[1]
-array[i32]
-array[i64]
-array[i]
-bitand(i64, i32)
-bitnand(1, i)
-bitnot(1)
-bitnot(i)
-bitnot(i32)
-bitnot(i64)
-bitor(1, i64)
-bitor(i, i32)
-bitshl(i, 1)
-bitshl(i, i32)
-bitshl(i, i64)
-bitshl(i64, i32)
-bitshr(i, i)
-bitshr(i64, i32)
-bitushr(i, i32)
-bitxor(1, 1)
-bitxor(i, i32)
-ceil(0.5)
-ceil(1)
-ceil(f32)
-ceil(f64)
-ceil(i)
-ceil(i32)
-ceil(i64)
-count(array, false)
-count(array, ok)
-count(array, true)
-count(list, ok)
-count(list, true)
-div(1, 1)
-f32
-f32 != i32
-f32 * i64
-f32 ** (i + 1)
-f32 ** f32
-f32 ** f64
-f32 ** i
-f32 ** i32
-f32 ** i64
-f32 + i32
-f32 - i
-f32 - round(i)
-f32 / f32
-f32 / f64
-f32 / i
-f32 < f32 ** 0.5
-f32 < f64
-f32 < i
-f32 < i32
-f32 <= f32
-f32 <= i
-f32 <= i32
-f32 <= i64
-f32 == f32
-f32 == f64
-f32 > 0.5 ? f32 : "bar"
-f32 > f32
-f32 > f64
-f32 >= f32
-f32 >= f64
-f32 >= i64
-f32 ^ i
-f32 ^ i32
-f32 ^ i64
-f32 in array
-f32 not in array
-f64
-f64 != f32
-f64 != f64
-f64 != i
-f64 != i32
-f64 * -1
-f64 * -f64
-f64 * f32
-f64 * f64
-f64 * i
-f64 * i32
-f64 * i64
-f64 ** 0.5 ** f32
-f64 ** f32
-f64 ** i
-f64 ** i32
-f64 + f32
-f64 + i64
-f64 - 0.5 / i64
-f64 - f32
-f64 - i
-f64 - i32
-f64 - i64
-f64 - int(f64)
-f64 / f32
-f64 / f64
-f64 / i
-f64 / i32
-f64 / i64
-f64 < 0.5 ^ f32
-f64 < f64
-f64 < f64 ** 1
-f64 < half(0.5)
-f64 < half(f64)
-f64 < i
-f64 < i ^ f32
-f64 < i32
-f64 < i64
-f64 <= f32
-f64 <= f64
-f64 == f64
-f64 == i
-f64 == i32
-f64 == i64
-f64 > f32
-f64 > f32 ? false : array
-f64 > f64
-f64 > i32
-f64 > i64
-f64 >= f32
-f64 >= f32 / f64
-f64 >= f64
-f64 >= i32
-f64 ^ f32
-f64 ^ f64
-f64 ^ i64
-f64 not in array
-find(array, ok)
-find(array, true)
-findIndex(array, # <= #)
-findIndex(array, ok)
-findIndex(array, true)
-findIndex(list, ok)
-findIndex(list, true)
-findLast(array, # <= #)
-findLast(array, ok)
-findLast(array, true)
-findLastIndex(array, ok)
-findLastIndex(array, true)
-findLastIndex(list, ok)
-findLastIndex(list, true)
-first(array)
-float(0.5 ** 0.5)
-float(0.5 ^ 0.5)
-float(0.5)
-float(1)
-float(bitnot(i64))
-float(f32)
-float(f64)
-float(i)
-float(i32)
-float(i64)
-floor(0.5)
-floor(1)
-floor(f32)
-floor(f64)
-floor(i)
-floor(i32)
-floor(i64)
-get(array, 1)
-get(array, i)
-get(array, i32)
-get(array, i64)
-half(-0.5)
-half(-1)
-half(0.5)
-half(1)
-half(f32 + i64)
-half(f64)
-half(median(array))
-i
-i != f32
-i != f64
-i != f64 ? foo : 1
-i != i
-i != i + f64
-i != i32
-i != i64
-i % i32
-i % i64
-i * abs(0.5)
-i * f64
-i * i
-i * i64
-i * reduce(array, 0.5)
-i ** f32
-i ** f64
-i ** i
-i + f32
-i + f64
-i + i32
-i + i64 * 1
-i - f32
-i - i64
-i .. i
-i .. i64
-i / f32
-i / i64
-i < f32
-i < half(1)
-i < i
-i < i64
-i <= 0.5 ? half : "bar"
-i <= 1 - 0.5
-i <= f32
-i <= i
-i <= i32
-i <= i64
-i <= i64 ** 0.5
-i == f32
-i == f64
-i == f64 ^ f32
-i == i
-i == i32
-i > f32
-i > i
-i > i32
-i >= f32
-i >= f64
-i >= i
-i >= i64
-i >= score(1)
-i ^ 0.5 ** 0.5
-i ^ f32
-i ^ f32 ^ 0.5
-i ^ f64
-i ^ i
-i ^ i64
-i in array
-i not in array
-i32
-i32 != f32
-i32 != i
-i32 != i32 ** 1
-i32 != i64
-i32 % i
-i32 % i32
-i32 % i64
-i32 * i
-i32 * i32
-i32 * i64
-i32 ** f32
-i32 ** f64
-i32 ** i64
-i32 + f32
-i32 + i
-i32 + i32
-i32 - f32
-i32 .. i32
-i32 / i32
-i32 / i64
-i32 < i
-i32 < i32
-i32 < i64
-i32 < round(f64)
-i32 <= f64
-i32 <= i
-i32 <= i32
-i32 <= i64
-i32 == 1 % i
-i32 == f32
-i32 == f64
-i32 == i64
-i32 == max(1)
-i32 > f32
-i32 > f64
-i32 > i
-i32 > i ** 0.5
-i32 > i32
-i32 > i64
-i32 >= f64
-i32 >= i
-i32 >= i == nil
-i32 >= i32
-i32 ^ f32
-i32 ^ i32
-i32 ^ i64
-i32 ^ score(1)
-i32 in array
-i64
-i64 != f32
-i64 != f64
-i64 != i32
-i64 != i64
-i64 != i64 ? score : foo
-i64 * (1 + f64)
-i64 * f32
-i64 * i
-i64 * i32
-i64 * i64
-i64 * indexOf("foo", "bar")
-i64 ** i
-i64 ** i32
-i64 + f32
-i64 + i
-i64 + i32
-i64 + i64
-i64 - f32
-i64 - i
-i64 - i32
-i64 .. i
-i64 .. i32
-i64 .. i64
-i64 / f64
-i64 / i32
-i64 < f32
-i64 < f64
-i64 < half(f64)
-i64 < i32
-i64 < i64
-i64 <= i
-i64 <= i32
-i64 == 1 ^ i64
-i64 == f32
-i64 == f64
-i64 == i
-i64 == i32
-i64 > f32
-i64 > f64
-i64 > i
-i64 > i32
-i64 >= f32
-i64 >= i
-i64 >= i32
-i64 ^ f64
-i64 ^ float(i)
-i64 ^ i
-i64 ^ i32
-i64 ^ i64
-i64 in array
-i64 not in array
-int(0.5)
-int(1)
-int(f32)
-int(f64)
-int(i)
-int(i32)
-int(i64)
-last(array)
-len("bar")
-len("foo")
-len(array)
-len(list)
-max(0.5)
-max(0.5, 0.5, f64)
-max(1)
-max(f32)
-max(f64)
-max(i)
-max(i, 0.5)
-max(i32 - 1)
-max(i32)
-max(i32, f32)
-max(i64 * 0.5)
-max(i64)
-max(i64, f64)
-max(i64, i)
-mean(array)
-median(array)
-min(-1)
-min(0.5)
-min(1)
-min(1, 0.5)
-min(f32)
-min(f32, 1)
-min(f64)
-min(float(0.5))
-min(i)
-min(i, 1)
-min(i32)
-min(i32, 0.5)
-min(i64)
-min(i64, i, 0.5)
-reduce(array, #)
-reduce(array, -#)
-reduce(array, 0.5)
-reduce(array, 1)
-reduce(array, 1) - f32
-reduce(array, f64)
-reduce(array, i)
-reduce(array, i32)
-reduce(array, i64)
-reduce(list, 0.5)
-reduce(list, 1)
-reduce(list, f32)
-reduce(list, f64)
-reduce(list, i)
-reduce(list, i32)
-round(0.5)
-round(1)
-round(f32)
-round(f64)
-round(i)
-round(i32)
-round(i64)
-score(1)
-score(1, 1)
-score(1, i)
-score(i)
-score(i32 + i)
-score(int(i))
-sum(array)
-sum(i .. 1)
0.5 != 0.5 == ok
0.5 != f64 ? list : f32
0.5 != f64 and !true
0.5 != f64 and ok
0.5 != i == ok
0.5 != i32 && ok
0.5 != i32 == ok
0.5 != i32 ? ok : ok
0.5 != i32 and 1 > f64
0.5 != nil == ok
0.5 * 0.5 * f64
0.5 * 0.5 / f32
0.5 * 0.5 / f64
0.5 * 0.5 < f64
0.5 * 0.5 >= i64
0.5 * 1 * i64
0.5 * 1 <= f32
0.5 * 1 > i32
0.5 * 1 not in array
0.5 * f32 * f32
0.5 * f32 * i32
0.5 * f32 + f32
0.5 * f32 - f64
0.5 * f32 / half(1)
0.5 * f32 == i32
0.5 * f32 > i
0.5 * f64 != i64
0.5 * f64 < i
0.5 * f64 <= i
0.5 * i + i
0.5 * i + mean(array)
0.5 * i - i32
0.5 * i == 0.5 ? ok : ok
0.5 * i32 / f32
0.5 * i64 < f64
0.5 * i64 == 1 ** i64
0.5 ** 0.5 != i64
0.5 ** 0.5 * max(1)
0.5 ** 0.5 ** i64
0.5 ** 0.5 + -f32
0.5 ** 0.5 < f64
0.5 ** 0.5 == i
0.5 ** 0.5 ^ f32
0.5 ** 0.5 not in array
0.5 ** 1 != i
0.5 ** 1 != i32
0.5 ** 1 - f64
0.5 ** 1 / f64
0.5 ** 1 / i32
0.5 ** 1 ^ i64
0.5 ** f32 + f32 / i64
0.5 ** f32 <= f32
0.5 ** f32 ^ i
0.5 ** f64 * f64
0.5 ** f64 > f64 ? 1 : nil
0.5 ** f64 >= i64
0.5 ** i / i
0.5 ** i > i
0.5 ** i32 * i32
0.5 ** i32 > f64
0.5 ** i32 >= mean(array)
0.5 + 0.5 != i
0.5 + 0.5 == i32
0.5 + 0.5 > f32
0.5 + 1 != f64
0.5 + 1 + i32
0.5 + 1 - i32
0.5 + 1 < float(1)
0.5 + 1 == f32
0.5 + f32 - i64
0.5 + f32 <= ceil(f32)
0.5 + f32 <= i32
0.5 + f32 > f32
0.5 + f64 != i64
0.5 + f64 <= i32
0.5 + f64 == 1 / 0.5
0.5 + i + i
0.5 + i > i64
0.5 + i in array
0.5 + i32 - i64
0.5 + i32 <= f32
0.5 + i64 - i
0.5 + i64 > i64 * 0.5
0.5 - 0.5 - i32
0.5 - 0.5 >= f32
0.5 - 0.5 >= i
0.5 - 0.5 >= i32
0.5 - 1 + i
0.5 - 1 + i / i
0.5 - 1 <= f64
0.5 - f32 != i64
0.5 - f32 >= i64
0.5 - f64 - f32
0.5 - f64 < i
0.5 - f64 in array
0.5 - i != i64
0.5 - i + i
0.5 - i > f32
0.5 - i32 != f32
0.5 - i64 + -f64
0.5 - i64 == i
0.5 - i64 not in array
0.5 / 0.5 + i
0.5 / 0.5 - i
0.5 / 0.5 - i32
0.5 / 0.5 - i64
0.5 / 0.5 / half(0.5)
0.5 / 0.5 < i32
0.5 / 0.5 == i64
0.5 / 0.5 >= f32
0.5 / 0.5 >= f64
0.5 / 1 * i
0.5 / 1 / f64
0.5 / 1 < f64
0.5 / 1 == i
0.5 / 1 > f32
0.5 / 1 >= i32
0.5 / 1 not in array
0.5 / f32 * f64
0.5 / f64 + f64
0.5 / f64 - i
0.5 / f64 / f64
0.5 / f64 < i
0.5 / f64 == f32
0.5 / i != i64
0.5 / i * i64
0.5 / i / i32
0.5 / i <= i
0.5 / i32 + i64
0.5 / i32 > i ^ i
0.5 / i32 > i64
0.5 / i32 >= f64
0.5 / i64 != f64
0.5 / i64 != i
0.5 / i64 != min(f32)
0.5 / i64 * i32
0.5 < 0.5 ? f32 : array
0.5 < 0.5 ? foo : greet
0.5 < 1 == ok
0.5 < 1 || ok
0.5 < f32 && ok
0.5 < f32 || ok
0.5 <= 0.5 ? half : trimPrefix(nil)
0.5 <= f64 ? i : i64
0.5 <= f64 || ok
0.5 == 1 and ok
0.5 == 1 || ok
0.5 == array[ok ? 0.5 : score]
0.5 == f32 and i64 == i32
0.5 == f64 ? i : (false ? i : i64)
0.5 == f64 and i64 == 0.5
0.5 == i or ok
0.5 == i32 and ok
0.5 == i64 and ok
0.5 == nil or "foo" endsWith "bar"
0.5 == nil or ok
0.5 == nil || ok
0.5 > 0.5 == ok
0.5 > array[i64]
0.5 > f32 and ok
0.5 > i && 0.5 < i64
0.5 > i64 ? -i : array
0.5 >= 0.5 ? array[i64] : f32
0.5 >= 0.5 and ok
0.5 >= i && 1 < 0.5
0.5 >= i32 == ok
0.5 >= i32 and ok
0.5 ^ 0.5 == f64
0.5 ^ 0.5 >= i32
0.5 ^ 0.5 >= i64
0.5 ^ 1 ** i64
0.5 ^ 1 - f32
0.5 ^ 1 < f32
0.5 ^ 1 < i
0.5 ^ 1 <= i32
0.5 ^ 1 > f64 / 1
0.5 ^ 1 >= i
0.5 ^ f32 * i
0.5 ^ f32 ** i64
0.5 ^ f32 <= i32
0.5 ^ f32 > i64
0.5 ^ f32 >= i
0.5 ^ f64 - i64
0.5 ^ f64 / f32
0.5 ^ f64 < f32
0.5 ^ f64 > i32
0.5 ^ i != f64
0.5 ^ i * reduce(array, i)
0.5 ^ i ** floor(0.5)
0.5 ^ i / (0.5 + i32)
0.5 ^ i < -f64
0.5 ^ i <= i32
0.5 ^ i >= i64
0.5 ^ i32 * reduce(list, f64)
0.5 ^ i32 ** f32
0.5 ^ i32 < f32 ? ok : i32
0.5 ^ i32 == i64
0.5 ^ i32 ^ f64
0.5 ^ i32 in array
0.5 ^ i64 * i
0.5 ^ i64 ** i
0.5 ^ i64 ** i64
0.5 ^ i64 > i32
0.5 in array != ok
0.5 in array && ok
1 != 0.5 != ok
1 != 0.5 and 1 == 1
1 != 1 && ok
1 != 1 ? f64 : 0.5 > i
1 != 1 ? list : score
1 != f32 != ok
1 != f32 ? ok : half
1 != i or ok
1 != i64 ? add : div
1 != nil && ok
1 != nil == ok
1 != nil or not false
1 % 1 != i
1 % 1 != i32
1 % 1 % i
1 % 1 / f32
1 % 1 / i32
1 % 1 < f64
1 % 1 < i
1 % 1 == f64
1 % 1 == i ? nil : 0.5
1 % 1 == i32
1 % array[i32]
1 % array[i]
1 % i != -i64
1 % i != 1 != nil
1 % i - i64
1 % i < i32
1 % i >= f64
1 % i >= i
1 % i not in array
1 % i32 != i
1 % i32 <= f32
1 % i32 > i64
1 % i32 >= f64
1 % i64 - f32
1 % i64 < score(i)
1 % i64 > f32
1 * 0.5 + f64
1 * 0.5 + i32
1 * 0.5 + round(f64)
1 * 0.5 / i
1 * 0.5 / i64
1 * 0.5 < i64
1 * 0.5 == f32
1 * 0.5 >= f32
1 * 1 - i32
1 * 1 <= int(i)
1 * 1 >= f32
1 * f32 != f64 - 0.5
1 * f32 <= reduce(array, #)
1 * f32 >= f64
1 * f64 * i64
1 * f64 <= i64
1 * f64 > i
1 * f64 >= f64
1 * i * f32
1 * i - i32
1 * i / f64
1 * i < f32
1 * i > i32
1 * i not in array
1 * i32 + i32
1 * i32 - i
1 * i32 < i
1 * i64 * f32
1 * i64 + i
1 * i64 - f64
1 * i64 / f64
1 * i64 <= f64
1 * i64 in array
1 ** 0.5 * i
1 ** 0.5 ** f32
1 ** 0.5 ** f64
1 ** 0.5 ** i64
1 ** 0.5 - f32
1 ** 0.5 - i32
1 ** 0.5 - i64
1 ** 0.5 < -f32
1 ** 0.5 > i
1 ** 0.5 > i64
1 ** 0.5 ^ f64
1 ** 1 ** f64
1 ** 1 + f64
1 ** 1 + i64
1 ** 1 - round(0.5)
1 ** 1 / f64
1 ** 1 < f32
1 ** 1 == 0.5 + i32
1 ** 1 >= i
1 ** 1 >= i32
1 ** 1 ^ i
1 ** 1 ^ i32
1 ** 1 in array
1 ** array[i32]
1 ** f32 / i32
1 ** f32 / i64
1 ** f32 <= f32
1 ** f32 <= i64
1 ** f32 == i64 ? i32 : array
1 ** f32 >= f32
1 ** f32 >= i
1 ** f32 ^ f32
1 ** f32 ^ i64
1 ** i + i32
1 ** i >= i
1 ** i32 != i32
1 ** i32 + f32
1 ** i32 + i64
1 ** i64 <= f32
1 ** i64 <= f64
1 ** i64 <= i32
1 ** i64 > f32
1 + 0.5 != i32
1 + 0.5 + i
1 + 0.5 - i64
1 + 0.5 < f32
1 + 0.5 < i
1 + 0.5 == f64
1 + 0.5 == f64 != nil
1 + 0.5 > i64
1 + 0.5 not in array
1 + 1 != 0.5 ? 0.5 : half
1 + 1 - f32
1 + 1 - i
1 + 1 < i
1 + 1 == f64 * i64
1 + 1 > f32
1 + 1 >= half(0.5)
1 + 1 >= i
1 + f32 != i32
1 + f32 < i32
1 + f32 <= i
1 + f32 > i64
1 + f64 == i64
1 + f64 >= f64
1 + i .. i32
1 + i <= ceil(f32)
1 + i <= f64
1 + i >= min(i64)
1 + i32 != i32
1 + i32 - f64
1 + i32 < f32
1 + i32 < i32
1 + i32 <= f64
1 + i32 > reduce(array, #)
1 + i32 >= f64
1 + i64 != i32
1 + i64 != i64
1 + i64 < i32
1 + i64 <= i64
1 - 0.5 != f32
1 - 0.5 + i
1 - 0.5 - f32
1 - 0.5 <= i32
1 - 0.5 <= i64
1 - 1 < i64 ? 0.5 : "foo"
1 - 1 <= i32 + i64
1 - 1 == f64
1 - 1 > i32 / i32
1 - f32 != f32
1 - f32 <= i64
1 - f64 != f32
1 - f64 + f32
1 - f64 + i - 0.5
1 - f64 <= i
1 - f64 in array
1 - f64 not in array
1 - i > f64
1 - i > i
1 - i > i32
1 - i >= i64
1 - i not in array
1 - i32 < i32
1 - i32 < i64
1 - i32 == i32
1 - i64 <= i32
1 .. i != list
1 / 0.5 <= abs(f32)
1 / 0.5 <= i32
1 / 0.5 == f64
1 / 0.5 > f32
1 / 0.5 >= i
1 / 0.5 >= i - i
1 / 0.5 >= i32
1 / 1 != i32
1 / 1 * f32
1 / 1 <= f64
1 / 1 in array
1 / f32 != f64
1 / f32 / i64
1 / f32 <= f32
1 / f32 <= f64
1 / f32 == i32
1 / f32 == i32 / i
1 / f32 > f32
1 / f32 >= f64
1 / f64 + f64
1 / f64 < f32
1 / f64 == f64
1 / i * f32
1 / i / f64
1 / i < i
1 / i == f64
1 / i >= i32
1 / i in map(list, 1)
1 / i32 > f32
1 / i32 >= i64
1 / i64 * i
1 / i64 > f32 / f64
1 / i64 > f64
1 / i64 >= f64
1 < 1 == ok
1 < 1 and half == div
1 < 1 and ok
1 < array[get(array, i32)]
1 < array[i32]
1 < f32 != not true
1 < f64 || ok
1 < i ? array : foo
1 < i32 || 1 >= f32
1 < i64 == ok
1 < i64 ? ok : list
1 <= 1 == ok
1 <= 1 || add == add
1 <= f32 && ok
1 <= f64 || ok
1 <= i32 ? foo : f32
1 == 0.5 ? i32 : greet
1 == 0.5 and ok
1 == 1 || ok
1 == f64 && 0.5 != nil
1 == f64 || ok
1 == i32 && ok
1 == i32 == ok
1 == i64 == ok
1 == nil ? ok : half
1 > 0.5 == ok
1 > 1 || add != greet
1 > array[i64]
1 > f32 && ok
1 > f32 == reduce(array, ok)
1 > f64 != ok
1 > i == ok
1 > i64 or i != 1
1 >= 1 != (nil not in list)
1 >= f32 ? i64 : half
1 >= f64 ? ok : half
1 >= i and ok
1 ^ 0.5 != f32
1 ^ 0.5 != i
1 ^ 0.5 ** f32
1 ^ 0.5 ** i32
1 ^ 0.5 - i32
1 ^ 0.5 < i32
1 ^ 0.5 <= f64
1 ^ 0.5 == i
1 ^ 0.5 ^ f32
1 ^ 0.5 ^ i64
1 ^ 1 != f64
1 ^ 1 != i64
1 ^ 1 ** i
1 ^ 1 + f64
1 ^ 1 / i
1 ^ 1 < i
1 ^ 1 < i64
1 ^ 1 >= i
1 ^ 1 >= i32
1 ^ f32 < i32
1 ^ f32 <= f64
1 ^ f64 / f64
1 ^ f64 == f32
1 ^ f64 > f32
1 ^ f64 >= 1 / f64
1 ^ i != i * f32
1 ^ i - i32
1 ^ i < i
1 ^ i32 * i32
1 ^ i32 ** i64
1 ^ i32 / i
1 ^ i32 >= i32
1 ^ i32 >= i64
1 ^ i64 * i64
1 ^ i64 ** reduce(list, 1)
1 ^ i64 - i64
1 ^ i64 / f64
1 ^ i64 > i
1 ^ i64 >= i32 + i32
1 in array ? f32 : foo
[!false]
[!ok]
[!true]
["bar" + "foo"]
["bar" < "bar"]
["bar" not contains "bar"]
[-0.5]
[-1]
[-f32]
[-f64]
[-i64]
[0.5 != f32]
[0.5 != i]
[0.5 * 0.5]
[0.5 * f32]
[0.5 ** i]
[0.5 - 0.5]
[0.5 - i]
[0.5 / i32]
[0.5 <= i32, half]
[0.5 > 1]
[0.5 > f32]
[0.5 > i64]
[0.5 >= f64]
[0.5 ^ 0.5]
[1 != 1]
[1 * 0.5]
[1 ** 0.5]
[1 + i64, add]
[1 == i64]
[1 == i]
[[f32]]
[add != nil]
[add, add]
[add, f32]
[add, i]
[add]
[all(list, false)]
[any(list, ok)]
[array, add]
[array, array]
[array, f32]
[array, greet]
[array, i64]
[array, i]
[array, list]
[array, ok, add]
[array, string(nil)]
[array]
[bitnot(1)]
[ceil(i32)]
[div(1, 1)]
[div, add]
[div, foo]
[div, i32]
[div, i64, array]
[div]
[f32 * i]
[f32 + f64]
[f32 >= i]
[f32, f64]
[f32, foo, greet]
[f32, greet]
[f32, i32]
[f32, list]
[f32, ok]
[f32, score]
[f32]
[f64 + f64]
[f64 / f64]
[f64 < 0.5]
[f64 < f32]
[f64 < i64]
[f64 <= 1]
[f64 in array]
[f64, add]
[f64, f64]
[f64, half]
[f64, i64]
[f64]
[f64] == array
[find(array, true)]
[findIndex(list, false)]
[findLast(list, ok)]
[float(0.5)]
[float(1)]
[foo, add]
[foo, array]
[foo, half]
[foo, i]
[foo, ok]
[foo, reduce(array, #)]
[foo.Bar]
[foo.Qux]
[foo?.Bar, f32, f64]
[foo?.Bar, i32]
[foo?.Bar]
[foo?.Qux]
[foo?.String()]
[foo]
[greet != nil]
[greet, array]
[greet, div]
[greet, foo]
[greet, greet]
[greet, half]
[greet, i64]
[greet, list]
[greet]
[greet] == list
[groupBy(array, "bar")]
[groupBy(array, #), half]
[groupBy(array, #)]
[groupBy(array, f64)]
[groupBy(list, #)?.Qux]
[half(0.5)]
[half(f64)]
[half(i64 ^ 1)]
[half, array]
[half, div]
[half, f64]
[half, i64 < f64]
[half, list]
[half]
[i != i64]
[i .. 1]
[i / i]
[i < i64, score]
[i <= 0.5]
[i == i32]
[i >= i32]
[i ^ 1]
[i, array, list]
[i, array]
[i, greet("bar")]
[i, greet]
[i, i32]
[i, i]
[i, list]
[i32 < i]
[i32 > 1]
[i32, -1]
[i32, div]
[i32, f64]
[i32, i32]
[i32, list]
[i32, type(greet)]
[i32]
[i64 != f64]
[i64 + 0.5]
[i64 / f64]
[i64 <= i64]
[i64 >= 1]
[i64 ^ 1]
[i64, div]
[i64, foo]
[i64, half]
[i64, score]
[i64]
[i]
[list != nil]
[list, div]
[list, f32]
[list, greet]
[list, half]
[list, i]
[list, ok]
[list]
[map(array, #)]
[map(array, add)]
[map(array, f64)]
[map(array, foo)]
[max(1)]
[nil != 0.5]
[not false]
[ok ? 1 : greet]
[ok, f32]
[ok, half]
[ok, i64]
[ok, i]
[ok, list, 0.5] == list
[ok, ok]
[ok]
[reduce(array, foo)]
[reduce(list, #)]
[reduce(list, div)]
[score == nil]
[score, div]
[score, f32]
[score, f64]
[score, greet]
[score, half]
[score, one(array, # > i32)]
[score, score]
[score]
[string(0.5)]
[string(1)]
[string(foo)]
[string(i)]
[string(i64)]
[toJSON(list)]
[trimPrefix("bar")]
[true ? add : f64]
[true and ok]
[true || ok]
[type(1)]
[type(add)]
[type(div)]
[type(greet)]
[type(nil)]
abs(-0.5)
abs(-1)
abs(-f32)
abs(-f64)
abs(-i)
abs(-i32)
abs(-i64)
abs(0.5 * 0.5)
abs(0.5 * 1)
abs(0.5 * i)
abs(0.5 * i64)
abs(0.5 ** 0.5)
abs(0.5 ** 1)
abs(0.5 ** i32)
abs(0.5 + 0.5)
abs(0.5 + 1)
abs(0.5 + f32)
abs(0.5 + i)
abs(0.5 + i64)
abs(0.5 - 0.5)
abs(0.5 - 1)
abs(0.5 - i)
abs(0.5 - i32)
abs(0.5 - i64)
abs(0.5 / 0.5)
abs(0.5 / 1)
abs(0.5 / f64)
abs(0.5 ^ 0.5)
abs(0.5 ^ 1)
abs(0.5 ^ f32)
abs(0.5) - i32
abs(0.5) / f32
abs(0.5) < f64
abs(0.5) < i32
abs(0.5) <= i64
abs(0.5) == -0.5
abs(0.5) == half(1)
abs(0.5) > i32
abs(0.5) >= f64
abs(0.5) ^ i64
abs(0.5) not in array
abs(1 * f32)
abs(1 * f64)
abs(1 * i32)
abs(1 ** 0.5)
abs(1 ** 1)
abs(1 ** i)
abs(1 + 1)
abs(1 + i)
abs(1 + i64)
abs(1 - 0.5)
abs(1 - 1)
abs(1 - i64)
abs(1 / 0.5)
abs(1 / 1)
abs(1 / i)
abs(1 / i32)
abs(1 ^ f32)
abs(1 ^ i)
abs(1 ^ i32)
abs(1) - i32
abs(1) .. i
abs(1) / f64
abs(1) / i64
abs(1) < i64
abs(1) <= i32
abs(1) == i32
abs(1) >= i
abs(1) ^ f64
abs(abs(0.5))
abs(abs(1))
abs(abs(f64))
abs(abs(i32))
abs(abs(i64))
abs(add(i, 1))
abs(bitand(i64, i32))
abs(bitnand(i64, i))
abs(bitnot(1))
abs(bitnot(i))
abs(bitnot(i32))
abs(bitnot(i64))
abs(bitushr(1, 1))
abs(ceil(0.5))
abs(ceil(1))
abs(ceil(f32))
abs(ceil(i))
abs(ceil(i32))
abs(ceil(i64))
abs(count(array, ok))
abs(count(array, true))
abs(count(list, false))
abs(div(i, i))
abs(f32 * 0.5)
abs(f32 ** 1)
abs(f32 ** f32)
abs(f32 ** i32)
abs(f32 + 0.5)
abs(f32 + 1)
abs(f32 + i)
abs(f32 + i32)
abs(f32 - 0.5)
abs(f32 - 1)
abs(f32 - i32)
abs(f32 - i64)
abs(f32 / 0.5)
abs(f32 / 1)
abs(f32 / f32)
abs(f32 / f64)
abs(f32 / i32)
abs(f32 ^ i)
abs(f32 ^ i64)
abs(f32)
abs(f32) ** f32
abs(f32) ** i
abs(f32) + i64
abs(f32) - i32
abs(f32) / f64
abs(f32) < f64
abs(f32) >= 0.5 / 1
abs(f32) ^ f32
abs(f64 * f32)
abs(f64 * f64)
abs(f64 ** 1)
abs(f64 + 0.5)
abs(f64 + 1)
abs(f64 + f64)
abs(f64 - 1)
abs(f64 - f32)
abs(f64 / 0.5)
abs(f64 / 1)
abs(f64 / f64)
abs(f64 / i)
abs(f64 ^ 0.5)
abs(f64 ^ f32)
abs(f64 ^ i)
abs(f64 ^ i64)
abs(f64)
abs(f64) + f32
abs(f64) + f64
abs(f64) + i32
abs(f64) + i64 / i
abs(f64) - i
abs(f64) < i32
abs(f64) <= f64
abs(f64) > i64
abs(f64) ^ f32
abs(f64) ^ i64
abs(f64) in array
abs(false ? f32 : 1)
abs(false ? half : 0.5)
abs(false ? list : 1)
abs(find(array, ok))
abs(find(array, true))
abs(findIndex(list, ok))
abs(findIndex(list, true))
abs(findLastIndex(array, ok))
abs(first(array))
abs(float(0.5))
abs(float(1))
abs(float(f32))
abs(float(f64))
abs(float(i))
abs(float(i32))
abs(floor(0.5))
abs(floor(f32))
abs(floor(i32))
abs(get(array, 1))
abs(get(array, i))
abs(get(array, i32))
abs(get(array, i64))
abs(half(0.5))
abs(half(1))
abs(half(f64))
abs(i * 1)
abs(i * f32)
abs(i ** 1)
abs(i ** f32)
abs(i ** i32)
abs(i + 0.5)
abs(i + f64)
abs(i - 0.5)
abs(i - 1)
abs(i - f32)
abs(i - f64)
abs(i - i32)
abs(i / 0.5)
abs(i / f64)
abs(i / i)
abs(i / i32)
abs(i / i64)
abs(i ^ 0.5)
abs(i ^ f64)
abs(i ^ i)
abs(i ^ i32)
abs(i ^ i64)
abs(i)
abs(i) % i
abs(i) * i32
abs(i) ** f32
abs(i) + f64
abs(i) - f32
abs(i) .. i
abs(i) .. i32
abs(i) / f32
abs(i) < f64
abs(i) <= i64
abs(i) == 0.5 / i
abs(i) > i64
abs(i) ^ f64
abs(i) ^ half(1)
abs(i) ^ i
abs(i) ^ i32
abs(i32 % i32)
abs(i32 % i64)
abs(i32 * f64)
abs(i32 * i32)
abs(i32 ** 0.5)
abs(i32 ** 1)
abs(i32 ** i32)
abs(i32 + 0.5)
abs(i32 + 1)
abs(i32 + f64)
abs(i32 + i)
abs(i32 + i32)
abs(i32 - 0.5)
abs(i32 - i64)
abs(i32 / 0.5)
abs(i32 / i)
abs(i32 / i64)
abs(i32)
abs(i32) != f64
abs(i32) * f32
abs(i32) * i
abs(i32) ** i
abs(i32) - i32
abs(i32) / -1
abs(i32) / i32 ** f64
abs(i32) < i64 == false
abs(i32) <= i
abs(i32) <= i32
abs(i32) == i32
abs(i32) ^ i64
abs(i32) in array
abs(i64 * 0.5)
abs(i64 * f32)
abs(i64 * i32)
abs(i64 ** 0.5)
abs(i64 ** f64)
abs(i64 ** i64)
abs(i64 + 0.5)
abs(i64 + 1)
abs(i64 + f32)
abs(i64 + f64)
abs(i64 + i)
abs(i64 - 0.5)
abs(i64 - i)
abs(i64 / f32)
abs(i64 / i32)
abs(i64 ^ f64)
abs(i64 ^ i)
abs(i64 ^ i32)
abs(i64)
abs(i64) * i32
abs(i64) ** i
abs(i64) + f32
abs(i64) / i
abs(i64) > i32
abs(i64) ^ i32
abs(i64) not in array
abs(int(0.5))
abs(int(1))
abs(int(i))
abs(int(i32))
abs(int(i64))
abs(last(array))
abs(len("foo"))
abs(len(list))
abs(max(0.5))
abs(max(f32))
abs(max(f64))
abs(max(i32))
abs(max(i64))
abs(mean(array))
abs(median(array))
abs(min(0.5))
abs(min(1))
abs(min(f32))
abs(min(f64))
abs(min(i))
abs(min(i32))
abs(ok ? 1 : "foo")
abs(ok ? f32 : 0.5)
abs(ok ? f32 : nil)
abs(ok ? f64 : ok)
abs(ok ? i32 : foo)
abs(reduce(array, #))
abs(reduce(array, i))
abs(reduce(list, 1))
abs(reduce(list, i32))
abs(round(0.5))
abs(round(1))
abs(round(f32))
abs(round(i))
abs(round(i64))
abs(score(1))
abs(score(i))
abs(sum(array))
abs(true ? 1 : ok)
add
add != add
add != add == nil
add != div
add != div != false
add != div == true
add != foo.Qux
add != foo.String
add != foo?.Qux
add != foo?.String
add != greet
add != greet == ok
add != greet ? array : 1
add != greet ? greet : ok
add != half
add != half == ok
add != half || nil != add
add != nil ? f64 : i64
add != reduce(list, add)
add != reduce(list, greet)
add != score
add == add
add == add != nil
add == add == nil
add == add ? 1 : i64
add == div
add == div ? f64 : list
add == foo.Qux
add == foo.String
add == foo?.Qux
add == foo?.String
add == greet
add == half
add == half != ok
add == half ? nil : f32
add == nil ? false : i32
add == nil ? greet : i32
add == nil ? nil : nil
add == reduce(list, score)
add == score
add == score != ok
add == score != true
add == score == true
add == score or ok
add in sort(array)
add(1, i) < i
add(i, 1) ** f32
add(i, i)
add(i, i32 + 1)
all(1 .. i64, ok)
all(["bar"], # >= #)
all(["foo"], # not matches #)
all([false], # && false)
all([false], #)
all(array, !(# >= f64))
all(array, !ok)
all(array, !true)
all(array, "foo" < "bar")
all(array, # != #)
all(array, # != 1)
all(array, # != f32)
all(array, # != f64)
all(array, # != i32)
all(array, # != nil)
all(array, # < #)
all(array, # < 0.5)
all(array, # < 1)
all(array, # < f64)
all(array, # < i)
all(array, # < i64)
all(array, # <= #)
all(array, # <= 0.5)
all(array, # <= i)
all(array, # == # + #)
all(array, # == #)
all(array, # == 0.5)
all(array, # == 1)
all(array, # == f64)
all(array, # == i)
all(array, # == i32)
all(array, # == i64)
all(array, # > #)
all(array, # > 0.5)
all(array, # > 1)
all(array, # > f64)
all(array, # > i)
all(array, # > i32)
all(array, # > i64)
all(array, # >= #)
all(array, # >= 0.5)
all(array, # >= f32)
all(array, # >= f64)
all(array, # >= i32)
all(array, # >= i64)
all(array, # in array)
all(array, 0.5 != #)
all(array, 0.5 < #)
all(array, 0.5 < f32)
all(array, 0.5 <= #)
all(array, 0.5 <= f32)
all(array, 0.5 <= i)
all(array, 0.5 > f32)
all(array, 0.5 > f64)
all(array, 0.5 > i32)
all(array, 0.5 >= #)
all(array, 0.5 >= 0.5)
all(array, 0.5 in array)
all(array, 1 != #)
all(array, 1 != f32)
all(array, 1 < #)
all(array, 1 < f32)
all(array, 1 == #)
all(array, 1 > #)
all(array, 1 > i64)
all(array, 1 >= #)
all(array, 1 >= 1)
all(array, 1 >= i64)
all(array, f32 < #)
all(array, f32 <= #)
all(array, f32 <= f32)
all(array, f32 > i)
all(array, f32 >= #)
all(array, f64 != #)
all(array, f64 <= #)
all(array, f64 <= f32)
all(array, f64 == #)
all(array, f64 == 0.5)
all(array, f64 == i64)
all(array, f64 >= i64)
all(array, false && true)
all(array, false ? 1 : true)
all(array, i != 0.5)
all(array, i <= 0.5)
all(array, i <= f32)
all(array, i <= i32)
all(array, i == #)
all(array, i32 != #)
all(array, i32 != i64)
all(array, i32 < i)
all(array, i32 >= #)
all(array, i64 != #)
all(array, i64 != i64)
all(array, i64 == i32)
all(array, i64 > #)
all(array, i64 > 0.5)
all(array, i64 >= #)
all(array, nil != "bar")
all(array, nil != #)
all(array, nil != list)
all(array, nil != ok)
all(array, nil == "foo")
all(array, nil == i32)
all(array, nil == list)
all(array, none(list, true))
all(array, not false)
all(array, not true)
all(array, ok)
all(false ? add : "bar", ok)
all(filter(array, true), ok)
all(groupBy(array, #)?.f32, #)
all(groupBy(array, f32).score, 0.5 in #?.f64)
all(groupBy(array, foo)?.i64, none(.div, true == #))
all(groupBy(list, #).i, #?.half() not in # + #)
all(groupBy(list, #)?.add, #?.f64.i64(f32 startsWith #, div))
all(i32 .. 1, ok)
all(list, !false)
all(list, "bar" in #)
all(list, "bar" not in #)
all(list, "foo" > "foo")
all(list, # != #)
all(list, # != nil)
all(list, # == # || f64 != i64)
all(list, # == #)
all(list, # == foo)
all(list, # in list)
all(list, # not in list)
all(list, 0.5 < f64)
all(list, 0.5 < i64)
all(list, 0.5 <= i64)
all(list, 0.5 >= i)
all(list, 0.5 >= i32)
all(list, 1 != 1)
all(list, 1 <= 1)
all(list, 1 > i32)
all(list, 1 >= f64)
all(list, add == div)
all(list, all(array, ok))
all(list, div != nil)
all(list, f64 != 0.5)
all(list, f64 != f32)
all(list, f64 < i32)
all(list, f64 > i64)
all(list, false ? i : true)
all(list, greet == half)
all(list, i < f32)
all(list, i <= 1)
all(list, i <= i32)
all(list, i > f64)
all(list, i > i32)
all(list, i >= 1)
all(list, i32 < 1)
all(list, i32 <= 0.5)
all(list, i32 == f32)
all(list, i64 != nil)
all(list, i64 <= 0.5)
all(list, i64 > 1)
all(list, list != nil)
all(list, nil != 1)
all(list, nil != i64)
all(list, nil != nil)
all(list, nil != score)
all(list, nil == #)
all(list, nil == score)
all(list, nil in array)
all(list, none(array, 1 > #))
all(list, not true)
all(list, ok)
all(list, reduce(array, true))
all(list, score != add)
all(list, score != div)
all(list, type(i) not endsWith .Bar)
all(map(array, #), ok && false)
all(map(array, #), ok)
all(map(array, f32), !ok)
all(map(array, false), #)
all(map(array, score), # != #)
all(map(array, score), ok)
all(map(list, "bar" not in #), #)
all(map(list, 0.5), 0.5 <= #)
all(map(list, i), # == 0.5)
all(map(list, list), 1 == 0.5)
all(map(list, ok), #)
all(reduce(array, array), # > #)
all(reduce(array, list), ok)
all(true ? list : false, not true)
any(["bar"], # not endsWith #)
any([foo], # != i64)
any([greet], ok)
any(array, !(i32 <= #))
any(array, "foo" >= "foo")
any(array, "foo" not endsWith "bar")
any(array, # != # or # > #)
any(array, # != #)
any(array, # != 0.5)
any(array, # != f32)
any(array, # != f64)
any(array, # != i32)
any(array, # != i64)
any(array, # != nil)
any(array, # < #)
any(array, # < 0.5)
any(array, # < 1)
any(array, # < f32)
any(array, # < f64)
any(array, # < i)
any(array, # < i32)
any(array, # <= #)
any(array, # <= 0.5)
any(array, # <= 1)
any(array, # <= f32)
any(array, # <= i)
any(array, # <= i32)
any(array, # <= i64)
any(array, # == #)
any(array, # == 0.5)
any(array, # == 1)
any(array, # == i32)
any(array, # == i64)
any(array, # > #)
any(array, # > 0.5)
any(array, # > 1)
any(array, # > f64)
any(array, # > i32)
any(array, # >= #)
any(array, # >= 0.5)
any(array, # >= 1)
any(array, # >= f32)
any(array, # >= i32)
any(array, # >= i64)
any(array, # in array)
any(array, 0.5 != #)
any(array, 0.5 == #)
any(array, 0.5 == i32)
any(array, 0.5 > #)
any(array, 0.5 > f64)
any(array, 0.5 >= #)
any(array, 1 != i64)
any(array, 1 < #)
any(array, 1 < 0.5)
any(array, 1 <= #)
any(array, 1 == #)
any(array, 1 > #)
any(array, 1 > 1)
any(array, 1 >= #)
any(array, 1 >= f64)
any(array, add == greet)
any(array, all(list, false))
any(array, f32 < i)
any(array, f32 > #)
any(array, f32 > 0.5)
any(array, f32 >= #)
any(array, f64 != #)
any(array, f64 < i)
any(array, f64 <= #)
any(array, f64 == #)
any(array, f64 > #)
any(array, f64 > 0.5)
any(array, false && false)
any(array, greet == greet)
any(array, i != #)
any(array, i < #)
any(array, i > #)
any(array, i >= #)
any(array, i32 > i64)
any(array, i64 < #)
any(array, i64 == f64)
any(array, i64 >= #)
any(array, nil != #)
any(array, nil != 1)
any(array, nil != i)
any(array, nil != ok)
any(array, nil == "foo")
any(array, nil == #)
any(array, nil == 1)
any(array, ok != true)
any(array, ok)
any(array, one(array, # <= 0.5))
any(array, one(array, ok))
any(array, score != add)
any(array, score == half)
any(array, score == nil)
any(groupBy(list, #)?.Bar, #)
any(i32 .. i, half == half)
any(list, !ok)
any(list, !true)
any(list, "bar" < "foo")
any(list, "bar" not in #)
any(list, "bar" not startsWith "foo")
any(list, "foo" not in foo)
any(list, # != #)
any(list, # == #)
any(list, # == foo)
any(list, # == nil)
any(list, 0.5 != 1)
any(list, 0.5 < 1)
any(list, 0.5 < f64)
any(list, 0.5 == i64)
any(list, 1 >= f64)
any(list, 1 >= i32)
any(list, add == score)
any(list, any(list, false))
any(list, any(list, ok))
any(list, array == nil)
any(list, f32 < 1)
any(list, f32 <= i64)
any(list, f32 > 1)
any(list, f32 > i64)
any(list, f32 >= i32)
any(list, f64 != i64)
any(list, f64 >= 1)
any(list, false) == (foo not in list)
any(list, false) || false ? nil : add
any(list, i > i64)
any(list, i >= 0.5)
any(list, i32 != 0.5)
any(list, i64 <= 1)
any(list, i64 == 0.5)
any(list, i64 == i)
any(list, i64 >= i32)
any(list, i64 not in array)
any(list, nil == false)
any(list, nil == nil)
any(list, none(array, false))
any(list, not ok)
any(list, ok || # == #)
any(list, ok)
any(list, reduce(list, true))
any(list, true ? false : f64)
any(map(array, #), # >= #)
any(map(array, #), ok)
any(map(array, false), #)
any(map(array, ok), # and #)
any(map(array, ok), #)
any(map(list, #), nil == #)
any(map(list, false), nil == i32)
any(map(list, ok), #)
any(ok ? "foo" : 1, ok)
any(ok ? "foo" : f32, i > #)
any(reduce(array, array), 1 == #)
array
array != array
array != array ? 1 : false
array != array ? score : i32
array != list
array != list ? list : f64
array != map(array, #)
array != map(array, 1)
array != map(list, #)
array != map(list, true)
array != nil ? add : 0.5
array == array
array == array ? half : false
array == list
array == map(array, score)
array == map(list, #)
array == nil ? list : float(f32)
array not in sort(array)
array[-i32]
array[-i64]
array[-i]
array[1 % i64]
array[1 + 1]
array[1] * i32
array[1] * i64
array[1] - f64
array[1] / i32
array[1] == -i
array[1] > i
array[1] ^ i
array[abs(1)]
array[array[i32]]
array[bitnot(1)]
array[bitor(1, i)]
array[count(list, ok)]
array[get(array, 1)]
array[i32 * 1]
array[i32:i]
array[i32]
array[i32] != i
array[i32] % i32
array[i32] * f64
array[i32] ** i32
array[i32] + i64
array[i32] - f64
array[i32] / f32
array[i32] == i32
array[i32] == i64
array[i32] > f64
array[i32] >= f32
array[i64:i64]
array[i64]
array[i64] .. i32
array[i64] == floor(0.5)
array[i64] == i
array[i64] > half(f64)
array[i64] ^ f64
array[i:i32]
array[i:i64]
array[i]
array[i] * f64
array[i] + f32
array[i] - f32
array[i] / f64
array[i] < round(i)
array[i] == i32
array[i] > f64
array[i] >= 0.5 ** i
array[max(1)]
array[reduce(list, 1)]
array[score(1):i]
array[score(1)]
array[score(i)]
bitand(1 * i64, i)
bitand(1, 1) != i
bitand(1, i64) == f64
bitand(i, i)
bitand(i, i32)
bitand(i, i64)
bitand(i32, 1) != f32
bitand(i32, i)
bitand(i32, i) - i32
bitand(i32, i32 * i)
bitand(i32, i32)
bitand(i32, i64)
bitand(i64, 1) <= i32
bitand(i64, i + i64)
bitand(i64, i)
bitand(i64, i) ^ f64
bitand(i64, i32)
bitand(i64, i64)
bitand(int(i32), i64)
bitnand(1, i64) != int(i64)
bitnand(i, i)
bitnand(i, i32 + i32)
bitnand(i, i32)
bitnand(i, i64)
bitnand(i32, bitnot(1))
bitnand(i32, i)
bitnand(i32, i32)
bitnand(i32, i64)
bitnand(i64 + i, i32)
bitnand(i64 + i64, i64)
bitnand(i64, -1)
bitnand(i64, 1) + i64 + 1
bitnand(i64, i)
bitnand(i64, i32)
bitnand(i64, i32) > f64
bitnand(i64, i64)
bitnot(-1)
bitnot(-i)
bitnot(-i32)
bitnot(-i64)
bitnot(1 % 1)
bitnot(1 % i32)
bitnot(1 % i64)
bitnot(1 * 1)
bitnot(1 * i64)
bitnot(1 + 1)
bitnot(1 - i)
bitnot(1 - i32)
bitnot(1) * i % 1
bitnot(1) ** f32
bitnot(1) ** i
bitnot(1) + i32
bitnot(1) - i
bitnot(1) - i32
bitnot(1) / min(i)
bitnot(1) < i32
bitnot(1) < i64
bitnot(1) == i32
bitnot(1) > f64
bitnot(1) >= i
bitnot(1) >= i64
bitnot(abs(1))
bitnot(abs(i32))
bitnot(abs(i64))
bitnot(array[1])
bitnot(array[i64])
bitnot(array[i])
bitnot(bitnot(i))
bitnot(bitushr(1, 1))
bitnot(bitushr(i32, 1))
bitnot(bitxor(i, i64))
bitnot(count(array, false))
bitnot(findLast(array, ok))
bitnot(first(array))
bitnot(get(array, 1))
bitnot(get(array, i))
bitnot(i % i64)
bitnot(i * i)
bitnot(i * i32)
bitnot(i + 1)
bitnot(i - 1)
bitnot(i - i64)
bitnot(i)
bitnot(i) % i32
bitnot(i) * i
bitnot(i) + f64
bitnot(i) .. i64
bitnot(i) == 1 - i
bitnot(i) > i
bitnot(i) >= i32
bitnot(i) ^ f32
bitnot(i) ^ f64
bitnot(i) in array
bitnot(i32 % 1)
bitnot(i32 % i64)
bitnot(i32 + i)
bitnot(i32 + i32)
bitnot(i32 - 1)
bitnot(i32 - i32)
bitnot(i32)
bitnot(i32) != f64
bitnot(i32) != i32
bitnot(i32) * i
bitnot(i32) * i64
bitnot(i32) ** f32
bitnot(i32) - i32
bitnot(i32) / f64
bitnot(i32) == i64
bitnot(i32) > 1 != true
bitnot(i32) >= f32
bitnot(i64 % 1)
bitnot(i64 % i)
bitnot(i64 % i32)
bitnot(i64 * 1)
bitnot(i64 * i)
bitnot(i64 * i32)
bitnot(i64 * i64)
bitnot(i64 - 1)
bitnot(i64 - i)
bitnot(i64 - i64)
bitnot(i64)
bitnot(i64) % i32
bitnot(i64) * f32
bitnot(i64) < f32
bitnot(i64) > f64
bitnot(i64) > i % i
bitnot(i64) >= i32 ^ f32
bitnot(i64) ^ f64
bitnot(i64) not in array
bitnot(int(f32))
bitnot(int(f64))
bitnot(int(i))
bitnot(int(i32))
bitnot(int(i64))
bitnot(last(array))
bitnot(len("bar"))
bitnot(len("foo"))
bitnot(len(list))
bitnot(max(1))
bitnot(max(1, i64))
bitnot(max(i))
bitnot(max(i32))
bitnot(min(1))
bitnot(min(i32))
bitnot(min(i64))
bitnot(ok ? 1 : array)
bitnot(ok ? 1 : ok)
bitnot(ok ? i : add)
bitnot(reduce(array, #))
bitnot(reduce(array, 1))
bitnot(reduce(list, 1))
bitnot(score(1))
bitnot(score(i))
bitnot(sum(array))
bitor(1, 1) < i
bitor(1, 1) == i
bitor(1, i32) != i64
bitor(i, -i64)
bitor(i, i)
bitor(i, i64)
bitor(i32, i)
bitor(i32, i32)
bitor(i32, i64)
bitor(i64 % 1, i32)
bitor(i64, i)
bitor(i64, i32)
bitor(i64, i64)
bitor(min(i64), i)
bitor(score(i), i64)
bitshl(bitnot(i), i)
bitshl(i, i)
bitshl(i, i32)
bitshl(i, i64)
bitshl(i32, i)
bitshl(i32, i32)
bitshl(i32, i64)
bitshl(i64, i32)
bitshl(i64, i64)
bitshl(len(array), i)
bitshl(score(i), i32)
bitshr(i % 1, i32)
bitshr(i, 1) - i64
bitshr(i, i32)
bitshr(i, i64)
bitshr(i32, i)
bitshr(i32, i) - f32
bitshr(i32, i32)
bitshr(i32, i64)
bitshr(i64, i32)
bitshr(i64, i64)
bitushr(-i64, i64)
bitushr(1 % i, i)
bitushr(1, i) * i
bitushr(abs(1), i32)
bitushr(i, i)
bitushr(i, i) % i64
bitushr(i, i32)
bitushr(i, i64)
bitushr(i32, i)
bitushr(i32, i32)
bitushr(i32, i64)
bitushr(i64, i)
bitushr(i64, i32)
bitushr(i64, i64)
bitxor(-i, i64)
bitxor(1, i) * i
bitxor(bitnot(1), -i)
bitxor(i, i32)
bitxor(i, i64)
bitxor(i32, 1) > i64
bitxor(i32, i)
bitxor(i32, i) ** f64
bitxor(i32, i32)
bitxor(i32, i64)
bitxor(i32, i64) ** i32
bitxor(i64, i)
bitxor(i64, i32)
bitxor(i64, i64)
bitxor(score(1), i)
ceil(-0.5)
ceil(-1)
ceil(-f32)
ceil(-f64)
ceil(-i)
ceil(-i32)
ceil(-i64)
ceil(0.5 * 0.5)
ceil(0.5 * 1)
ceil(0.5 * f64)
ceil(0.5 * i)
ceil(0.5 ** 1)
ceil(0.5 ** f64)
ceil(0.5 ** i)
ceil(0.5 + 0.5)
ceil(0.5 + 1)
ceil(0.5 + f32)
ceil(0.5 + f64)
ceil(0.5 + i)
ceil(0.5 + i32)
ceil(0.5 + i64)
ceil(0.5 - 0.5)
ceil(0.5 - f64)
ceil(0.5 - i)
ceil(0.5 / 0.5)
ceil(0.5 / 1)
ceil(0.5 / f32)
ceil(0.5 / i)
ceil(0.5 / i32)
ceil(0.5 ^ 1)
ceil(0.5 ^ f32)
ceil(0.5 ^ i32)
ceil(0.5 ^ i64)
ceil(0.5) != 0.5 * 0.5
ceil(0.5) != i
ceil(0.5) != nil ? score : "foo"
ceil(0.5) ** round(f32)
ceil(0.5) - i
ceil(0.5) < i
ceil(0.5) == f32
ceil(0.5) == i ? div : half
ceil(0.5) == i64
ceil(0.5) > f64
ceil(0.5) >= i
ceil(0.5) >= i64
ceil(0.5) ^ i64
ceil(1 % i64)
ceil(1 * 0.5)
ceil(1 * 1)
ceil(1 ** 1)
ceil(1 + 0.5)
ceil(1 + 1)
ceil(1 + f64)
ceil(1 + i)
ceil(1 - 0.5)
ceil(1 - f64)
ceil(1 / 0.5)
ceil(1 / 1)
ceil(1 / f64)
ceil(1 / i64)
ceil(1 ^ f64)
ceil(1 ^ i)
ceil(1 ^ i64)
ceil(1) ** f32
ceil(1) + i32
ceil(1) / i
ceil(1) < f32 ^ i
ceil(1) <= f32
ceil(1) <= i64
ceil(1) == f32
ceil(1) > f32
ceil(1) >= f32
ceil(1) >= i64 ** 0.5
ceil(1) ^ i
ceil(abs(0.5))
ceil(abs(1))
ceil(abs(f32))
ceil(abs(f64))
ceil(abs(i32))
ceil(abs(i64))
ceil(add(1, 1))
ceil(array[1])
ceil(array[i64])
ceil(array[i])
ceil(bitnot(1))
ceil(bitnot(i))
ceil(ceil(0.5))
ceil(ceil(f64))
ceil(ceil(i))
ceil(ceil(i32))
ceil(count(list, ok))
ceil(f32 * 0.5)
ceil(f32 * i)
ceil(f32 * i32)
ceil(f32 ** i)
ceil(f32 ** i32)
ceil(f32 + 1)
ceil(f32 + i64)
ceil(f32 - f32)
ceil(f32 - i)
ceil(f32 - i32)
ceil(f32 - i64)
ceil(f32 / 0.5)
ceil(f32 / f64)
ceil(f32 / i32)
ceil(f32 ^ 0.5)
ceil(f32 ^ 1)
ceil(f32 ^ i64)
ceil(f32)
ceil(f32) != i64
ceil(f32) * i64
ceil(f32) ** -1
ceil(f32) ** i
ceil(f32) + i
ceil(f32) + i64
ceil(f32) - i32
ceil(f32) / i64
ceil(f32) < i
ceil(f32) < i32
ceil(f64 * 1)
ceil(f64 * i)
ceil(f64 ** i)
ceil(f64 ** i64)
ceil(f64 + 1)
ceil(f64 + f32)
ceil(f64 - 0.5)
ceil(f64 - f32)
ceil(f64 - f64)
ceil(f64 - i32)
ceil(f64 / 0.5)
ceil(f64 / f64)
ceil(f64 / i32)
ceil(f64 / i64)
ceil(f64 ^ 0.5)
ceil(f64 ^ f32)
ceil(f64 ^ f64)
ceil(f64 ^ i32)
ceil(f64 ^ i64)
ceil(f64)
ceil(f64) != i
ceil(f64) != i64
ceil(f64) * f32
ceil(f64) ** f32
ceil(f64) - i32
ceil(f64) / f64
ceil(f64) / i / i64
ceil(f64) in array
ceil(false ? add : 0.5)
ceil(find(array, ok))
ceil(findLast(array, true))
ceil(findLastIndex(list, ok))
ceil(findLastIndex(list, true))
ceil(first(array))
ceil(float(0.5))
ceil(float(1))
ceil(float(f64))
ceil(float(i))
ceil(float(i32))
ceil(float(i64))
ceil(floor(0.5))
ceil(floor(1))
ceil(floor(f64))
ceil(floor(i))
ceil(floor(i32))
ceil(floor(i64))
ceil(get(array, 1))
ceil(get(array, i))
ceil(half(0.5))
ceil(half(1))
ceil(half(f64))
ceil(i % i)
ceil(i * 0.5)
ceil(i * i)
ceil(i ** f64)
ceil(i ** i)
ceil(i + 0.5)
ceil(i + 1)
ceil(i + f32)
ceil(i + i64)
ceil(i - i)
ceil(i / f32)
ceil(i / i)
ceil(i / i64)
ceil(i ^ i)
ceil(i ^ i32)
ceil(i)
ceil(i) != i32
ceil(i) * f64
ceil(i) * i64
ceil(i) ** f64
ceil(i) + i
ceil(i) - f32
ceil(i) / f32
ceil(i) <= f64
ceil(i) == i32
ceil(i) > i64
ceil(i32 * i)
ceil(i32 * i32)
ceil(i32 ** i32)
ceil(i32 + 0.5)
ceil(i32 + i32)
ceil(i32 - 0.5)
ceil(i32 - 1)
ceil(i32 - i)
ceil(i32 - i64)
ceil(i32 / 0.5)
ceil(i32 / f32)
ceil(i32 / i)
ceil(i32 / i32)
ceil(i32 ^ 0.5)
ceil(i32 ^ i64)
ceil(i32)
ceil(i32) * 1 ^ i32
ceil(i32) * i32
ceil(i32) ** max(i)
ceil(i32) + f32
ceil(i32) + i
ceil(i32) + i32
ceil(i32) <= i64
ceil(i32) not in array
ceil(i64 % 1)
ceil(i64 % i32)
ceil(i64 * f32)
ceil(i64 * f64)
ceil(i64 ** i32)
ceil(i64 ** i64)
ceil(i64 + 0.5)
ceil(i64 + f64)
ceil(i64 + i32)
ceil(i64 - 0.5)
ceil(i64 - f64)
ceil(i64 / 0.5)
ceil(i64 / 1)
ceil(i64 / f64)
ceil(i64 ^ 0.5)
ceil(i64 ^ i)
ceil(i64 ^ i32)
ceil(i64 ^ i64)
ceil(i64)
ceil(i64) - -1
ceil(i64) - f32
ceil(i64) - i32
ceil(i64) / (0.5 - f32)
ceil(i64) >= f32
ceil(i64) ^ i32
ceil(int(0.5))
ceil(int(f32))
ceil(int(f64))
ceil(int(i))
ceil(int(i64))
ceil(len("bar"))
ceil(len(array))
ceil(len(list))
ceil(max(1, i))
ceil(max(f32, 0.5))
ceil(max(f64))
ceil(max(i))
ceil(mean(array))
ceil(median(array))
ceil(min(0.5, f32))
ceil(min(1))
ceil(min(f32))
ceil(min(f64))
ceil(min(i))
ceil(min(i64))
ceil(ok ? f32 : nil)
ceil(ok ? i32 : "bar")
ceil(ok ? i32 : i64)
ceil(reduce(array, #))
ceil(reduce(array, 0.5))
ceil(reduce(list, 1))
ceil(round(0.5))
ceil(round(1))
ceil(round(f32))
ceil(round(f64))
ceil(round(i))
ceil(round(i32))
ceil(round(i64))
ceil(score(1))
ceil(score(i))
ceil(true ? 1 : half)
ceil(true ? 1 : nil)
ceil(true ? f64 : nil)
count(["bar", score, i], 1 != #)
count(["bar"], # startsWith #)
count([0.5], ok)
count([greet], ok)
count([i32], f32 != #)
count([list, 0.5], # not in list)
count([nil], ok)
count(array, !ok)
count(array, !true)
count(array, "bar" <= "bar")
count(array, "bar" not endsWith "bar")
count(array, "foo" matches "foo")
count(array, # != #)
count(array, # != 0.5)
count(array, # != i)
count(array, # != i64)
count(array, # != nil)
count(array, # < #)
count(array, # < i)
count(array, # < i32)
count(array, # <= #)
count(array, # <= 0.5)
count(array, # <= 1)
count(array, # <= i)
count(array, # <= i32)
count(array, # == #)
count(array, # == 0.5)
count(array, # == 1)
count(array, # == f32)
count(array, # == i)
count(array, # == i64)
count(array, # == nil)
count(array, # > #)
count(array, # > 0.5)
count(array, # > i)
count(array, # > i64)
count(array, # >= #)
count(array, # >= 0.5)
count(array, # >= 1)
count(array, # >= f32)
count(array, # >= i)
count(array, # in array)
count(array, # not in array)
count(array, 0.5 != #)
count(array, 0.5 < #)
count(array, 0.5 <= #)
count(array, 0.5 <= f32)
count(array, 0.5 <= f64)
count(array, 0.5 == #)
count(array, 0.5 == f32)
count(array, 0.5 == i)
count(array, 0.5 > #)
count(array, 1 != #)
count(array, 1 != 0.5)
count(array, 1 < #)
count(array, 1 <= #)
count(array, 1 == #)
count(array, 1 >= #)
count(array, any(array, true))
count(array, div(#, 1) >= #)
count(array, f32 <= #)
count(array, f32 == #)
count(array, f64 < #)
count(array, f64 < f32)
count(array, f64 <= #)
count(array, f64 <= 1)
count(array, f64 == #)
count(array, false) ** i32
count(array, false) + f32
count(array, false) - i64
count(array, false) / f64
count(array, false) > i64 * i64
count(array, foo in list)
count(array, foo not in list)
count(array, i != #)
count(array, i < #)
count(array, i < 0.5)
count(array, i <= #)
count(array, i == #)
count(array, i > i64)
count(array, i >= #)
count(array, i32 != #)
count(array, i32 != i)
count(array, i32 < #)
count(array, i32 < 1)
count(array, i32 <= #)
count(array, i32 <= f32)
count(array, i32 == #)
count(array, i32 == 0.5)
count(array, i32 > #)
count(array, i32 >= #)
count(array, i32 >= f32)
count(array, i32 >= i32)
count(array, i64 != i32)
count(array, i64 != i64)
count(array, i64 < #)
count(array, i64 <= #)
count(array, i64 == #)
count(array, i64 == i64)
count(array, i64 > 1)
count(array, list != array)
count(array, list != nil)
count(array, nil != "foo")
count(array, nil != f64)
count(array, nil == 1)
count(array, nil == list)
count(array, nil == nil)
count(array, none(array, false))
count(array, not false)
count(array, ok or false)
count(array, ok)
count(array, ok) * i32
count(array, ok) ^ i
count(array, reduce(list, false))
count(array, true == ok)
count(array, true) / f64
count(filter(list, true), ok)
count(groupBy(array, #)?.String, #)
count(groupBy(list, #).String, .div?.array)
count(groupBy(list, #)?.list, #?.Qux)
count(i .. 1, # == i)
count(i .. i, ok)
count(i32 .. i, # >= #)
count(i64 .. 1, nil != f32)
count(list, !false)
count(list, !true)
count(list, "bar" not matches "bar")
count(list, "foo" in #)
count(list, # != #)
count(list, # == #)
count(list, # == nil)
count(list, # in list)
count(list, 0.5 < f32)
count(list, 0.5 <= 0.5)
count(list, 0.5 <= i64)
count(list, 0.5 > 0.5)
count(list, 0.5 > 1)
count(list, 0.5 > f32)
count(list, 1 != i)
count(list, 1 >= 0.5)
count(list, 1 >= f32)
count(list, add != half)
count(list, div == score)
count(list, f32 == i64)
count(list, f32 >= f32)
count(list, false && false)
count(list, false) + -1
count(list, false) / f64
count(list, false) > f32
count(list, foo == #)
count(list, greet != score)
count(list, i != i64)
count(list, i < 0.5)
count(list, i <= i64)
count(list, i > 1)
count(list, i32 < f32)
count(list, i32 < i64)
count(list, i64 not in array)
count(list, nil != #)
count(list, nil != false)
count(list, nil == list)
count(list, not false)
count(list, ok)
count(list, ok) % i64
count(list, ok) / half(1)
count(list, ok) / i
count(list, ok) >= i32
count(list, ok) ^ i
count(list, ok) ^ i64
count(list, true or ok)
count(list, true || true)
count(list, true) * f32
count(list, true) == i
count(map(array, #), # == i32)
count(map(array, #), not true)
count(map(array, #), ok)
count(map(array, false), #)
count(map(array, i), ok)
count(map(array, i32), 1 == #)
count(map(array, i64), f64 != nil)
count(map(array, ok), !#)
count(map(list, 0.5), "bar" == "foo")
count(map(list, div), ok)
count(map(list, f32), # == #)
count(map(list, greet), ok)
count(map(list, i32), # != i64)
count(map(list, ok), #)
count(map(list, ok), 0.5 <= i64)
count(ok ? array : i64, # > 0.5)
count(sort(array), 1 <= #)
div
div != add
div != add != nil
div != add == ok
div != div
div != div != ok
div != div && ok
div != div ? "bar" : "foo"
div != foo.Qux
div != foo.String
div != foo?.Qux
div != foo?.String
div != greet
div != greet != ok
div != greet or ok
div != half
div != half != true
div != half ? false : div
div != half ? greet : true
div != nil == ok
div != nil || f32 < 0.5
div != reduce(array, div)
div != score
div != score != true
div == add
div == add ? 1 : ok
div == div
div == foo.Qux
div == foo.String
div == foo?.Qux
div == foo?.String
div == greet
div == greet == nil
div == greet ? 1 : 1
div == half
div == half != false
div == nil ? f32 : half
div == nil ? false : 1
div == score
div == score ? "bar" : true
div == score or f32 != f64
div(-i, array[i64])
div(-i, i)
div(1, i) + i
div(findLast(array, true), i)
div(i, -1)
div(i, i)
div(last(array), 1 * i32)
div(score(1), bitnot(1))
f32
f32 != -0.5
f32 != -1
f32 != -f32
f32 != 0.5 != false
f32 != 0.5 * 1
f32 != 0.5 * i64
f32 != 0.5 ** f32
f32 != 0.5 + 1
f32 != 0.5 - i64
f32 != 0.5 / 0.5
f32 != 0.5 / i32
f32 != 0.5 == ok
f32 != 0.5 == true
f32 != 0.5 ? array : score
f32 != 0.5 ? foo : f64
f32 != 0.5 ? true : i32
f32 != 0.5 ^ 1
f32 != 0.5 ^ f32
f32 != 1 && ok
f32 != 1 * i
f32 != 1 + i64
f32 != f32
f32 != f32 / 0.5
f32 != f32 / f32
f32 != f64
f32 != findLast(array, ok)
f32 != findLastIndex(array, ok)
f32 != floor(0.5)
f32 != half(0.5)
f32 != i
f32 != i != true
f32 != i % 1
f32 != i % i
f32 != i ** i64
f32 != i / f64
f32 != i32
f32 != i32 % i
f32 != i32 * i32
f32 != i32 + 0.5
f32 != i64
f32 != i64 != nil
f32 != i64 != true
f32 != i64 ? 0.5 : f64
f32 != i64 ^ i32
f32 != int(f32)
f32 != int(i32)
f32 != len(array)
f32 != nil ? true : score
f32 != nil || ok
f32 != round(i)
f32 != score(1)
f32 != score(1, i)
f32 * (0.5 + f64)
f32 * (0.5 + i32)
f32 * (0.5 - f32)
f32 * (f64 + f64)
f32 * (f64 + i64)
f32 * (f64 - i)
f32 * -0.5
f32 * -1
f32 * -f64
f32 * -i
f32 * -i64
f32 * -len(array)
f32 * 0.5 * 0.5
f32 * 0.5 * i
f32 * 0.5 * i32
f32 * 0.5 - i32
f32 * 0.5 / i
f32 * 0.5 <= i
f32 * 0.5 ^ f32
f32 * 0.5 not in array
f32 * 1 != f32
f32 * 1 * f64
f32 * 1 * i32
f32 * 1 ** 0.5
f32 * 1 + f64
f32 * 1 < i64
f32 * 1 >= i64
f32 * 1 ^ i64
f32 * ceil(i)
f32 * f32
f32 * f32 * 0.5
f32 * f32 < i32
f32 * f32 <= i64
f32 * f32 > f32 - 1
f32 * f32 ^ 0.5
f32 * f32 in array
f32 * f64
f32 * f64 + f64
f32 * f64 + i32
f32 * f64 / i64
f32 * f64 >= 1 - i
f32 * float(i)
f32 * float(i32)
f32 * floor(0.5)
f32 * floor(i)
f32 * half(0.5)
f32 * half(1)
f32 * half(f64)
f32 * i
f32 * i != i32
f32 * i - i
f32 * i / f64
f32 * i == i64
f32 * i32
f32 * i32 != max(i)
f32 * i32 * i32
f32 * i32 ** 0.5
f32 * i32 >= i
f32 * i64
f32 * i64 != f64
f32 * i64 ** i
f32 * int(i64)
f32 * min(i64)
f32 * reduce(array, 1)
f32 * reduce(list, 1)
f32 * round(f64)
f32 ** (0.5 + 0.5)
f32 ** (0.5 - 1)
f32 ** (0.5 / f32)
f32 ** (1 / f64)
f32 ** (f32 - 0.5)
f32 ** (f64 - i64)
f32 ** (i % 1)
f32 ** (i64 * i32)
f32 ** (i64 + 0.5)
f32 ** (i64 - 1)
f32 ** -0.5
f32 ** -f32
f32 ** -f64
f32 ** -i
f32 ** 0.5 != f32
f32 ** 0.5 + f32
f32 ** 0.5 >= -i64
f32 ** 0.5 ^ (f32 / f64)
f32 ** 0.5 ^ i64
f32 ** 1 + i64
f32 ** 1 / i
f32 ** 1 < f64
f32 ** 1 < i64
f32 ** 1 <= i64
f32 ** ceil(i64)
f32 ** f32
f32 ** f32 * f32
f32 ** f32 ** f32
f32 ** f32 < f64
f32 ** f32 ^ f32
f32 ** f32 ^ f64
f32 ** f64
f32 ** f64 ** 1
f32 ** f64 <= f64
f32 ** f64 >= i
f32 ** float(f32)
f32 ** float(f64)
f32 ** half(0.5)
f32 ** half(1)
f32 ** i
f32 ** i != half(1)
f32 ** i ** f64
f32 ** i ** i32
f32 ** i <= i64
f32 ** i32
f32 ** i32 / i32
f32 ** i32 == f64
f32 ** i32 ^ f32
f32 ** i64
f32 ** i64 / f32
f32 ** i64 == i32
f32 ** i64 > i32
f32 ** int(f64)
f32 ** len("foo")
f32 ** max(f32)
f32 ** max(i32)
f32 ** median(array)
f32 ** reduce(array, 0.5)
f32 ** round(f64)
f32 + -0.5
f32 + -1
f32 + -f32
f32 + -i
f32 + 0.5 ** f32
f32 + 0.5 + i32
f32 + 0.5 - i
f32 + 0.5 - i32
f32 + 0.5 / f32
f32 + 0.5 == i
f32 + 0.5 > i64
f32 + 0.5 ^ 0.5
f32 + 1 * 0.5
f32 + 1 * 1
f32 + 1 + i
f32 + 1 - f64
f32 + 1 - i64
f32 + 1 / f64
f32 + 1 < f32
f32 + 1 < i
f32 + 1 >= ceil(0.5)
f32 + bitnot(i64)
f32 + ceil(-1)
f32 + ceil(1)
f32 + ceil(f32)
f32 + f32
f32 + f32 * 0.5
f32 + f32 ** i64
f32 + f32 - i32
f32 + f32 / 1
f32 + f32 > i32
f32 + f32 ^ 0.5
f32 + f64
f32 + f64 in array
f32 + findIndex(array, true)
f32 + first(array)
f32 + float(i)
f32 + floor(1)
f32 + floor(i64)
f32 + half(1)
f32 + half(f64)
f32 + i
f32 + i != i64
f32 + i + 1
f32 + i + i
f32 + i - i32
f32 + i == f64
f32 + i32
f32 + i32 != f32
f32 + i32 % i
f32 + i32 / f32
f32 + i32 <= i
f32 + i32 ^ 0.5
f32 + i64
f32 + i64 != f32
f32 + i64 + 0.5
f32 + i64 < f32
f32 + i64 <= i32
f32 + i64 >= i
f32 + i64 >= i32
f32 + int(1)
f32 + int(f64)
f32 + max(0.5)
f32 + max(f64)
f32 + reduce(array, #)
f32 + round(1)
f32 + round(i32)
f32 + score(1)
f32 + score(i)
f32 - -1
f32 - -f64
f32 - -i
f32 - 0.5 ** i64
f32 - 0.5 + 0.5
f32 - 0.5 + f64
f32 - 0.5 - i64
f32 - 0.5 < i
f32 - 0.5 <= i32
f32 - 0.5 <= i64
f32 - 0.5 > f64
f32 - 1 % i64
f32 - 1 * i64
f32 - 1 + 1
f32 - 1 / 0.5
f32 - 1 < i32
f32 - 1 <= i32
f32 - 1 == f32
f32 - 1 >= f64
f32 - abs(i32)
f32 - abs(i64)
f32 - bitshl(i, i32)
f32 - ceil(f64)
f32 - f32
f32 - f32 ** i32
f32 - f32 + i
f32 - f32 == i
f32 - f64
f32 - f64 + f64
f32 - f64 - i
f32 - f64 <= f32
f32 - i
f32 - i >= f32
f32 - i32
f32 - i32 * 0.5
f32 - i32 * f64
f32 - i32 ** 1
f32 - i32 <= f32
f32 - i32 <= i32
f32 - i32 >= abs(0.5)
f32 - i64
f32 - i64 ** 0.5
f32 - len(array)
f32 - max(1)
f32 - min(0.5)
f32 - min(0.5, 0.5)
f32 - reduce(array, #)
f32 - score(1)
f32 - score(i)
f32 / (0.5 - i32)
f32 / (1 + i)
f32 / (f64 - 0.5)
f32 / (i - i32)
f32 / (i32 + 1)
f32 / -1
f32 / -f64
f32 / -i64
f32 / 0.5 ** f64
f32 / 0.5 / i
f32 / 0.5 <= i64
f32 / 0.5 ^ f64
f32 / 1 * i32
f32 / 1 <= f32
f32 / 1 >= 0.5 ? f64 : foo
f32 / 1 >= f32
f32 / 1 >= i32
f32 / array[1]
f32 / array[i32]
f32 / bitnot(i)
f32 / ceil(1)
f32 / ceil(f32)
f32 / count(list, false)
f32 / f32
f32 / f32 / 0.5
f32 / f32 ^ 1
f32 / f64
f32 / f64 * i32
f32 / f64 + f32
f32 / f64 - i32
f32 / f64 / 1
f32 / f64 / f64
f32 / f64 / i64
f32 / f64 < i
f32 / float(1)
f32 / float(i32)
f32 / float(i64)
f32 / floor(i)
f32 / half(0.5)
f32 / half(1)
f32 / half(f64)
f32 / i
f32 / i * 0.5
f32 / i / 0.5
f32 / i <= i
f32 / i == i32
f32 / i > f64
f32 / i32
f32 / i32 * 1
f32 / i32 * f32
f32 / i32 ** f32
f32 / i32 + i
f32 / i32 + i64
f32 / i32 < f64 + 0.5
f32 / i32 >= i32
f32 / i64
f32 / i64 - f64
f32 / i64 ^ 0.5
f32 / int(0.5)
f32 / int(1 * i64)
f32 / max(0.5)
f32 / min(i32)
f32 / reduce(array, #)
f32 / reduce(list, 1)
f32 / score(i)
f32 < -0.5
f32 < -f64
f32 < -i
f32 < -i64
f32 < 0.5 + 0.5
f32 < 0.5 + 1
f32 < 0.5 ^ f32
f32 < 0.5 ^ i64
f32 < 1 % 1
f32 < 1 + f64
f32 < 1 ? f64 : i
f32 < 1 and ok
f32 < abs(0.5)
f32 < ceil(0.5)
f32 < ceil(f64)
f32 < count(array, ok)
f32 < count(list, ok)
f32 < f32
f32 < f32 / 1
f32 < f32 ^ f64
f32 < f64
f32 < f64 ** 1
f32 < f64 + 0.5
f32 < f64 + i
f32 < f64 / i64
f32 < f64 ? 0.5 : array
f32 < f64 ? div : i32
f32 < f64 and ok
f32 < floor(0.5)
f32 < floor(i)
f32 < half(0.5)
f32 < half(1)
f32 < i
f32 < i != ok
f32 < i / 1
f32 < i ? 1 : i
f32 < i32
f32 < i32 ** i64
f32 < i32 ? f64 : i
f32 < i32 ? greet : i32
f32 < i32 or ok
f32 < i64
f32 < i64 - i32
f32 < i64 / 0.5
f32 < i64 ? foo : i32
f32 < i64 ? foo?.Bar : div
f32 < i64 ^ 0.5
f32 < max(i)
f32 < max(i32, 1)
f32 < min(0.5)
f32 < reduce(array, #)
f32 < reduce(list, 1)
f32 < round(i64)
f32 <= -0.5
f32 <= -1
f32 <= -f64
f32 <= -i64
f32 <= 0.5 != true
f32 <= 0.5 * 0.5
f32 <= 0.5 + i
f32 <= 0.5 / i64
f32 <= 0.5 ? i64 : i
f32 <= 1 - 0.5
f32 <= 1 == nil
f32 <= 1 ? f64 : add
f32 <= 1 ? i64 : i64 % 1
f32 <= 1 ? list : div
f32 <= 1 || ok
f32 <= f32
f32 <= f32 * 1
f32 <= f32 + f64
f32 <= f32 + i
f32 <= f32 ? greet : half
f32 <= f64
f32 <= findIndex(list, ok) * f64
f32 <= float(1)
f32 <= float(i)
f32 <= float(i64)
f32 <= float(toJSON(1))
f32 <= floor(0.5)
f32 <= half(0.5)
f32 <= half(1)
f32 <= half(f64)
f32 <= i
f32 <= i == nil
f32 <= i and i32 <= f32
f32 <= i32
f32 <= i32 ** i32
f32 <= i32 + 1
f32 <= i32 / 1
f32 <= i64
f32 <= i64 ** i64
f32 <= i64 - f32
f32 <= i64 ? f64 : f64
f32 <= i64 ^ i32
f32 <= i64 || nil in array
f32 <= last(array)
f32 <= min(0.5)
f32 <= min(1)
f32 <= min(f64)
f32 <= round(0.5)
f32 <= score(1)
f32 == -0.5
f32 == -1
f32 == -f32
f32 == -i32
f32 == -i64
f32 == 0.5 != ok
f32 == 0.5 * 0.5
f32 == 0.5 * 1
f32 == 0.5 ** i32
f32 == 0.5 + 1
f32 == 0.5 / i32
f32 == 0.5 / i64
f32 == 0.5 ? array : greet
f32 == 0.5 ? true : score
f32 == 0.5 ^ 0.5
f32 == 0.5 || f64 >= 1
f32 == 1 != nil
f32 == 1 + f32
f32 == 1 - 1
f32 == 1 - i
f32 == 1 == ok
f32 == 1 ? foo : f32
f32 == 1 ? ok : add != nil
f32 == add(i, 1)
f32 == array[i32]
f32 == bitnot(i)
f32 == ceil(1)
f32 == ceil(i32)
f32 == ceil(i64)
f32 == f32
f32 == f32 ? f32 : list
f32 == f32 and ok
f32 == f64
f32 == f64 + f64
f32 == f64 ^ 1
f32 == findLastIndex(array, ok)
f32 == first(array)
f32 == float(0.5)
f32 == float(1)
f32 == floor(f64)
f32 == half(1)
f32 == half(f64)
f32 == i
f32 == i != nil
f32 == i - 0.5
f32 == i - i64
f32 == i32
f32 == i32 + i32
f32 == i32 ? 0.5 : array
f32 == i32 ? i64 : i64
f32 == i32 ? true : half
f32 == i32 ^ i32
f32 == i32 or ok
f32 == i64
f32 == i64 * i64
f32 == i64 + 0.5
f32 == i64 - 0.5
f32 == i64 - 1
f32 == i64 ? div : 0.5
f32 == last(array)
f32 == max(f64)
f32 == min(0.5)
f32 == min(f32)
f32 == nil ? array : add
f32 == nil ? i : div
f32 == round(1)
f32 == score(1)
f32 == score(i)
f32 > -(0.5 / 1)
f32 > -0.5
f32 > -f32
f32 > -i32
f32 > 0.5 / f32
f32 > 0.5 / i32
f32 > 0.5 == true ? i32 : array
f32 > 0.5 ? half : false
f32 > 0.5 ^ f64
f32 > 1 ** i
f32 > 1 ? 1 : false
f32 > 1 ? list : "foo"
f32 > abs(1)
f32 > abs(f32)
f32 > abs(f64)
f32 > count(array, ok)
f32 > f32
f32 > f32 + f32
f32 > f32 - f32
f32 > f32 == nil
f32 > f64
f32 > f64 * i
f32 > f64 ** 0.5
f32 > float(0.5)
f32 > float(i32)
f32 > floor(1)
f32 > half(1)
f32 > half(f64)
f32 > i
f32 > i != ok
f32 > i * 1
f32 > i ? array : 1
f32 > i ? foo : list
f32 > i32
f32 > i32 != nil
f32 > i32 * f64
f32 > i32 ? 0.5 : greet
f32 > i32 and ok
f32 > i64
f32 > i64 % i64
f32 > i64 ** i
f32 > i64 + 0.5
f32 > i64 - i64
f32 > i64 ? i : 0.5
f32 > mean(array)
f32 > min(f32)
f32 > min(i64)
f32 > reduce(array, #)
f32 > reduce(array, i64)
f32 > reduce(list, f32)
f32 > round(0.5)
f32 > score(1, 1)
f32 >= -0.5
f32 >= -f32
f32 >= -f64
f32 >= 0.5 * f64
f32 >= 0.5 / i64
f32 >= 0.5 ? i64 : nil
f32 >= 0.5 ^ i64
f32 >= 1 == false
f32 >= 1 == ok ? add : array
f32 >= 1 ? i : 1
f32 >= abs(0.5)
f32 >= abs(f32)
f32 >= abs(i)
f32 >= array[1]
f32 >= array[i32]
f32 >= bitnot(i32)
f32 >= count(list, false)
f32 >= f32
f32 >= f32 ** 1
f32 >= f32 - i64
f32 >= f32 ? half : greet
f32 >= f32 or nil != ok
f32 >= f64
f32 >= f64 && ok
f32 >= f64 ** 0.5
f32 >= f64 ** i32
f32 >= f64 - f64
f32 >= f64 / i64
f32 >= f64 or ok
f32 >= float(0.5)
f32 >= half(f64)
f32 >= i
f32 >= i - f32
f32 >= i ? 1 : nil
f32 >= i ^ i
f32 >= i32
f32 >= i32 % i
f32 >= i32 - f32
f32 >= i32 / i64
f32 >= i32 ? f32 : 0.5
f32 >= i32 or not ok
f32 >= i64
f32 >= i64 * i32
f32 >= i64 + f64
f32 >= i64 / 1
f32 >= len("bar")
f32 >= max(i)
f32 >= max(i64)
f32 >= reduce(array, #)
f32 >= score(1)
f32 >= sum(array)
f32 ^ (0.5 * f64)
f32 ^ (0.5 / 1)
f32 ^ (0.5 / i)
f32 ^ (1 * i)
f32 ^ (1 + f64)
f32 ^ (f32 * i64)
f32 ^ (f64 * f64)
f32 ^ (f64 - 1)
f32 ^ (f64 / i)
f32 ^ (i64 * f64)
f32 ^ (i64 * i32)
f32 ^ (i64 * i64)
f32 ^ (i64 + i64)
f32 ^ (i64 - f32)
f32 ^ -0.5
f32 ^ -1
f32 ^ -i32
f32 ^ 0.5 ** i32
f32 ^ 0.5 - f32
f32 ^ 0.5 - i32
f32 ^ 0.5 == i64
f32 ^ 0.5 ^ 0.5
f32 ^ 1 != i64
f32 ^ 1 / f32
f32 ^ 1 >= -0.5
f32 ^ abs(1)
f32 ^ abs(f32)
f32 ^ array[i64]
f32 ^ array[i]
f32 ^ bitnot(1)
f32 ^ bitor(1, i32)
f32 ^ f32
f32 ^ f32 ^ 0.5
f32 ^ f32 in array
f32 ^ f64
f32 ^ f64 ** f64
f32 ^ f64 / 1 * 1
f32 ^ f64 / f64
f32 ^ f64 == i64
f32 ^ f64 not in array
f32 ^ floor(0.5)
f32 ^ floor(1)
f32 ^ half(1)
f32 ^ half(f64)
f32 ^ i
f32 ^ i - f64
f32 ^ i <= i
f32 ^ i >= f64
f32 ^ i ^ f32
f32 ^ i32
f32 ^ i32 ** i64
f32 ^ i64
f32 ^ i64 ** 1
f32 ^ i64 + i64
f32 ^ i64 - f32
f32 ^ i64 >= f64
f32 ^ i64 ^ f32
f32 ^ int(i32)
f32 ^ len("foo")
f32 ^ len(array)
f32 ^ min(1)
f32 ^ min(f64)
f32 ^ min(i)
f32 ^ reduce(array, 1)
f32 ^ round(i)
f32 ^ round(i32)
f32 ^ score(i)
f32 ^ score(reduce(array, #))
f32 in [i]
f32 in [nil]
f32 in array
f32 in array == nil
f32 in array ? 1 : i
f32 in array ? false : 0.5
f32 in array ? nil : "bar"
f32 in groupBy(array, #)
f32 in groupBy(list, #)
f32 in groupBy(list, ok)
f32 in map(array, #)
f32 not in [f32, "bar"]
f32 not in array
f32 not in array ? foo : i
f32 not in array ? i32 : div
f64
f64 != -0.5
f64 != -1
f64 != -f32
f64 != -i
f64 != -i64
f64 != 0.5 != false
f64 != 0.5 ** 1
f64 != 0.5 ** f64
f64 != 0.5 + f32
f64 != 0.5 ^ 0.5
f64 != 1 - 1
f64 != 1 / 0.5
f64 != 1 ? half : div
f64 != 1 ^ i
f64 != abs(i32)
f64 != bitnot(i64)
f64 != ceil(i)
f64 != f32
f64 != f32 != nil
f64 != f32 + 0.5
f64 != f32 + i32
f64 != f32 - i32
f64 != f32 ? array : nil
f64 != f32 ? i32 : "bar"
f64 != f32 ? ok : i
f64 != f32 or greet == nil
f64 != f64
f64 != f64 * f32
f64 != f64 ? f64 : true
f64 != first(array)
f64 != floor(1)
f64 != half(0.5)
f64 != half(1)
f64 != i
f64 != i * 0.5
f64 != i / 1
f64 != i / f32
f64 != i ^ f64
f64 != i32
f64 != i32 * f32
f64 != i32 == ok
f64 != i32 ? f64 : ok
f64 != i32 ? foo : ok
f64 != i32 ^ i32
f64 != i64
f64 != i64 * f64
f64 != i64 - i32
f64 != i64 or ok
f64 != int(i64)
f64 != min(f64)
f64 != nil != ok
f64 != nil && f64 > 0.5
f64 != nil == true
f64 != nil ? array : foo
f64 != nil ? f64 : half
f64 != nil ? i64 : 0.5
f64 != nil ? nil : half
f64 != round(1)
f64 * (0.5 - 1)
f64 * (i64 + 0.5)
f64 * -1
f64 * -f32
f64 * -f64
f64 * 0.5 * 1
f64 * 0.5 * i64
f64 * 0.5 ** 0.5
f64 * 0.5 / 0.5
f64 * 0.5 / f32
f64 * 0.5 / i32
f64 * 0.5 < f32
f64 * 0.5 <= i
f64 * 0.5 == f64
f64 * 0.5 ^ 1
f64 * 1 * f64
f64 * 1 * i32
f64 * 1 ** 1
f64 * 1 + f64
f64 * 1 - i32
f64 * 1 <= 1 + 1
f64 * 1 == i64
f64 * 1 > f32
f64 * 1 > f64
f64 * 1 >= f64
f64 * bitnot(i64)
f64 * ceil(i)
f64 * ceil(i64)
f64 * f32
f64 * f32 != i
f64 * f32 / i64
f64 * f32 > f64
f64 * f32 > i
f64 * f64
f64 * f64 * f64
f64 * f64 / 1
f64 * f64 <= f64
f64 * f64 > f64
f64 * f64 in array
f64 * float(f32)
f64 * floor(0.5)
f64 * get(array, 1)
f64 * half(f64)
f64 * i
f64 * i / f64
f64 * i32
f64 * i32 != i64 * f64
f64 * i32 - i32
f64 * i64
f64 * i64 ** i
f64 * i64 == i
f64 * i64 > i32
f64 * i64 ^ i32
f64 * median(array)
f64 * min(1)
f64 * min(f64)
f64 * min(i)
f64 * round(1)
f64 * round(i64)
f64 ** (0.5 - i)
f64 ** (0.5 / i64)
f64 ** (1 * i)
f64 ** (f64 * i32)
f64 ** (f64 / 1)
f64 ** (i * 1)
f64 ** (i * i64)
f64 ** (i32 * i)
f64 ** (i32 + i32)
f64 ** (i32 - f64)
f64 ** (i32 / i64)
f64 ** (i64 % 1)
f64 ** (i64 + 0.5)
f64 ** (i64 + i64)
f64 ** (i64 - i32)
f64 ** (i64 / 0.5)
f64 ** -0.5
f64 ** -1
f64 ** -i
f64 ** 0.5 ** f32
f64 ** 0.5 == i32
f64 ** 1 + f64
f64 ** 1 / i
f64 ** 1 < f32
f64 ** 1 > i32
f64 ** 1 ^ f32
f64 ** abs(i)
f64 ** bitand(1, 1)
f64 ** ceil(0.5)
f64 ** ceil(f64)
f64 ** f32
f64 ** f32 != f64
f64 ** f32 ** f64
f64 ** f32 > f64
f64 ** f64
f64 ** f64 - f32
f64 ** f64 / min(1)
f64 ** f64 <= f32
f64 ** f64 <= i64
f64 ** f64 ^ 0.5
f64 ** half(0.5)
f64 ** i
f64 ** i * f64
f64 ** i ** i
f64 ** i + -i32
f64 ** i + f32
f64 ** i32
f64 ** i32 != f64
f64 ** i32 > f64
f64 ** i64
f64 ** i64 + f32
f64 ** i64 <= f32
f64 ** i64 not in map(array, 0.5)
f64 ** last(array)
f64 ** len("bar")
f64 ** max(i)
f64 ** min(f32)
f64 ** reduce(array, #)
f64 ** reduce(list, i32)
f64 ** score(i)
f64 + -0.5
f64 + -1
f64 + -f64
f64 + -i
f64 + -i32
f64 + 0.5 / f32
f64 + 0.5 < i32
f64 + 0.5 <= f64
f64 + 0.5 <= float(f32)
f64 + 0.5 <= i
f64 + 0.5 > f64
f64 + 0.5 ^ i
f64 + 0.5 ^ i64
f64 + 1 % i
f64 + 1 * 0.5
f64 + 1 * 1
f64 + 1 * f64
f64 + 1 ** 0.5
f64 + 1 + i32
f64 + 1 / i64
f64 + 1 ^ i
f64 + 1 not in map(array, #)
f64 + ceil(0.5)
f64 + count(list, true)
f64 + f32
f64 + f32 == i != true
f64 + f64
f64 + f64 < f32
f64 + f64 <= i32
f64 + f64 ^ i32
f64 + float(f64)
f64 + floor(f64)
f64 + get(array, i32)
f64 + half(0.5)
f64 + half(1)
f64 + i
f64 + i + 0.5
f64 + i / 0.5
f64 + i / i32
f64 + i > 0.5 != true
f64 + i > f64
f64 + i >= f64
f64 + i32
f64 + i32 != i64
f64 + i32 % i32
f64 + i32 ** 1
f64 + i32 > i64
f64 + i64
f64 + i64 + i64
f64 + i64 / f64
f64 + i64 > i32 / i
f64 + i64 > i64
f64 + i64 ^ i32
f64 + reduce(array, #)
f64 + reduce(list, f32)
f64 + score(1)
f64 - -0.5
f64 - -1
f64 - -f64
f64 - -i
f64 - -i64
f64 - 0.5 - 0.5
f64 - 0.5 - 1
f64 - 0.5 - i32
f64 - 0.5 >= f64
f64 - 0.5 ^ i64
f64 - 1 * i32
f64 - 1 + i64
f64 - 1 - f64
f64 - 1 / i64
f64 - 1 < f32
f64 - 1 < f32 ? i64 : false
f64 - 1 >= len(array)
f64 - 1 ^ i64
f64 - f32
f64 - f32 != i64
f64 - f32 + f32
f64 - f32 < f64
f64 - f32 ^ f32
f64 - f64
f64 - f64 + -1
f64 - f64 < f64
f64 - float(f32)
f64 - floor(1)
f64 - half(1)
f64 - i
f64 - i + 0.5
f64 - i + 1
f64 - i + i32
f64 - i / i
f64 - i ^ f32
f64 - i32
f64 - i32 / 0.5
f64 - i32 >= i64
f64 - i32 ^ 0.5
f64 - i64
f64 - i64 ** i32
f64 - int(i)
f64 - int(i32)
f64 - reduce(array, -#)
f64 - round(1)
f64 - score(i)
f64 / (0.5 - 1)
f64 / (0.5 - i64)
f64 / (f32 + 1)
f64 / (i + 0.5)
f64 / (i32 + i64)
f64 / -0.5
f64 / -1
f64 / -f64
f64 / -i
f64 / -i32
f64 / -i64
f64 / 0.5 != f64
f64 / 0.5 * f32
f64 / 0.5 + f64
f64 / 0.5 / 1
f64 / 0.5 < i32
f64 / 0.5 == i32
f64 / 0.5 >= i64
f64 / 1 != i
f64 / 1 * i32
f64 / 1 ** 1
f64 / 1 / i
f64 / 1 <= i64
f64 / 1 ^ i
f64 / abs(f64)
f64 / array[1]
f64 / array[i64]
f64 / ceil(i32)
f64 / f32
f64 / f32 * i
f64 / f32 * i64
f64 / f32 / 0.5
f64 / f32 == f32
f64 / f32 ^ 0.5
f64 / f64
f64 / f64 / 0.5
f64 / f64 >= f64
f64 / f64 >= i32
f64 / f64 >= i64
f64 / float(1)
f64 / float(f64)
f64 / floor(i64)
f64 / get(array, 1)
f64 / get(array, i32)
f64 / half(0.5)
f64 / half(1)
f64 / i
f64 / i != f64
f64 / i ** 0.5
f64 / i ** f32
f64 / i + i32
f64 / i == i64
f64 / i >= i
f64 / i32
f64 / i32 != 0.5 - i64
f64 / i32 == f64 ** i
f64 / i32 == i32
f64 / i32 >= f32
f64 / i64
f64 / i64 < f64
f64 / int(f32)
f64 / last(array)
f64 / max(i)
f64 / reduce(array, #)
f64 / reduce(array, f64)
f64 / reduce(list, f32)
f64 / round(1)
f64 / round(i64)
f64 / score(1)
f64 < -0.5
f64 < -i32
f64 < -i64
f64 < 0.5 + i64
f64 < 0.5 / 0.5
f64 < 0.5 / i
f64 < 0.5 == true
f64 < 0.5 ? f64 : array
f64 < 1 % 1
f64 < 1 * 0.5
f64 < 1 ** i32
f64 < 1 / f32
f64 < 1 == false
f64 < 1 ? i : "foo"
f64 < abs(1)
f64 < abs(f32)
f64 < array[i64]
f64 < bitnot(1)
f64 < ceil(f64)
f64 < count(array, false)
f64 < f32
f64 < f32 * i
f64 < f32 / i64
f64 < f32 ^ 1
f64 < f32 ^ f64
f64 < f64
f64 < f64 == ok
f64 < floor(i64)
f64 < get(array, i)
f64 < i
f64 < i && "bar" < "bar"
f64 < i && ok
f64 < i ** i32
f64 < i + 1
f64 < i ? 0.5 : "bar"
f64 < i ? div : nil
f64 < i32
f64 < i32 * f64
f64 < i32 * i
f64 < i32 ** f32
f64 < i32 ** i64
f64 < i32 + f32
f64 < i32 + f64
f64 < i32 + i64
f64 < i32 ? false : ok
f64 < i32 ? true : 1
f64 < i32 ^ 1
f64 < i32 ^ i32
f64 < i64
f64 < i64 * f64
f64 < i64 ^ i
f64 < int(0.5)
f64 < max(1)
f64 < max(f64, i32)
f64 < min(0.5, i64)
f64 < min(f32)
f64 < min(f64, f32)
f64 < min(i32)
f64 < round(0.5)
f64 < score(1)
f64 <= -0.5
f64 <= -1
f64 <= -i
f64 <= -i32
f64 <= 0.5 != false
f64 <= 0.5 + 0.5
f64 <= 0.5 / f32
f64 <= 0.5 ? greet : f64
f64 <= 0.5 ? score : array
f64 <= 1 * i32
f64 <= 1 + 0.5
f64 <= 1 / i
f64 <= 1 == nil
f64 <= 1 ? "bar" : array
f64 <= 1 ? half : list
f64 <= 1 ^ f64
f64 <= abs(0.5)
f64 <= abs(i)
f64 <= array[i64]
f64 <= ceil(i)
f64 <= f32
f64 <= f32 ** 0.5
f64 <= f32 - i64
f64 <= f32 ? f64 : div
f64 <= f32 ^ f32
f64 <= f64
f64 <= f64 != ok
f64 <= f64 + f64
f64 <= f64 + i32
f64 <= f64 - 1
f64 <= f64 ^ i
f64 <= float(i)
f64 <= float(i64)
f64 <= half(0.5)
f64 <= half(1)
f64 <= i
f64 <= i * i64
f64 <= i - 1
f64 <= i - f32
f64 <= i ^ f64
f64 <= i32
f64 <= i32 ** 1
f64 <= i32 ? div : foo
f64 <= i32 or all(list, ok)
f64 <= i64
f64 <= i64 + 1
f64 <= i64 - 0.5
f64 <= int(f32)
f64 <= max(i)
f64 <= max(i64, i32)
f64 <= min(i32)
f64 <= min(i64)
f64 <= reduce(array, #)
f64 == -0.5
f64 == -1
f64 == -f32
f64 == -f64
f64 == -i
f64 == -i64
f64 == 0.5 ** 0.5
f64 == 0.5 - i
f64 == 0.5 ? 0.5 : i64
f64 == 0.5 ? 1 : 1
f64 == 1 != ok
f64 == 1 % 1
f64 == 1 * i64
f64 == 1 ** 0.5
f64 == 1 == false
f64 == abs(0.5)
f64 == abs(i64)
f64 == ceil(i)
f64 == f32
f64 == f32 && ok
f64 == f32 + len(array)
f64 == f32 ? 0.5 : i
f64 == f32 ^ i32
f64 == f64
f64 == f64 ** i
f64 == f64 - f64
f64 == float(0.5)
f64 == floor(0.5)
f64 == half(0.5)
f64 == half(f64)
f64 == i
f64 == i != false
f64 == i * 1
f64 == i ? i32 : score
f64 == i32
f64 == i32 == ok ? 1 : list
f64 == i32 == true
f64 == i32 || ok
f64 == i64
f64 == i64 / i
f64 == i64 ? 1 : 0.5
f64 == i64 ? greet : i32
f64 == int(f32)
f64 == max(0.5)
f64 == max(i)
f64 == min(i32)
f64 == nil && ok
f64 == nil ? 0.5 : add
f64 == nil ? foo : "foo"
f64 == reduce(list, i32)
f64 == round(i)
f64 == score(i, 1)
f64 > -0.5
f64 > -1
f64 > -f64
f64 > -i
f64 > -i32
f64 > 0.5 ** f32
f64 > 0.5 / i
f64 > 0.5 ^ i
f64 > 0.5 or i <= 0.5
f64 > 1 + f32
f64 > 1 + i32
f64 > 1 ? div : i32
f64 > 1 ^ i32
f64 > array[i64]
f64 > ceil(0.5)
f64 > ceil(1)
f64 > ceil(f32)
f64 > f32
f64 > f32 / 1
f64 > f64
f64 > f64 - 0.5
f64 > float(0.5 * i64)
f64 > floor(f64)
f64 > get(array, 1)
f64 > half(0.5)
f64 > half(1)
f64 > half(f64)
f64 > i
f64 > i - 0.5
f64 > i32
f64 > i32 == ok
f64 > i32 ? f32 : array
f64 > i32 ? list : half
f64 > i32 ^ i32
f64 > i32 ^ i64
f64 > i64
f64 > i64 - 1
f64 > i64 ? array : half
f64 > i64 ? list : div
f64 > i64 || ok or ok
f64 > int(f32)
f64 > last(array)
f64 > max(0.5)
f64 > max(0.5, i64)
f64 > max(f32)
f64 > median(array)
f64 > min(f32)
f64 >= -0.5
f64 >= -1
f64 >= -i64
f64 >= 0.5 + i32
f64 >= 0.5 - 1
f64 >= 0.5 - f32
f64 >= 0.5 / i64
f64 >= 0.5 ? list : i32
f64 >= 0.5 ^ i64
f64 >= array[1]
f64 >= f32
f64 >= f32 - i32
f64 >= f32 ^ 1
f64 >= f64
f64 >= f64 != nil
f64 >= f64 != ok
f64 >= findIndex(array, ok)
f64 >= floor(f32)
f64 >= floor(i)
f64 >= half(0.5)
f64 >= half(1)
f64 >= i
f64 >= i * 0.5
f64 >= i ** 0.5
f64 >= i ** i32
f64 >= i / i32
f64 >= i ^ 1
f64 >= i32
f64 >= i32 - f64
f64 >= i32 ? ok : add
f64 >= i32 ^ 1
f64 >= i64
f64 >= i64 + f64
f64 >= i64 ? 0.5 : score
f64 >= i64 ? 1 : f32
f64 >= max(1)
f64 >= median(array)
f64 >= reduce(array, #)
f64 >= reduce(array, i32)
f64 >= score(i)
f64 ^ (0.5 * i)
f64 ^ (0.5 + 1)
f64 ^ (1 * f64)
f64 ^ (1 - 1)
f64 ^ (f32 + 1)
f64 ^ (f32 - 0.5)
f64 ^ (f32 - i)
f64 ^ (f32 / -f64)
f64 ^ (i32 - 1)
f64 ^ (i32 / f32)
f64 ^ (i64 - 1)
f64 ^ -0.5
f64 ^ -i32
f64 ^ 0.5 * f64
f64 ^ 0.5 ** f32
f64 ^ 0.5 ** i32
f64 ^ 0.5 > ceil(f32)
f64 ^ 0.5 > i
f64 ^ 0.5 >= f64
f64 ^ 0.5 >= i32
f64 ^ 0.5 ^ i32
f64 ^ 0.5 not in array
f64 ^ 1 ** i
f64 ^ 1 ** i64
f64 ^ 1 ^ i
f64 ^ abs(0.5)
f64 ^ array[i64]
f64 ^ f32
f64 ^ f32 ** 1
f64 ^ f32 < score(1)
f64 ^ f32 >= i32
f64 ^ f64
f64 ^ f64 - -i
f64 ^ f64 == i32
f64 ^ f64 > f64
f64 ^ f64 ^ i
f64 ^ f64 ^ i64
f64 ^ findIndex(array, true)
f64 ^ float(abs(i))
f64 ^ floor(f64)
f64 ^ half(1)
f64 ^ half(f64)
f64 ^ i
f64 ^ i ** 1
f64 ^ i + f32
f64 ^ i + i32
f64 ^ i <= i32
f64 ^ i ^ i64
f64 ^ i32
f64 ^ i32 / f64
f64 ^ i32 <= i32
f64 ^ i32 >= i
f64 ^ i64
f64 ^ i64 ** i64
f64 ^ int(0.5)
f64 ^ int(f64)
f64 ^ last(array)
f64 ^ len(list)
f64 ^ min(1)
f64 ^ reduce(array, #)
f64 ^ round(i)
f64 ^ score(1)
f64 in array
f64 in array != nil
f64 in groupBy(list, i64)
f64 not in array
f64 not in array != ok
f64 not in array != true
f64 not in array == true
f64 not in groupBy(array, #)
f64 not in groupBy(array, bitnand(#, 1))
f64 not in i .. i32
f64 not in map(array, #)
false != false ? foo : greet
false && i not in array
false && nil not in array
false && nil not in list
false == nil ? i32 : f64
false == nil ? i32 : i32
false ? "bar" : 0.5 - i
false ? "foo" : f32 * i
false ? "foo" : f32 / i32
false ? "foo" : foo.Qux
false ? add : 1 / i ^ 0.5
false ? add : i64 - i
false ? div : i64 ** i
false ? f32 : foo.Qux
false ? f32 : half != score
false ? f64 : 0.5 != i32
false ? f64 : 0.5 ** i32
false ? f64 : 1 >= i
false ? f64 : foo?.Qux
false ? f64 : i ^ f32
false ? false : foo?.Qux
false ? foo : i32 - i
false ? half : 0.5 == f32
false ? half : i ^ i64
false ? i : foo?.Qux
false ? i : nil in list
false ? i32 : 1 <= i32
false ? i32 : foo.Qux
false ? i64 : 1 <= f32
false ? i64 : foo.Qux
false ? i64 : i64 ** i64
false ? list : list == list
false ? nil : foo?.Qux
false ? nil : i32 > i32
false ? ok : foo.String()
false ? ok : i64 < i64
false and false || 0.5 > f32
false or 1 not in array
false or true or ok
false or true || ok
filter(1 .. 1, # > i)
filter(1 .. i, i >= #)
filter([0.5], # > 0.5)
filter([nil], # != false)
filter(array, !true)
filter(array, "bar" != "foo")
filter(array, "foo" == nil)
filter(array, # != #)
filter(array, # != f32)
filter(array, # != f64)
filter(array, # != i)
filter(array, # != i64)
filter(array, # < #)
filter(array, # < f64)
filter(array, # <= #)
filter(array, # <= 1)
filter(array, # <= bitshr(#, #))
filter(array, # <= i)
filter(array, # <= i64)
filter(array, # == #)
filter(array, # == 0.5)
filter(array, # == f32)
filter(array, # == f64)
filter(array, # == i)
filter(array, # == i32)
filter(array, # == i64)
filter(array, # == nil)
filter(array, # > #)
filter(array, # > 0.5)
filter(array, # > 1)
filter(array, # > i)
filter(array, # > i32)
filter(array, # >= #)
filter(array, # >= 0.5)
filter(array, # >= 1)
filter(array, # >= f32)
filter(array, # >= i)
filter(array, # >= i32)
filter(array, # >= i64)
filter(array, 0.5 != #)
filter(array, 0.5 != f64)
filter(array, 0.5 != i)
filter(array, 0.5 < #)
filter(array, 0.5 < f64)
filter(array, 0.5 < i32)
filter(array, 0.5 <= #)
filter(array, 0.5 <= i)
filter(array, 0.5 <= i32)
filter(array, 0.5 == #)
filter(array, 0.5 == f64)
filter(array, 0.5 > #)
filter(array, 0.5 >= #)
filter(array, 1 != #)
filter(array, 1 < i)
filter(array, 1 == #)
filter(array, 1 == 0.5)
filter(array, 1 == i)
filter(array, 1 > i)
filter(array, 1 >= #)
filter(array, add == add)
filter(array, add == nil)
filter(array, any(list, ok))
filter(array, div != score)
filter(array, f32 != #)
filter(array, f32 < #)
filter(array, f32 <= #)
filter(array, f32 == #)
filter(array, f32 == i64)
filter(array, f32 > #)
filter(array, f32 >= #)
filter(array, f64 < #)
filter(array, f64 <= #)
filter(array, f64 == i32)
filter(array, f64 >= #)
filter(array, half != nil)
filter(array, half == half)
filter(array, half(1) >= # ^ i)
filter(array, i != #)
filter(array, i != f64)
filter(array, i <= i32)
filter(array, i == #)
filter(array, i > #)
filter(array, i > f32)
filter(array, i32 != i64)
filter(array, i32 < 0.5)
filter(array, i32 > #)
filter(array, i64 < #)
filter(array, i64 < i64)
filter(array, i64 == #)
filter(array, i64 == i32)
filter(array, i64 >= #)
filter(array, nil != #)
filter(array, nil != greet)
filter(array, nil == #)
filter(array, nil == 1)
filter(array, nil == i32)
filter(array, not false)
filter(array, not ok)
filter(array, not true)
filter(array, ok && true)
filter(array, ok)
filter(array, ok)[i64]
filter(array, score == nil)
filter(array, true == true)
filter(array, true and true)
filter(false ? ok : array, # == nil)
filter(filter(list, true), ok)
filter(groupBy(array, #).greet, # matches #?.score)
filter(groupBy(array, #)?.div, .Qux(#).array)
filter(groupBy(array, f64)?.f32, #)
filter(groupBy(list, #).f64, # not matches #?.foo)
filter(groupBy(list, #)?.f64, .foo)
filter(groupBy(list, 0.5)?.i, #)
filter(i .. i64, ok)
filter(list, !ok)
filter(list, !true)
filter(list, "bar" < "foo")
filter(list, "bar" not matches "foo")
filter(list, "foo" == "foo")
filter(list, "foo" in #)
filter(list, "foo" not endsWith "bar")
filter(list, "foo" startsWith "bar")
filter(list, # != #)
filter(list, # != foo)
filter(list, # != nil)
filter(list, # == #)
filter(list, # == foo)
filter(list, # in list)
filter(list, 0.5 < 1)
filter(list, 0.5 <= 0.5)
filter(list, 0.5 >= 1)
filter(list, 0.5 >= i)
filter(list, 0.5 >= i64)
filter(list, 1 < 1)
filter(list, 1 <= f32)
filter(list, any(array, ok))
filter(list, any(list, true))
filter(list, div != div)
filter(list, f32 <= 1)
filter(list, f32 == f64)
filter(list, f32 > i)
filter(list, f64 <= 1)
filter(list, f64 == 0.5)
filter(list, false != false)
filter(list, false or ok)
filter(list, foo == #)
filter(list, i < 0.5)
filter(list, i < f32)
filter(list, i >= 0.5)
filter(list, i64 > 0.5)
filter(list, nil != "foo")
filter(list, nil != #)
filter(list, nil != #?.Bar)
filter(list, nil != add)
filter(list, nil != greet)
filter(list, nil != i64)
filter(list, nil == #)
filter(list, nil == 0.5)
filter(list, nil == f32)
filter(list, nil == half)
filter(list, nil == i32)
filter(list, nil == score)
filter(list, ok == nil)
filter(list, ok and false)
filter(list, ok)
filter(list, ok)[i]
filter(list, score == half)
filter(list, true == ok)
filter(list, true || true)
filter(list, true) == list
filter(map(array, #), # == 1)
filter(map(array, #), # > #)
filter(map(array, 1), ok)
filter(map(array, greet), ok)
filter(map(array, i32), ok)
filter(map(array, i64), nil == div)
filter(map(array, ok), true || ok)
filter(map(array, score), # != nil)
filter(map(list, #), # == #)
filter(map(list, #), half != nil)
filter(map(list, #), ok)
filter(map(list, array), # == #)
filter(map(list, f32), # == #)
filter(map(list, f32), ok)
filter(map(list, false), #)
filter(map(list, i32), i64 <= i32)
filter(map(list, ok), #)
filter(map(list, true), #)
filter(ok ? "foo" : 0.5, # <= i64)
filter(true ? list : score, # != #)
find(1 .. i, ok)
find([ok], #)
find([score, score], # == #)
find(array, !(# <= i32))
find(array, !ok)
find(array, !true)
find(array, "bar" not startsWith "foo")
find(array, "foo" not contains "bar")
find(array, # != #)
find(array, # != 1)
find(array, # != i)
find(array, # != i32)
find(array, # != nil)
find(array, # - i != #)
find(array, # < #)
find(array, # < 0.5)
find(array, # < 1)
find(array, # < f32)
find(array, # < i)
find(array, # < i32)
find(array, # < i64)
find(array, # <= #)
find(array, # <= 0.5)
find(array, # <= 1)
find(array, # <= i32)
find(array, # == #)
find(array, # == 0.5)
find(array, # == 1)
find(array, # == i)
find(array, # == i64)
find(array, # == nil)
find(array, # > #)
find(array, # > 1)
find(array, # > i32)
find(array, # > i64)
find(array, # >= #)
find(array, # >= 1)
find(array, # >= f64)
find(array, # >= i)
find(array, # not in array)
find(array, 0.5 != 1)
find(array, 0.5 / i64 <= #)
find(array, 0.5 < #)
find(array, 0.5 < f64)
find(array, 0.5 <= #)
find(array, 0.5 >= #)
find(array, 0.5 >= 0.5)
find(array, 0.5 >= f64)
find(array, 1 != #)
find(array, 1 < #)
find(array, 1 < i32)
find(array, 1 < i64)
find(array, 1 <= #)
find(array, 1 <= i)
find(array, 1 == #)
find(array, 1 > #)
find(array, 1 >= #)
find(array, div != nil)
find(array, div == half)
find(array, f32 != #)
find(array, f32 != f32)
find(array, f32 < #)
find(array, f32 <= #)
find(array, f32 == #)
find(array, f32 == i32)
find(array, f32 > #)
find(array, f32 >= #)
find(array, f64 != #)
find(array, f64 < #)
find(array, f64 < 1)
find(array, f64 <= #)
find(array, f64 == #)
find(array, f64 == i64)
find(array, false ? # : false)
find(array, false) != f64
find(array, floor(#) > #)
find(array, greet != greet)
find(array, half == score)
find(array, i % # != f64)
find(array, i < 0.5)
find(array, i <= #)
find(array, i > 0.5)
find(array, i >= #)
find(array, i >= 1)
find(array, i32 != #)
find(array, i32 != i32)
find(array, i32 == #)
find(array, i32 > #)
find(array, i32 >= #)
find(array, i64 != #)
find(array, i64 != 1)
find(array, i64 < #)
find(array, i64 <= #)
find(array, i64 == #)
find(array, i64 > #)
find(array, nil != nil)
find(array, nil == #)
find(array, nil == 0.5)
find(array, nil == i32)
find(array, none(array, true))
find(array, not (# == #))
find(array, ok == nil)
find(array, ok and false)
find(array, ok)
find(array, ok) % i32
find(array, ok) ** i
find(array, ok) >= i32
find(array, true) > f64
find(array, true) > i64
find(filter(list, false), i64 not in array)
find(groupBy(array, #).Qux, .String?.f32)
find(groupBy(array, #).ok, first(#[1]))
find(i .. i64, ok)
find(i64 .. i32, # != #)
find(list, !false)
find(list, !ok)
find(list, "bar" not in #)
find(list, "foo" contains "foo")
find(list, # != #)
find(list, # != nil)
find(list, # == #)
find(list, # == foo)
find(list, # == nil)
find(list, 0.5 != 1)
find(list, 0.5 <= 0.5)
find(list, 1 != 0.5)
find(list, 1 < 1)
find(list, 1 < i64)
find(list, 1 == f64)
find(list, 1 > 0.5)
find(list, 1 > i)
find(list, 1 > i64)
find(list, f32 < 1)
find(list, f32 <= 0.5)
find(list, f32 <= i32)
find(list, f32 == i64)
find(list, f32 > f64)
find(list, f32 not in array)
find(list, f64 < f64)
find(list, false && true)
find(list, false)?.Bar
find(list, foo != #)
find(list, foo == #)
find(list, greet != div)
find(list, i != 1)
find(list, i != f64)
find(list, i != i32)
find(list, i32 != 1)
find(list, i32 != f64)
find(list, i32 < i)
find(list, i32 == i32)
find(list, nil != #)
find(list, nil != ok)
find(list, nil == array)
find(list, nil == div)
find(list, not false)
find(list, ok != false)
find(list, ok)
find(list, ok).String
find(list, ok).String()
find(list, ok)?.Bar
find(list, ok)?.Qux
find(list, ok)?.String
find(list, score == score)
find(list, true != nil)
find(list, true == true)
find(list, true or false)
find(list, true).Bar
find(list, true).Qux
find(list, true).String
find(list, true)?.Bar
find(list, true)?.String
find(map(array, #), # != f32)
find(map(array, #), # <= 1)
find(map(array, #), # == 0.5)
find(map(array, #), ok)
find(map(array, false), #)
find(map(array, foo), ok)
find(map(array, ok), #)
find(map(list, #), # != #)
find(map(list, #), ok)
find(map(list, 0.5), # != #)
find(map(list, add), 0.5 >= i64)
find(map(list, div), # == #)
find(map(list, f32), # > 0.5)
find(map(list, false), #)
find(map(list, i), # == i64)
find(map(list, ok), #)
find(map(list, true), #)
find(ok ? "foo" : f64, f32 >= #)
findIndex(array, !ok)
findIndex(array, "bar" == "foo")
findIndex(array, "foo" > "foo")
findIndex(array, "foo" in foo)
findIndex(array, # != #)
findIndex(array, # != 0.5)
findIndex(array, # != f32)
findIndex(array, # != f64)
findIndex(array, # != i)
findIndex(array, # != i64)
findIndex(array, # != nil)
findIndex(array, # < #)
findIndex(array, # < 1)
findIndex(array, # < i32)
findIndex(array, # <= #)
findIndex(array, # <= 0.5)
findIndex(array, # <= 1)
findIndex(array, # == #)
findIndex(array, # == 0.5)
findIndex(array, # == 1)
findIndex(array, # == i32)
findIndex(array, # == nil)
findIndex(array, # > #)
findIndex(array, # > 0.5)
findIndex(array, # > 1)
findIndex(array, # > f64)
findIndex(array, # > i)
findIndex(array, # > i64)
findIndex(array, # >= #)
findIndex(array, # >= 0.5)
findIndex(array, # >= 1)
findIndex(array, # >= f32)
findIndex(array, # >= f64)
findIndex(array, # >= i)
findIndex(array, # >= i32)
findIndex(array, # >= i64)
findIndex(array, 0.5 != #)
findIndex(array, 0.5 != 1)
findIndex(array, 0.5 < 1)
findIndex(array, 0.5 <= #)
findIndex(array, 0.5 == #)
findIndex(array, 0.5 == i64)
findIndex(array, 0.5 > #)
findIndex(array, 0.5 > 0.5)
findIndex(array, 0.5 > i)
findIndex(array, 0.5 > i32)
findIndex(array, 0.5 >= 0.5)
findIndex(array, 0.5 >= 1)
findIndex(array, 0.5 not in array)
findIndex(array, 1 != #)
findIndex(array, 1 != i64)
findIndex(array, 1 != nil)
findIndex(array, 1 < #)
findIndex(array, 1 <= #)
findIndex(array, 1 > #)
findIndex(array, 1 > i)
findIndex(array, 1 >= #)
findIndex(array, add != div)
findIndex(array, add != nil)
findIndex(array, f32 != #)
findIndex(array, f32 != 1)
findIndex(array, f32 < #)
findIndex(array, f32 == #)
findIndex(array, f32 >= #)
findIndex(array, f32 >= i32)
findIndex(array, f64 >= #)
findIndex(array, f64 >= i32)
findIndex(array, false) == -f64
findIndex(array, i != f64)
findIndex(array, i < #)
findIndex(array, i < i32)
findIndex(array, i <= #)
findIndex(array, i <= 0.5)
findIndex(array, i == #)
findIndex(array, i >= i)
findIndex(array, i >= i32)
findIndex(array, i32 != #)
findIndex(array, i32 < #)
findIndex(array, i32 == #)
findIndex(array, i32 > f32)
findIndex(array, i64 != #)
findIndex(array, i64 != nil)
findIndex(array, i64 < 0.5)
findIndex(array, i64 <= #)
findIndex(array, i64 <= i64)
findIndex(array, i64 > #)
findIndex(array, i64 >= #)
findIndex(array, i64 >= f64)
findIndex(array, i64 >= i32)
findIndex(array, nil != half)
findIndex(array, nil != ok)
findIndex(array, nil == #)
findIndex(array, nil == 1)
findIndex(array, nil == nil)
findIndex(array, not false)
findIndex(array, ok)
findIndex(array, ok) / f64
findIndex(array, ok) / i
findIndex(array, ok) <= f32
findIndex(array, one(list, false))
findIndex(array, score == greet)
findIndex(array, true) + f64
findIndex(array, true) - f64
findIndex(array, true) .. i
findIndex(filter(array, false), # > 1)
findIndex(filter(array, true), # not in array)
findIndex(filter(list, false), 1 <= i64)
findIndex(groupBy(array, #).f64, .Bar(half(add, half, div, greet, f64)))
findIndex(groupBy(array, #)?.greet, .f64(foo(array, #), # != "bar"))
findIndex(groupBy(array, false).String, #?.i64())
findIndex(groupBy(array, foo).String, #)
findIndex(groupBy(list, #).Qux, #)
findIndex(groupBy(list, #)?.Qux, #)
findIndex(groupBy(list, #)?.i64, #)
findIndex(groupBy(list, true)?.list, get(false ? # : #, score(#, Bar, half, #)))
findIndex(i32 .. 1, # >= #)
findIndex(list, !false)
findIndex(list, !ok)
findIndex(list, !true)
findIndex(list, "bar" > "foo")
findIndex(list, "bar" in #)
findIndex(list, "bar" not in #)
findIndex(list, # != #)
findIndex(list, # != nil)
findIndex(list, # == #)
findIndex(list, # == foo)
findIndex(list, # in list)
findIndex(list, #?.Bar not in #)
findIndex(list, 0.5 != i)
findIndex(list, 0.5 > 1)
findIndex(list, 0.5 >= i)
findIndex(list, 1 != i32)
findIndex(list, 1 < f64)
findIndex(list, 1 < i32)
findIndex(list, 1 == f32)
findIndex(list, 1 > 0.5)
findIndex(list, 1 > i32)
findIndex(list, 1 >= 1)
findIndex(list, 1 >= i)
findIndex(list, f32 != f32)
findIndex(list, f32 != i)
findIndex(list, f32 < i32)
findIndex(list, f32 == bitshl(i, i64))
findIndex(list, f32 > 1)
findIndex(list, f64 != 0.5)
findIndex(list, f64 < 1)
findIndex(list, f64 < i)
findIndex(list, f64 > 1)
findIndex(list, f64 >= f64)
findIndex(list, false != nil)
findIndex(list, false || ok)
findIndex(list, foo != #)
findIndex(list, greet == nil)
findIndex(list, i < 0.5)
findIndex(list, i <= i32)
findIndex(list, i32 == 1)
findIndex(list, i32 >= i64)
findIndex(list, i64 != f32)
findIndex(list, nil != 0.5)
findIndex(list, nil != f32)
findIndex(list, nil != i64)
findIndex(list, nil == "foo")
findIndex(list, nil == f64)
findIndex(list, not ok)
findIndex(list, not true)
findIndex(list, ok)
findIndex(list, ok) * i
findIndex(list, ok) ** i
findIndex(list, ok) >= f64
findIndex(list, ok) ^ i32
findIndex(list, true ? ok : #)
findIndex(list, true) % i64
findIndex(map(array, #), # < #)
findIndex(map(array, #), # >= #)
findIndex(map(array, #), i > #)
findIndex(map(array, f32), i32 == #)
findIndex(map(array, i), # != #)
findIndex(map(array, i), ok)
findIndex(map(list, #), # != #)
findIndex(map(list, #), # == #)
findIndex(map(list, i64), # == 0.5)
findIndex(map(list, i64), i64 < #)
findIndex(map(list, true), #)
findIndex(map(list, true), ok)
findIndex(ok ? "foo" : greet, !ok)
findIndex(ok ? "foo" : i, # == #)
findIndex(sort(array), i32 == #)
findIndex(true ? "foo" : ok, # == greet)
findLast(1 .. i, # <= #)
findLast(1 .. i32, 1 >= #)
findLast(1 .. i64, ok)
findLast([1, f64], half == add)
findLast([false], #)
findLast(array, !false)
findLast(array, !ok)
findLast(array, "foo" > "bar")
findLast(array, # != #)
findLast(array, # != 0.5)
findLast(array, # != 1)
findLast(array, # != f32)
findLast(array, # != f64)
findLast(array, # != i)
findLast(array, # < #)
findLast(array, # < 0.5)
findLast(array, # < f32)
findLast(array, # < f64)
findLast(array, # < i + #)
findLast(array, # <= #)
findLast(array, # <= 0.5)
findLast(array, # <= 1)
findLast(array, # <= f32)
findLast(array, # <= i64)
findLast(array, # == #)
findLast(array, # == 0.5)
findLast(array, # == nil)
findLast(array, # > #)
findLast(array, # > 0.5)
findLast(array, # > 1)
findLast(array, # > i)
findLast(array, # > i32)
findLast(array, # > i64)
findLast(array, # >= #)
findLast(array, # >= 0.5)
findLast(array, # >= 1)
findLast(array, # >= f32)
findLast(array, # >= i32)
findLast(array, 0.5 <= #)
findLast(array, 0.5 <= i64)
findLast(array, 0.5 > #)
findLast(array, 0.5 >= #)
findLast(array, 0.5 >= 1)
findLast(array, 1 != #)
findLast(array, 1 <= #)
findLast(array, 1 == #)
findLast(array, f32 >= #)
findLast(array, f64 != #)
findLast(array, f64 != nil)
findLast(array, f64 <= #)
findLast(array, f64 <= 1)
findLast(array, f64 == #)
findLast(array, f64 == nil)
findLast(array, f64 >= 1)
findLast(array, f64 >= i64)
findLast(array, false != true)
findLast(array, false or true)
findLast(array, greet != nil)
findLast(array, i < #)
findLast(array, i == i32)
findLast(array, i > #)
findLast(array, i >= 0.5)
findLast(array, i32 < #)
findLast(array, i32 == 0.5)
findLast(array, i32 > #)
findLast(array, i32 >= #)
findLast(array, i32 >= i32)
findLast(array, i64 != #)
findLast(array, i64 < #)
findLast(array, i64 <= #)
findLast(array, i64 == #)
findLast(array, i64 > 0.5)
findLast(array, list != nil)
findLast(array, nil != array)
findLast(array, not (array == array))
findLast(array, not false)
findLast(array, not ok)
findLast(array, ok and true)
findLast(array, ok)
findLast(array, ok) == i64
findLast(array, reduce(list, ok))
findLast(array, score != div)
findLast(array, score != nil)
findLast(array, true) % i64
findLast(groupBy(array, #).i32, #)
findLast(groupBy(array, f64)?.score, #)
findLast(groupBy(list, "bar").div, #?.f32?.half())
findLast(groupBy(list, #)[ok], .ok)
findLast(groupBy(list, 0.5)?.String, #?.half(Bar))
findLast(groupBy(list, 0.5)?.f32, ok)
findLast(groupBy(list, f64).foo, .f32(#, #)?.Qux(#?.i64(add, nil)))
findLast(groupBy(list, f64)?.Bar, #)
findLast(i .. 1, # < #)
findLast(i .. i32, # != i64)
findLast(i .. i32, ok)
findLast(i32 .. i64, # >= i)
findLast(i64 .. 1, # < #)
findLast(list, !false)
findLast(list, !ok)
findLast(list, "foo" in #)
findLast(list, # != #)
findLast(list, # != nil)
findLast(list, # == #)
findLast(list, # == foo)
findLast(list, # in list)
findLast(list, # not in list)
findLast(list, 0.5 != i64)
findLast(list, 0.5 <= 1)
findLast(list, 0.5 == i64)
findLast(list, 1 != f32)
findLast(list, 1 != nil)
findLast(list, 1 <= 1)
findLast(list, 1 > f32)
findLast(list, 1 >= f64)
findLast(list, f32 != i)
findLast(list, f32 > f32)
findLast(list, f32 >= 1)
findLast(list, f64 <= i)
findLast(list, f64 in array)
findLast(list, false)?.Bar
findLast(list, foo != #)
findLast(list, foo in list)
findLast(list, i != i)
findLast(list, i <= 1)
findLast(list, i <= i)
findLast(list, i == i32)
findLast(list, i >= i)
findLast(list, i32 != f32)
findLast(list, i64 > f32)
findLast(list, i64 > i)
findLast(list, i64 >= 1)
findLast(list, nil != #)
findLast(list, nil not in array)
findLast(list, nil not in list)
findLast(list, none(array, ok))
findLast(list, not false)
findLast(list, not true)
findLast(list, ok or true)
findLast(list, ok)
findLast(list, ok) not in list
findLast(list, ok).Bar
findLast(list, ok).Qux
findLast(list, ok).String
findLast(list, ok)?.Bar
findLast(list, ok)?.Qux
findLast(list, ok)?.String
findLast(list, true or ok)
findLast(list, true).Bar
findLast(list, true).Qux
findLast(list, true).String
findLast(list, true)?.Bar
findLast(list, true)?.Qux
findLast(list, true)?.String
findLast(map(array, #), # < #)
findLast(map(array, #), # < i32)
findLast(map(array, #), # <= 1)
findLast(map(array, #), # == f64)
findLast(map(array, #), 0.5 != 0.5)
findLast(map(array, #), i32 == #)
findLast(map(array, #), ok)
findLast(map(array, f64 * #), # + # > f32)
findLast(map(array, score), ok)
findLast(map(list, #), # == #)
findLast(map(list, #), greet == nil)
findLast(map(list, #), ok)
findLast(map(list, ok), # ? # : #)
findLastIndex(1 .. 1, i64 < #)
findLastIndex([false], 0.5 == #)
findLastIndex([i64, half], ok)
findLastIndex(array, "bar" not matches "foo")
findLastIndex(array, "bar" startsWith "foo")
findLastIndex(array, "foo" == nil)
findLastIndex(array, "foo" >= "foo")
findLastIndex(array, "foo" contains "foo")
findLastIndex(array, # != #)
findLastIndex(array, # != 1)
findLastIndex(array, # != f32)
findLastIndex(array, # != f64)
findLastIndex(array, # != i32)
findLastIndex(array, # != i64)
findLastIndex(array, # != nil)
findLastIndex(array, # < #)
findLastIndex(array, # < 1)
findLastIndex(array, # < f64)
findLastIndex(array, # < i)
findLastIndex(array, # < i64)
findLastIndex(array, # <= #)
findLastIndex(array, # <= 0.5)
findLastIndex(array, # <= i64)
findLastIndex(array, # == #)
findLastIndex(array, # == 0.5)
findLastIndex(array, # == 1)
findLastIndex(array, # == f64)
findLastIndex(array, # == i64)
findLastIndex(array, # == nil)
findLastIndex(array, # > #)
findLastIndex(array, # > 0.5)
findLastIndex(array, # > f32)
findLastIndex(array, # > f64)
findLastIndex(array, # > i)
findLastIndex(array, # >= #)
findLastIndex(array, # >= 0.5)
findLastIndex(array, # >= 1)
findLastIndex(array, # >= f32)
findLastIndex(array, # >= i32)
findLastIndex(array, # ^ # >= #)
findLastIndex(array, # not in array)
findLastIndex(array, 0.5 != #)
findLastIndex(array, 0.5 != i64)
findLastIndex(array, 0.5 < #)
findLastIndex(array, 0.5 < i32)
findLastIndex(array, 0.5 <= #)
findLastIndex(array, 0.5 > #)
findLastIndex(array, 0.5 >= 0.5)
findLastIndex(array, 0.5 >= f64)
findLastIndex(array, 1 != #)
findLastIndex(array, 1 <= #)
findLastIndex(array, 1 == #)
findLastIndex(array, 1 == f64)
findLastIndex(array, 1 >= i32)
findLastIndex(array, array == nil)
findLastIndex(array, f32 != #)
findLastIndex(array, f32 != f32)
findLastIndex(array, f32 < #)
findLastIndex(array, f32 == #)
findLastIndex(array, f32 == nil)
findLastIndex(array, f32 > #)
findLastIndex(array, f64 != #)
findLastIndex(array, f64 < #)
findLastIndex(array, f64 <= #)
findLastIndex(array, f64 <= i32)
findLastIndex(array, f64 == #)
findLastIndex(array, f64 == 0.5)
findLastIndex(array, f64 > #)
findLastIndex(array, false ? # : false)
findLastIndex(array, foo != foo)
findLastIndex(array, greet == greet)
findLastIndex(array, half == greet)
findLastIndex(array, i - # >= #)
findLastIndex(array, i < #)
findLastIndex(array, i <= #)
findLastIndex(array, i > 0.5)
findLastIndex(array, i32 <= #)
findLastIndex(array, i32 <= 1)
findLastIndex(array, i32 <= f32)
findLastIndex(array, i32 > 0.5)
findLastIndex(array, i32 >= #)
findLastIndex(array, i64 <= # + #)
findLastIndex(array, i64 > #)
findLastIndex(array, min(1, #) <= i32 + #)
findLastIndex(array, nil != #)
findLastIndex(array, nil != add)
findLastIndex(array, nil != i32)
findLastIndex(array, nil == #)
findLastIndex(array, not (i32 != 0.5))
findLastIndex(array, not ok)
findLastIndex(array, ok && true)
findLastIndex(array, ok)
findLastIndex(array, ok) % i64
findLastIndex(array, ok) + f64
findLastIndex(array, one(list, ok))
findLastIndex(array, score == nil)
findLastIndex(array, true == false)
findLastIndex(array, true) / f32
findLastIndex(array, true) not in array
findLastIndex(filter(array, false), ok)
findLastIndex(groupBy(array, "foo")?.add, #[list])
findLastIndex(groupBy(array, #)?.foo, #)
findLastIndex(groupBy(array, #)?.i32, not #)
findLastIndex(groupBy(array, #)?.score, #)
findLastIndex(groupBy(list, #).ok, #)
findLastIndex(groupBy(list, #)?.String, # + #.add)
findLastIndex(groupBy(list, 0.5).Bar, #?.String endsWith .f32(list))
findLastIndex(i32 .. i32, ok)
findLastIndex(i64 .. 1, ok)
findLastIndex(list, !(nil != #))
findLastIndex(list, !false)
findLastIndex(list, !ok)
findLastIndex(list, !true)
findLastIndex(list, "bar" in #)
findLastIndex(list, "bar" matches "foo")
findLastIndex(list, "bar" not endsWith "foo")
findLastIndex(list, "bar" not matches "bar")
findLastIndex(list, "foo" <= "bar")
findLastIndex(list, "foo" not in #)
findLastIndex(list, # != #)
findLastIndex(list, # != foo)
findLastIndex(list, # == #)
findLastIndex(list, # == foo)
findLastIndex(list, # == nil)
findLastIndex(list, # in list)
findLastIndex(list, # not in list)
findLastIndex(list, 1 != f32)
findLastIndex(list, 1 != nil)
findLastIndex(list, 1 > 1)
findLastIndex(list, 1 >= 0.5)
findLastIndex(list, array != nil)
findLastIndex(list, div != nil)
findLastIndex(list, f32 != 1)
findLastIndex(list, f32 != f64)
findLastIndex(list, f64 > 0.5)
findLastIndex(list, foo == #)
findLastIndex(list, half != div)
findLastIndex(list, half == greet)
findLastIndex(list, half == score)
findLastIndex(list, i <= 1)
findLastIndex(list, i32 > 1)
findLastIndex(list, i32 > f32)
findLastIndex(list, i64 == i64)
findLastIndex(list, i64 >= 0.5)
findLastIndex(list, i64 not in array)
findLastIndex(list, nil != "bar")
findLastIndex(list, nil != #)
findLastIndex(list, nil != f64)
findLastIndex(list, nil == #)
findLastIndex(list, nil == 1)
findLastIndex(list, nil == half)
findLastIndex(list, not false)
findLastIndex(list, not true)
findLastIndex(list, ok ? ok : 0.5)
findLastIndex(list, ok and false)
findLastIndex(list, ok)
findLastIndex(list, ok) != i64
findLastIndex(list, ok) > f32
findLastIndex(list, ok) > i64
findLastIndex(list, one(array, true))
findLastIndex(list, true && ok)
findLastIndex(list, true) * i32
findLastIndex(list, true) - i32
findLastIndex(list, true) < i64
findLastIndex(list, true) > i64
findLastIndex(list, true) ^ f64
findLastIndex(map(array, "bar"), # not endsWith #)
findLastIndex(map(array, #), # < f64)
findLastIndex(map(array, #), # <= #)
findLastIndex(map(array, #), ok)
findLastIndex(map(array, div), 0.5 <= 0.5)
findLastIndex(map(array, f32), nil == nil)
findLastIndex(map(array, list), ok)
findLastIndex(map(array, ok), # and #)
findLastIndex(map(list, "bar"), # >= #)
findLastIndex(map(list, #), !true)
findLastIndex(map(list, #), nil == 0.5)
findLastIndex(map(list, false), #)
findLastIndex(map(list, foo), ok)
findLastIndex(map(list, i32), # >= #)
findLastIndex(map(list, i64), ok)
findLastIndex(ok ? "bar" : add, not false)
findLastIndex(true ? "foo" : 1, # and false)
first(1 .. 1)
first(1 .. i64)
first([f32])
first([foo])
first([ok])
first(array)
first(array) * i
first(array) * i64
first(array) + f32
first(array) <= i
first(array) == f32
first(array) == f64
first(array) == i64
first(array) > 0.5 ** i
first(array) > i64
first(array) ^ f64
first(array[1:1])
first(false ? foo : 1)
first(false ? greet : foo)
first(get(groupBy(array, #), i))
first(groupBy(array, #).greet)
first(groupBy(list, #)?.div)
first(i .. i)
first(i64 .. i32)
first(i64 .. i64)
first(list)
first(list) not in list
first(list).Bar
first(list).Qux
first(list).String
first(list).String()
first(list)?.Bar
first(list)?.Qux
first(list)?.String
first(list)?.String()
first(map(array, #))
first(map(array, 0.5))
first(map(array, 1))
first(map(array, add))
first(map(array, array))
first(map(array, div))
first(map(array, half))
first(map(array, i))
first(map(array, i32))
first(map(array, i64))
first(map(array, ok))
first(map(list, #))
first(map(list, 0.5))
first(map(list, f32))
first(map(list, greet))
first(map(list, i))
first(map(list, list))
first(map(list, score))
first(ok ? 0.5 : false)
first(ok ? array : add)
first(ok ? greet : i64)
first(ok ? list : ok)
first(reduce(list, array))
first(sort(array))
first(true ? f32 : div)
first(true ? greet : div)
first(true ? score : div)
float(-0.5)
float(-1)
float(-f32)
float(-f64)
float(-i)
float(-i32)
float(-i64)
float(0.5 * 0.5)
float(0.5 * 1)
float(0.5 * f32)
float(0.5 * i64)
float(0.5 ** 0.5)
float(0.5 ** f32)
float(0.5 + 1)
float(0.5 + i32)
float(0.5 + i64)
float(0.5 - 0.5)
float(0.5 - 1)
float(0.5 - i64)
float(0.5 / 0.5)
float(0.5 / i32)
float(0.5 / i64)
float(0.5 ^ 1)
float(0.5 ^ i)
float(0.5) != f32
float(0.5) != i32
float(0.5) * f32
float(0.5) * i32
float(0.5) * i64
float(0.5) ** f64
float(0.5) ** i
float(0.5) ** i32
float(0.5) - i
float(0.5) - i64
float(0.5) / f32
float(0.5) / f64
float(0.5) / i32
float(0.5) == i32 * 0.5
float(0.5) ^ i64
float(0.5) in array
float(1 % i64)
float(1 * 0.5)
float(1 * f32)
float(1 * i)
float(1 * i64)
float(1 ** 0.5)
float(1 ** 1)
float(1 ** f64)
float(1 ** i)
float(1 + f64)
float(1 + i32)
float(1 - 0.5)
float(1 / 0.5)
float(1 ^ f64)
float(1) * f32
float(1) * i64
float(1) ** i
float(1) ** i64
float(1) - f64
float(1) <= i64
float(1) == i64
float(1) > -0.5
float(1) > i64
float(1) >= f64
float(1) >= i
float(abs(f32))
float(abs(f64))
float(abs(i))
float(abs(i32))
float(add(1, 1))
float(array[i32])
float(array[i64])
float(array[i])
float(bitnot(1))
float(bitnot(i))
float(bitnot(i32))
float(bitnot(i64))
float(ceil(0.5))
float(ceil(f32))
float(ceil(f64))
float(ceil(i32))
float(ceil(i64))
float(count(array, false))
float(count(array, ok))
float(count(list, i32 == 0.5))
float(f32 * f64)
float(f32 * i)
float(f32 * i32)
float(f32 ** 1)
float(f32 ** f32)
float(f32 ** i)
float(f32 ** i64)
float(f32 + 0.5)
float(f32 + 1)
float(f32 + f64)
float(f32 + i32)
float(f32 + i64)
float(f32 - 0.5)
float(f32 - f64)
float(f32 - i64)
float(f32 / 0.5)
float(f32 / 1)
float(f32 / i)
float(f32 ^ 0.5)
float(f32 ^ 1)
float(f32 ^ f32)
float(f32 ^ i)
float(f32 ^ i32)
float(f32)
float(f32) < i32
float(f32) <= f32
float(f32) <= f64 / f32
float(f32) <= i
float(f32) > i
float(f32) >= i64
float(f32) ^ f64
float(f32) ^ i64
float(f64 * 0.5)
float(f64 * 1)
float(f64 * f32)
float(f64 * f64)
float(f64 * i32)
float(f64 ** f32)
float(f64 + 1)
float(f64 + i)
float(f64 + i32)
float(f64 - 1)
float(f64 - i)
float(f64 / 0.5)
float(f64 / 1)
float(f64 / i64)
float(f64 ^ f32)
float(f64)
float(f64) * f32
float(f64) * i
float(f64) / -i32
float(f64) / i
float(f64) == f64
float(f64) > f64
float(f64) > i64
float(f64) >= f32
float(f64) >= i
float(f64) >= i64
float(f64) ^ i64
float(false ? f64 : 0.5)
float(false ? half : f64)
float(false ? list : f64)
float(find(array, ok))
float(findIndex(array, ok))
float(findLastIndex(array, ok))
float(findLastIndex(list, true))
float(first(array))
float(float(0.5))
float(float(1))
float(float(f32))
float(float(f64))
float(float(i))
float(float(i32))
float(floor(0.5))
float(floor(1))
float(floor(f32))
float(floor(f64))
float(floor(i32))
float(floor(i64))
float(get(array, 1))
float(get(array, i))
float(half(0.5))
float(half(1))
float(half(f64))
float(i % i32)
float(i * 0.5)
float(i * f64)
float(i * i64)
float(i ** f32)
float(i ** i32)
float(i + 0.5)
float(i + 1)
float(i + i64)
float(i - 1)
float(i - f64)
float(i / 0.5)
float(i / 1)
float(i ^ 0.5)
float(i ^ i32)
float(i)
float(i) != 1 ? nil : foo
float(i) != f64
float(i) + f32
float(i) + f64
float(i) < i
float(i) == f32
float(i) == i
float(i) > f64
float(i32 % i)
float(i32 % i64)
float(i32 * f64)
float(i32 * i32)
float(i32 ** 1)
float(i32 + f64)
float(i32 + i64)
float(i32 / 1)
float(i32 / f32)
float(i32 / i32)
float(i32 ^ f64)
float(i32 ^ i32)
float(i32)
float(i32) != f64
float(i32) ** f32
float(i32) ** i
float(i32) > i32
float(i32) >= i
float(i64 % i64)
float(i64 * i64)
float(i64 ** 1)
float(i64 + f32)
float(i64 + i)
float(i64 - 0.5)
float(i64 - 1)
float(i64 - f32)
float(i64 / 1)
float(i64 ^ f32)
float(i64)
float(i64) != i
float(i64) ** max(f64)
float(i64) + i32
float(i64) - 0.5 ^ f32
float(i64) - f64
float(i64) / i32
float(i64) < i32
float(i64) == i
float(i64) == i64
float(i64) > i
float(i64) ^ f32
float(int(0.5))
float(int(1))
float(int(f32))
float(int(i))
float(int(i32))
float(last(array))
float(len("bar"))
float(len(array))
float(len(list))
float(max(0.5))
float(max(0.5, i64))
float(max(1))
float(max(1, 1))
float(max(f32))
float(max(f64))
float(max(i))
float(max(i32))
float(max(i64))
float(mean(array))
float(min(1))
float(min(f64))
float(min(f64, i64))
float(min(i32))
float(min(i64))
float(ok ? 0.5 : foo)
float(ok ? 0.5 : list)
float(reduce(array, #))
float(reduce(array, 0.5))
float(reduce(array, f64))
float(reduce(array, i32))
float(reduce(list, i64))
float(round(0.5))
float(round(1))
float(round(i32))
float(round(i64))
float(score(1))
float(score(1, 1))
float(score(i))
float(string(0.5))
float(string(1))
float(string(f64 - 0.5))
float(string(i))
float(string(i32))
float(string(i64))
float(sum(array))
float(toJSON(0.5))
float(toJSON(1))
float(toJSON(f32))
float(toJSON(f64))
float(toJSON(i32))
float(toJSON(i64))
float(true ? f32 : "foo")
floor(-0.5)
floor(-1)
floor(-f32)
floor(-f64)
floor(-i)
floor(-i32)
floor(-i64)
floor(0.5 * 0.5)
floor(0.5 * 1)
floor(0.5 * i32)
floor(0.5 ** 1)
floor(0.5 ** f64)
floor(0.5 ** i)
floor(0.5 + 1)
floor(0.5 + f32)
floor(0.5 + i)
floor(0.5 + i32)
floor(0.5 + i64)
floor(0.5 - 1)
floor(0.5 - f32)
floor(0.5 - i)
floor(0.5 / 0.5)
floor(0.5 / 1)
floor(0.5 / i32)
floor(0.5 ^ 0.5)
floor(0.5 ^ 1)
floor(0.5 ^ f32)
floor(0.5 ^ f64)
floor(0.5 ^ i)
floor(0.5) != i64
floor(0.5) ** f32
floor(0.5) - i
floor(0.5) - i64
floor(0.5) / i
floor(0.5) <= i64
floor(0.5) > i32
floor(0.5) > i64 != ok
floor(0.5) >= f32
floor(0.5) ^ i
floor(1 % 1)
floor(1 % i)
floor(1 * 0.5)
floor(1 * 1)
floor(1 ** 1)
floor(1 ** f64)
floor(1 ** i32)
floor(1 + 0.5)
floor(1 + 1)
floor(1 + f32)
floor(1 + f64)
floor(1 + i32)
floor(1 - 0.5)
floor(1 - 1)
floor(1 - i)
floor(1 - i32)
floor(1 - i64)
floor(1 / 0.5)
floor(1 / 1)
floor(1 / i)
floor(1 / i64)
floor(1 ^ i)
floor(1 ^ i32)
floor(1 ^ i64)
floor(1) * i64
floor(1) - f32
floor(1) - i
floor(1) <= f32
floor(1) >= half(0.5)
floor(abs(0.5))
floor(abs(1))
floor(abs(f32))
floor(abs(f64))
floor(abs(i32))
floor(abs(i64))
floor(array[1])
floor(array[i32])
floor(array[i64])
floor(array[i])
floor(bitnot(1))
floor(bitnot(i))
floor(bitnot(i32))
floor(bitnot(i64))
floor(ceil(0.5))
floor(ceil(1))
floor(ceil(f64))
floor(ceil(i))
floor(ceil(i32))
floor(ceil(i64))
floor(count(array, false))
floor(count(array, ok))
floor(count(list, ok))
floor(f32 ** 1)
floor(f32 ** f64)
floor(f32 ** i32)
floor(f32 + f32)
floor(f32 + i32)
floor(f32 + i64)
floor(f32 - 0.5)
floor(f32 - f64)
floor(f32 / 0.5)
floor(f32 / f64)
floor(f32 / i)
floor(f32 / i32)
floor(f32 / i64)
floor(f32 ^ 0.5)
floor(f32 ^ f64)
floor(f32 ^ i)
floor(f32)
floor(f32) != -i32
floor(f32) * i32
floor(f32) + f32
floor(f32) / f32
floor(f32) / f64
floor(f32) == i64
floor(f32) > i32
floor(f32) >= f32
floor(f32) >= i
floor(f32) ^ f32
floor(f64 * f32)
floor(f64 ** 0.5)
floor(f64 ** 1)
floor(f64 ** i32)
floor(f64 + 0.5)
floor(f64 + 1)
floor(f64 + i32)
floor(f64 - 0.5)
floor(f64 - i32)
floor(f64 / 0.5)
floor(f64 / 1)
floor(f64 / f32)
floor(f64 / f64)
floor(f64 / i)
floor(f64 ^ 1)
floor(f64)
floor(f64) * i32
floor(f64) ** f64
floor(f64) / f32
floor(f64) < i32
floor(f64) <= f64
floor(f64) <= i64
floor(f64) == f64 ** i
floor(f64) == i
floor(f64) > i32
floor(f64) >= 1 * 1
floor(f64) >= f32
floor(false ? div : 0.5)
floor(find(array, true))
floor(findIndex(array, ok))
floor(findLastIndex(array, ok))
floor(float(0.5))
floor(float(1))
floor(float(f64))
floor(float(i32))
floor(floor(0.5))
floor(floor(1))
floor(floor(f32))
floor(floor(f64))
floor(floor(i))
floor(floor(i32))
floor(floor(i64))
floor(get(array, 1))
floor(get(array, i))
floor(get(array, i64))
floor(half(0.5))
floor(half(1))
floor(half(f64))
floor(i % 1)
floor(i % i)
floor(i % i32)
floor(i % i64)
floor(i * 1)
floor(i * f64)
floor(i ** 0.5)
floor(i ** f32)
floor(i ** i32)
floor(i ** i64)
floor(i + 0.5)
floor(i + f64)
floor(i - 0.5)
floor(i - f32)
floor(i - i32)
floor(i / 0.5)
floor(i / 1)
floor(i / f64)
floor(i ^ i32)
floor(i)
floor(i) != i
floor(i) * f64
floor(i) ^ i
floor(i32 % i32)
floor(i32 * 1)
floor(i32 * f32)
floor(i32 * f64)
floor(i32 * i32)
floor(i32 ** i)
floor(i32 ** i64)
floor(i32 + 0.5)
floor(i32 + f64)
floor(i32 - 1)
floor(i32 - f32)
floor(i32 - i)
floor(i32 - i32)
floor(i32 - i64)
floor(i32 ^ 0.5)
floor(i32 ^ 1)
floor(i32 ^ f64)
floor(i32 ^ i)
floor(i32 ^ i32)
floor(i32 ^ i64)
floor(i32)
floor(i32) != f32
floor(i32) * f64
floor(i32) * i
floor(i32) * i64
floor(i32) > i32
floor(i32) > i64
floor(i32) >= i32
floor(i32) ^ i32
floor(i64 % i)
floor(i64 * 0.5)
floor(i64 * f32)
floor(i64 * i)
floor(i64 ** 0.5)
floor(i64 ** 1)
floor(i64 ** i)
floor(i64 ** i32)
floor(i64 + 0.5)
floor(i64 + f64)
floor(i64 + i64)
floor(i64 - f64)
floor(i64 - i)
floor(i64 / f32)
floor(i64 ^ 0.5)
floor(i64 ^ f32)
floor(i64 ^ i64)
floor(i64)
floor(i64) * i64
floor(i64) / (i64 - i)
floor(i64) / f64
floor(i64) / i32
floor(i64) < f32
floor(i64) <= i64
floor(i64) ^ f32
floor(int(0.5))
floor(int(1))
floor(int(i32))
floor(int(i64))
floor(len("foo"))
floor(len(array))
floor(len(list))
floor(max(0.5))
floor(max(1))
floor(max(f32))
floor(max(f64))
floor(max(i32))
floor(min(0.5))
floor(min(f64) ^ i64)
floor(min(i, i64))
floor(min(i32))
floor(ok ? 1 : 1)
floor(ok ? f32 : "foo")
floor(ok ? i64 : f64)
floor(reduce(array, #))
floor(reduce(array, i))
floor(reduce(array, i64))
floor(reduce(list, 1))
floor(reduce(list, f32))
floor(reduce(list, i64))
floor(round(0.5))
floor(round(f32))
floor(round(f64))
floor(round(i))
floor(round(i32))
floor(score(1))
floor(score(1, 1))
floor(score(i))
floor(true ? 0.5 : false)
floor(true ? 1 : true)
floor(true ? f64 : 0.5)
floor(true ? f64 : array)
foo
foo != foo
foo != nil != nil
foo != reduce(list, #)
foo == foo
foo == foo and 0.5 != f64
foo == get(list, 1)
foo == list[i]
foo == nil ? i : i32
foo == nil ? i64 : i
foo == reduce(list, #)
foo in filter(list, false)
foo in groupBy(array, #)
foo in groupBy(list, #)
foo in list
foo in list != ok
foo not in groupBy(array, #)
foo not in groupBy(array, f64).foo
foo not in groupBy(list, #).i
foo not in groupBy(list, f32)
foo not in groupBy(list, ok)
foo not in list
foo not in list and ok
foo not in list or false
foo not in map(list, #)
foo.Bar
foo.Bar <= foo.Bar
foo.Bar matches foo.Bar
foo.Bar matches trimPrefix("foo")
foo.Qux
foo.Qux != greet
foo.Qux != half
foo.Qux == add
foo.Qux == div
foo.Qux == greet
foo.Qux == half
foo.Qux == score
foo.Qux("foo" + "foo")
foo.Qux(foo.Bar)
foo.Qux(foo.String())
foo.Qux(greet("foo"))
foo.Qux(string("foo"))
foo.Qux(toJSON(i))
foo.Qux(type("bar"))
foo.Qux(type(f64))
foo.Qux(type(half))
foo.String
foo.String != div
foo.String != greet
foo.String != half
foo.String == add
foo.String == div
foo.String == half
foo.String()
foo.String() != foo?.String()
foo.String() in foo
foo.String() not in foo
foo?.Bar
foo?.Bar != foo?.Bar
foo?.Bar in foo
foo?.Bar matches toJSON(f64)
foo?.Bar not endsWith foo.Bar
foo?.Bar not endsWith toJSON(foo)
foo?.Qux
foo?.Qux != add
foo?.Qux != greet
foo?.Qux != half
foo?.Qux != score
foo?.Qux == add
foo?.Qux == div
foo?.Qux == greet
foo?.Qux == half
foo?.Qux == score
foo?.Qux(foo?.Bar)
foo?.Qux(string(i32))
foo?.Qux(toJSON(1))
foo?.Qux(toJSON(i32))
foo?.Qux(upper("bar"))
foo?.String
foo?.String != greet
foo?.String != half
foo?.String != score
foo?.String == greet
foo?.String == half
foo?.String == score
foo?.String()
foo?.String() contains string("foo")
fromBase64(string(ok))
fromBase64(toBase64("bar"))
fromBase64(type(1 == 0.5))
fromBase64(type(add))
fromBase64(type(div))
fromBase64(type(false))
fromBase64(type(greet))
fromBase64(type(half))
fromBase64(type(ok))
fromBase64(type(score))
fromBase64(type(true))
fromJSON(string(1))
fromJSON(string(f32))
fromJSON(string(f64))
fromJSON(string(i))
fromJSON(string(i32))
fromJSON(string(i64))
fromJSON(string(ok))
fromJSON(string(true))
fromJSON(toJSON("bar"))
fromJSON(toJSON(0.5))
fromJSON(toJSON(array))
fromJSON(toJSON(f64))
fromJSON(toJSON(false))
fromJSON(toJSON(foo))
fromJSON(toJSON(i))
fromJSON(toJSON(i32))
fromJSON(toJSON(list))
fromJSON(toJSON(nil))
fromJSON(toJSON(true))
fromPairs(filter(array, false))
fromPairs(filter(list, false))
fromPairs(groupBy(array, #)?.String)
get(["foo"], i32)
get(array, -1)
get(array, -i32)
get(array, -i64)
get(array, -score(1))
get(array, 1 * 1)
get(array, 1 * i)
get(array, 1) ** f32
get(array, 1) < f32
get(array, 1) > i32
get(array, 1) > i64
get(array, bitnot(1))
get(array, count(array, ok))
get(array, false ? "foo" : 0.5)
get(array, i)
get(array, i) != f32
get(array, i) != i32
get(array, i) * i32
get(array, i) - i
get(array, i) / i64
get(array, i) > f64
get(array, i) >= f64
get(array, i) >= i64
get(array, i) ^ half(0.5)
get(array, i32 % i32)
get(array, i32)
get(array, i32) / f64
get(array, i32) < i
get(array, i64 - 1)
get(array, i64)
get(array, i64) > f64
get(array, last(array))
get(array, min(i))
get(array, reduce(array, #))
get(array, reduce(list, i64))
get(array, score(1))
get(array, score(abs(1)))
get(array, score(i))
get(array, sum(array))
get(false ? 0.5 : greet, list)
get(false ? add : array, f64)
get(false ? add : score, ok)
get(false ? f64 : 1, ok)
get(false ? f64 : score, add)
get(false ? false : f32, i)
get(false ? i32 : list, i64)
get(false ? i32 : ok, now(div, array))
get(false ? i64 : foo, Bar)
get(false ? i64 : true, f64)
get(false ? score : ok, trimSuffix("bar", "bar"))
get(filter(list, true), i)
get(groupBy(array, "bar"), add)
get(groupBy(array, "bar"), i)
get(groupBy(array, "bar"), ok)
get(groupBy(array, "foo"), half)
get(groupBy(array, #), add)
get(groupBy(array, #), array)
get(groupBy(array, #), f32)
get(groupBy(array, #), f64)
get(groupBy(array, #), foo)
get(groupBy(array, #), greet)
get(groupBy(array, #), half)
get(groupBy(array, #), i)
get(groupBy(array, #), i64 * 0.5)
get(groupBy(array, #), i64)
get(groupBy(array, #)?.String, i64)
get(groupBy(array, 0.5), add)
get(groupBy(array, 0.5), div)
get(groupBy(array, 0.5), ok)
get(groupBy(array, 1), add)
get(groupBy(array, 1), f32)
get(groupBy(array, f64), i64)
get(groupBy(array, false), findIndex(array, ok))
get(groupBy(array, i), ok)
get(groupBy(array, i), score)
get(groupBy(array, i64), add)
get(groupBy(array, ok), add)
get(groupBy(array, true), i32)
get(groupBy(list, "bar"), i32)
get(groupBy(list, "foo"), greet)
get(groupBy(list, #), div)
get(groupBy(list, #), f32 <= f64)
get(groupBy(list, #), f32)
get(groupBy(list, #), foo)
get(groupBy(list, #), greet)
get(groupBy(list, #), half)
get(groupBy(list, #), i)
get(groupBy(list, #), i32)
get(groupBy(list, #), i64)
get(groupBy(list, #), int(f32))
get(groupBy(list, #), list)
get(groupBy(list, #), reduce(array, foo))
get(groupBy(list, #), score(1))
get(groupBy(list, #), score)
get(groupBy(list, 0.5), array)
get(groupBy(list, 0.5), div)
get(groupBy(list, 0.5), ok)
get(groupBy(list, 1), i32)
get(groupBy(list, f32), greet)
get(groupBy(list, foo), add)
get(groupBy(list, foo), i32)
get(groupBy(list, ok), greet)
get(groupBy(list, ok), list)
get(i .. 1, 1 * 1)
get(i .. i32, i)
get(i32 .. i, i64)
get(i64 .. 1, i32)
get(i64 .. i, i32)
get(i64 .. i64, i64)
get(list, -1)
get(list, -i)
get(list, -i64)
get(list, 1 * 1)
get(list, 1 - 1)
get(list, 1 - i)
get(list, 1) != foo
get(list, 1).Bar
get(list, 1).Qux
get(list, 1).String
get(list, 1).String()
get(list, 1)?.Bar
get(list, 1)?.Qux
get(list, 1)?.String
get(list, 1)?.String()
get(list, bitshr(i, i32))
get(list, first(array))
get(list, get(array, 1))
get(list, get(array, i64))
get(list, i % 1)
get(list, i)
get(list, i).Bar
get(list, i).Qux
get(list, i).String
get(list, i)?.Bar
get(list, i)?.Qux
get(list, i)?.String
get(list, i)?.String()
get(list, i32 * i32)
get(list, i32 - i32)
get(list, i32)
get(list, i32).Bar
get(list, i32).Qux
get(list, i32).String
get(list, i32)?.Bar
get(list, i32)?.Qux
get(list, i32)?.String
get(list, i32)?.String()
get(list, i64 * 1)
get(list, i64 * i)
get(list, i64 - 1)
get(list, i64)
get(list, i64).Bar
get(list, i64).Qux
get(list, i64).String
get(list, i64)?.Bar
get(list, i64)?.Qux
get(list, i64)?.String
get(list, i64)?.String()
get(list, int(1))
get(list, max(i32))
get(list, min(i32))
get(list, min(i64))
get(list, ok ? 0.5 : "foo")
get(list, ok ? array : "foo")
get(list, reduce(list, i64))
get(list, score(1))
get(list, score(i))
get(list, true ? i : i32)
get(list, {"foo": i32}?.i)
get(list[i64:1], i)
get(map(array, #), i)
get(map(array, #), i32)
get(map(array, #), i64)
get(map(array, add), i32)
get(map(array, array), i)
get(map(array, greet), i64)
get(map(array, half), i64)
get(map(list, "foo"), i64)
get(map(list, #), i)
get(map(list, #), i64)
get(map(list, 1), i32)
get(map(list, array), i)
get(map(list, i32), i64)
get(map(list, i64), i64)
get(ok ? "bar" : false, array)
get(ok ? 1 : "bar", f32)
get(ok ? 1 : add, String)
get(ok ? add : f32, array)
get(ok ? array : i, Bar)
get(ok ? f32 : list, get(half, nil))
get(ok ? f64 : div, i64)
get(ok ? f64 : list, half in Bar)?.array()
get(ok ? false : list, f32 > i)
get(ok ? foo : 0.5, div)
get(ok ? greet : "bar", get(add, String))
get(ok ? half : i32, i)
get(ok ? half : ok, f64)
get(ok ? i : 0.5, half)
get(ok ? i : half, String)
get(ok ? i32 : half, f64)
get(ok ? i64 : foo, f32)
get(ok ? list : "foo", add)
get(ok ? list : i32, f32)
get(ok ? ok : div, greet)
get(ok ? score : 1, Qux?.i)
get(ok ? score : f64, i)
get(ok ? score : foo, String?.foo())
get(ok ? score : i64, foo)
get(reduce(list, array), i32)
get(sort(array), i32)
get(sum(array), Qux)
get(sum(array), String)
get(sum(array), f32)
get(sum(array), f64 == list)
get(sum(array), greet)
get(sum(array), i)
get(take(list, i), i64)
get(true ? "bar" : ok, score(i))
get(true ? "foo" : half, list)
get(true ? 0.5 : i32, array)
get(true ? 1 : array, Bar)?.f64
get(true ? f32 : 0.5, ok)
get(true ? false : foo, i64 > 0.5)
get(true ? greet : false, Bar)
get(true ? greet : i32, score)
get(true ? half : 0.5, Qux)
get(true ? half : f32, greet)
get(true ? half : list, add)
get(true ? i64 : greet, i32)
get(true ? score : true, half)?.half
get(true ? true : add, Qux)
get(true ? true : i, f64)
get({"bar": true, "foo": greet}.i, String)
get({"foo": foo, "bar": false}, type(i))
greet
greet != add
greet != div
greet != div and ok
greet != foo.Qux
greet != foo.String
greet != foo?.Qux
greet != foo?.String
greet != greet
greet != greet != ok
greet != half
greet != nil ? "bar" : add
greet != nil ? 0.5 : false
greet != nil ? list : false
greet != score
greet != score != false
greet != score or ok
greet != sum(array)
greet == add
greet == add ? i : list
greet == add or ok
greet == div
greet == div || ok
greet == foo.Qux
greet == foo.String
greet == foo?.Qux
greet == foo?.String
greet == greet
greet == greet ? 0.5 : "bar"
greet == greet and ok
greet == half
greet == half ? 1 : ok
greet == nil == ok
greet == nil ? i64 : ok
greet == reduce(list, div)
greet == reduce(list, half)
greet == score
greet == score ? 1 : ok
greet == score ? add : nil
greet in groupBy(array, f64).f32
greet in groupBy(list, #).score
greet not in map(array, score)
greet not in map(list, div)
greet not in sort(array)
greet("bar" + "bar")
greet("foo" + "foo")
greet("foo") startsWith type(f64)
greet(false ? i64 : "bar")
greet(foo.Bar)
greet(foo.Qux("foo"))
greet(foo.String())
greet(foo?.Bar)
greet(foo?.String())
greet(greet("bar"))
greet(greet("foo"))
greet(lower("bar"))
greet(lower("foo"))
greet(ok ? "bar" : 1)
greet(ok ? "bar" : i64)
greet(ok ? "foo" : 0.5)
greet(ok ? "foo" : div)
greet(ok ? "foo" : true)
greet(reduce(array, "bar"))
greet(reduce(array, "foo"))
greet(reduce(list, "foo"))
greet(repeat("bar", 1))
greet(repeat(foo?.String(), i32))
greet(string("bar"))
greet(string("foo"))
greet(string(0.5))
greet(string(1))
greet(string(add))
greet(string(array))
greet(string(div))
greet(string(f32))
greet(string(f64))
greet(string(false))
greet(string(foo))
greet(string(greet))
greet(string(half))
greet(string(i))
greet(string(i32))
greet(string(i64))
greet(string(list))
greet(string(nil))
greet(string(ok))
greet(string(score))
greet(string(true))
greet(toBase64("bar"))
greet(toBase64(trimPrefix("bar")))
greet(toJSON("bar"))
greet(toJSON("foo"))
greet(toJSON(0.5))
greet(toJSON(1))
greet(toJSON(array))
greet(toJSON(f32))
greet(toJSON(f64))
greet(toJSON(false))
greet(toJSON(foo))
greet(toJSON(i))
greet(toJSON(i32))
greet(toJSON(i64))
greet(toJSON(list))
greet(toJSON(nil))
greet(toJSON(ok))
greet(toJSON(true))
greet(trim("bar"))
greet(trim("foo"))
greet(trimPrefix("bar"))
greet(trimPrefix("foo"))
greet(trimSuffix("bar"))
greet(trimSuffix("foo"))
greet(trimSuffix(foo.String()))
greet(trimSuffix(foo?.Bar))
greet(true ? "bar" : i64)
greet(true ? "bar" : ok)
greet(true ? "foo" : foo)
greet(type("bar"))
greet(type("foo"))
greet(type(0.5))
greet(type(1))
greet(type(add))
greet(type(array))
greet(type(div))
greet(type(f32))
greet(type(f64))
greet(type(false))
greet(type(foo))
greet(type(greet))
greet(type(half))
greet(type(i))
greet(type(i32))
greet(type(i64))
greet(type(list))
greet(type(nil))
greet(type(ok))
greet(type(score))
greet(type(true))
greet(upper("bar"))
greet(upper("foo"))
groupBy(1 .. 1, #).f64
groupBy(1 .. i, #)
groupBy(1 .. i, i32)?.score
groupBy(1 .. i32, #)
groupBy(1 .. i32, ok)
groupBy(1 .. i64, i32)
groupBy([0.5, f64], nil == "foo")
groupBy([1], # <= #)
groupBy([f32 ^ i64], #)
groupBy([f32], f64)
groupBy([f64], # >= f32)
groupBy([half], f32)
groupBy([i32], array[#])
groupBy([nil], foo)
groupBy([true], #)
groupBy(array, !false)
groupBy(array, !true)
groupBy(array, "bar" in foo).String
groupBy(array, "bar").Bar
groupBy(array, "bar").Qux
groupBy(array, "bar").String
groupBy(array, "bar").add
groupBy(array, "bar").array
groupBy(array, "bar").div
groupBy(array, "bar").f32
groupBy(array, "bar").f64
groupBy(array, "bar").foo
groupBy(array, "bar").greet
groupBy(array, "bar").half
groupBy(array, "bar").i
groupBy(array, "bar").i32
groupBy(array, "bar").i64
groupBy(array, "bar").list
groupBy(array, "bar").ok
groupBy(array, "bar").score
groupBy(array, "bar")?.Bar
groupBy(array, "bar")?.Qux
groupBy(array, "bar")?.String
groupBy(array, "bar")?.add
groupBy(array, "bar")?.array
groupBy(array, "bar")?.div
groupBy(array, "bar")?.f32
groupBy(array, "bar")?.f64
groupBy(array, "bar")?.foo
groupBy(array, "bar")?.greet
groupBy(array, "bar")?.half
groupBy(array, "bar")?.i
groupBy(array, "bar")?.i64
groupBy(array, "bar")?.list
groupBy(array, "bar")?.ok
groupBy(array, "bar")?.score
groupBy(array, "bar")[f32 > f32]
groupBy(array, "foo").Bar
groupBy(array, "foo").Qux
groupBy(array, "foo").String
groupBy(array, "foo").add
groupBy(array, "foo").array
groupBy(array, "foo").div
groupBy(array, "foo").f32
groupBy(array, "foo").f64
groupBy(array, "foo").foo
groupBy(array, "foo").greet
groupBy(array, "foo").half
groupBy(array, "foo").i
groupBy(array, "foo").i32
groupBy(array, "foo").i64
groupBy(array, "foo").list
groupBy(array, "foo").ok
groupBy(array, "foo").score
groupBy(array, "foo")?.Bar
groupBy(array, "foo")?.String
groupBy(array, "foo")?.add
groupBy(array, "foo")?.array
groupBy(array, "foo")?.div
groupBy(array, "foo")?.f32
groupBy(array, "foo")?.f64
groupBy(array, "foo")?.foo
groupBy(array, "foo")?.greet
groupBy(array, "foo")?.half
groupBy(array, "foo")?.i
groupBy(array, "foo")?.i32
groupBy(array, "foo")?.i64
groupBy(array, "foo")?.list
groupBy(array, "foo")?.ok
groupBy(array, "foo")?.score
groupBy(array, # != #)
groupBy(array, # != #).Qux
groupBy(array, # != #)?.array
groupBy(array, # != 0.5)
groupBy(array, # != 1)
groupBy(array, # != f32)
groupBy(array, # != f64)
groupBy(array, # != f64)?.String
groupBy(array, # != i64)
groupBy(array, # != nil)
groupBy(array, # % #)
groupBy(array, # % 1)
groupBy(array, # % i32)
groupBy(array, # * #)
groupBy(array, # * #)?.Qux
groupBy(array, # * 0.5)
groupBy(array, # * 1)
groupBy(array, # * i)
groupBy(array, # * i32)
groupBy(array, # * i64)
groupBy(array, # ** #)
groupBy(array, # ** #).add
groupBy(array, # ** 0.5)
groupBy(array, # ** 0.5)?.foo
groupBy(array, # ** 0.5)?.greet
groupBy(array, # ** 1)
groupBy(array, # ** f64)
groupBy(array, # ** i)
groupBy(array, # ** i32)
groupBy(array, # ** i64)
groupBy(array, # + #)
groupBy(array, # + 1)
groupBy(array, # + f32)
groupBy(array, # + i)
groupBy(array, # - #)
groupBy(array, # - 0.5)
groupBy(array, # - 1)
groupBy(array, # - f32)
groupBy(array, # - f64)
groupBy(array, # - i)
groupBy(array, # - i32)
groupBy(array, # / #)
groupBy(array, # / 0.5)
groupBy(array, # / 0.5)?.foo
groupBy(array, # / 1)
groupBy(array, # / i)
groupBy(array, # / i32)
groupBy(array, # / i64)
groupBy(array, # < # || 0.5 > f64)
groupBy(array, # < #)
groupBy(array, # < 0.5)
groupBy(array, # < 1)
groupBy(array, # < i32)
groupBy(array, # < i64)
groupBy(array, # <= #)
groupBy(array, # <= #)?.Bar
groupBy(array, # <= #)?.Qux
groupBy(array, # <= 0.5)
groupBy(array, # <= 1)
groupBy(array, # <= f32)
groupBy(array, # <= f64)
groupBy(array, # <= i)
groupBy(array, # <= i64)
groupBy(array, # == #)
groupBy(array, # == #).String
groupBy(array, # == #)?.half
groupBy(array, # == 0.5)
groupBy(array, # == 1)
groupBy(array, # == f32)
groupBy(array, # == f32).half
groupBy(array, # == f64)
groupBy(array, # == i)
groupBy(array, # == i64)
groupBy(array, # == nil)
groupBy(array, # > #)
groupBy(array, # > 0.5)
groupBy(array, # > 1)
groupBy(array, # > 1).Bar
groupBy(array, # > i)?.i64
groupBy(array, # > i64)
groupBy(array, # >= #)
groupBy(array, # >= f64)
groupBy(array, # >= i)
groupBy(array, # >= i32)
groupBy(array, # >= i64)
groupBy(array, # ^ #)
groupBy(array, # ^ 0.5)
groupBy(array, # ^ f32)
groupBy(array, # ^ i)
groupBy(array, # ^ i32)
groupBy(array, # in array)
groupBy(array, #)
groupBy(array, #).Bar
groupBy(array, #).Qux
groupBy(array, #).String
groupBy(array, #).add
groupBy(array, #).array
groupBy(array, #).div
groupBy(array, #).f32
groupBy(array, #).f64
groupBy(array, #).foo
groupBy(array, #).greet
groupBy(array, #).half
groupBy(array, #).i
groupBy(array, #).i32
groupBy(array, #).i64
groupBy(array, #).list
groupBy(array, #).ok
groupBy(array, #).score
groupBy(array, #)?.Bar
groupBy(array, #)?.Qux
groupBy(array, #)?.String
groupBy(array, #)?.add
groupBy(array, #)?.array
groupBy(array, #)?.div
groupBy(array, #)?.f32
groupBy(array, #)?.f64
groupBy(array, #)?.foo
groupBy(array, #)?.greet
groupBy(array, #)?.half
groupBy(array, #)?.i
groupBy(array, #)?.i32
groupBy(array, #)?.i64
groupBy(array, #)?.list
groupBy(array, #)?.ok
groupBy(array, #)?.score
groupBy(array, #)[1 / i]
groupBy(array, #)[f32]
groupBy(array, #)[f64]
groupBy(array, #)[foo]
groupBy(array, #)[i32]
groupBy(array, #)[i64]
groupBy(array, #)[i]
groupBy(array, #)[ok]
groupBy(array, #)[reduce(list, #)]
groupBy(array, -# * # * 0.5)
groupBy(array, -#)
groupBy(array, -#).Qux
groupBy(array, -0.5)
groupBy(array, -1)
groupBy(array, -f32)
groupBy(array, -i)?.score
groupBy(array, -i32)
groupBy(array, -i64)
groupBy(array, 0.5 != #)
groupBy(array, 0.5 * #)
groupBy(array, 0.5 * 0.5)
groupBy(array, 0.5 * f64)
groupBy(array, 0.5 ** #)
groupBy(array, 0.5 ** 1)
groupBy(array, 0.5 ** i64)
groupBy(array, 0.5 + #)?.score
groupBy(array, 0.5 + f32)
groupBy(array, 0.5 - 1)
groupBy(array, 0.5 / #).array
groupBy(array, 0.5 / f64)
groupBy(array, 0.5 / i64)
groupBy(array, 0.5 < 0.5)
groupBy(array, 0.5 <= f32)
groupBy(array, 0.5 == #)
groupBy(array, 0.5 >= #)
groupBy(array, 0.5 >= i32)
groupBy(array, 0.5 >= i64)
groupBy(array, 0.5 ^ f32)
groupBy(array, 0.5 ^ i64)
groupBy(array, 0.5).Bar
groupBy(array, 0.5).Qux
groupBy(array, 0.5).String
groupBy(array, 0.5).add
groupBy(array, 0.5).array
groupBy(array, 0.5).div
groupBy(array, 0.5).f32
groupBy(array, 0.5).f64
groupBy(array, 0.5).foo
groupBy(array, 0.5).greet
groupBy(array, 0.5).half
groupBy(array, 0.5).i
groupBy(array, 0.5).i32
groupBy(array, 0.5).i64
groupBy(array, 0.5).list
groupBy(array, 0.5).ok
groupBy(array, 0.5).score
groupBy(array, 0.5)?.Bar
groupBy(array, 0.5)?.Qux
groupBy(array, 0.5)?.String
groupBy(array, 0.5)?.add
groupBy(array, 0.5)?.array
groupBy(array, 0.5)?.div
groupBy(array, 0.5)?.f32
groupBy(array, 0.5)?.f64
groupBy(array, 0.5)?.foo
groupBy(array, 0.5)?.greet
groupBy(array, 0.5)?.half
groupBy(array, 0.5)?.i
groupBy(array, 0.5)?.i32
groupBy(array, 0.5)?.i64
groupBy(array, 0.5)?.list
groupBy(array, 0.5)?.ok
groupBy(array, 0.5)?.score
groupBy(array, 1 != #)?.String
groupBy(array, 1 != 0.5)
groupBy(array, 1 != f32)
groupBy(array, 1 % #)
groupBy(array, 1 % i)
groupBy(array, 1 * 0.5)
groupBy(array, 1 * i)
groupBy(array, 1 + #)
groupBy(array, 1 + 1)
groupBy(array, 1 - #)
groupBy(array, 1 - 1)
groupBy(array, 1 / #)
groupBy(array, 1 < #)
groupBy(array, 1 < i32)?.array
groupBy(array, 1 < i64)?.ok
groupBy(array, 1 <= #)
groupBy(array, 1 == #)
groupBy(array, 1 == #).add
groupBy(array, 1 == i32)
groupBy(array, 1 == nil)
groupBy(array, 1 > i)
groupBy(array, 1 >= #)
groupBy(array, 1 ^ #)
groupBy(array, 1 not in array)
groupBy(array, 1).Bar
groupBy(array, 1).Qux
groupBy(array, 1).String
groupBy(array, 1).add
groupBy(array, 1).array
groupBy(array, 1).div
groupBy(array, 1).f64
groupBy(array, 1).foo
groupBy(array, 1).greet
groupBy(array, 1).half
groupBy(array, 1).i
groupBy(array, 1).i32
groupBy(array, 1).i64
groupBy(array, 1).list
groupBy(array, 1).ok
groupBy(array, 1).score
groupBy(array, 1)?.Bar
groupBy(array, 1)?.Qux
groupBy(array, 1)?.String
groupBy(array, 1)?.add
groupBy(array, 1)?.array
groupBy(array, 1)?.div
groupBy(array, 1)?.f32
groupBy(array, 1)?.f64
groupBy(array, 1)?.foo
groupBy(array, 1)?.greet
groupBy(array, 1)?.half
groupBy(array, 1)?.i
groupBy(array, 1)?.i32
groupBy(array, 1)?.i64
groupBy(array, 1)?.list
groupBy(array, 1)?.ok
groupBy(array, 1)?.score
groupBy(array, abs(#))
groupBy(array, abs(0.5))
groupBy(array, abs(1))
groupBy(array, abs(f32))
groupBy(array, abs(f64))
groupBy(array, abs(i))
groupBy(array, abs(i64))
groupBy(array, add(#, #))
groupBy(array, add(#, 1))?.i64
groupBy(array, bitnand(1, #))
groupBy(array, bitnot(#))
groupBy(array, bitnot(1))
groupBy(array, bitor(#, #))
groupBy(array, bitor(1, #))
groupBy(array, bitor(i32, #))
groupBy(array, bitshl(1, #))
groupBy(array, bitshr(i, #))
groupBy(array, bitushr(#, #))
groupBy(array, ceil(#))
groupBy(array, ceil(i))
groupBy(array, ceil(i32))
groupBy(array, div != score)
groupBy(array, div == half)
groupBy(array, div(#, #))
groupBy(array, f32 != #)
groupBy(array, f32 ** 0.5)
groupBy(array, f32 - #)
groupBy(array, f32 - f64)
groupBy(array, f32 / #)
groupBy(array, f32 < #)
groupBy(array, f32 <= #)
groupBy(array, f32 == #)
groupBy(array, f32 > 0.5)
groupBy(array, f32 > i32)
groupBy(array, f32 ^ i)
groupBy(array, f32)
groupBy(array, f32).Bar
groupBy(array, f32).Qux
groupBy(array, f32).String
groupBy(array, f32).add
groupBy(array, f32).array
groupBy(array, f32).div
groupBy(array, f32).f64
groupBy(array, f32).greet
groupBy(array, f32).half
groupBy(array, f32).i
groupBy(array, f32).i32
groupBy(array, f32).i64
groupBy(array, f32).list
groupBy(array, f32).ok
groupBy(array, f32).score
groupBy(array, f32)?.Bar
groupBy(array, f32)?.Qux
groupBy(array, f32)?.String
groupBy(array, f32)?.add
groupBy(array, f32)?.array
groupBy(array, f32)?.div
groupBy(array, f32)?.f32
groupBy(array, f32)?.f64
groupBy(array, f32)?.greet
groupBy(array, f32)?.half
groupBy(array, f32)?.i32
groupBy(array, f32)?.i64
groupBy(array, f32)?.list
groupBy(array, f32)?.ok
groupBy(array, f32)?.score
groupBy(array, f32)[foo]
groupBy(array, f64 != #)
groupBy(array, f64 != i64)
groupBy(array, f64 ** #)
groupBy(array, f64 - #)
groupBy(array, f64 - #).i32
groupBy(array, f64 < #)
groupBy(array, f64 == #)
groupBy(array, f64 > #)
groupBy(array, f64 >= #)
groupBy(array, f64 >= 0.5)
groupBy(array, f64)
groupBy(array, f64).Bar
groupBy(array, f64).Qux
groupBy(array, f64).String
groupBy(array, f64).add
groupBy(array, f64).array
groupBy(array, f64).div
groupBy(array, f64).f32
groupBy(array, f64).f64
groupBy(array, f64).foo
groupBy(array, f64).greet
groupBy(array, f64).half
groupBy(array, f64).i
groupBy(array, f64).i32
groupBy(array, f64).i64
groupBy(array, f64).list
groupBy(array, f64).ok
groupBy(array, f64).score
groupBy(array, f64)?.Bar
groupBy(array, f64)?.Qux
groupBy(array, f64)?.String
groupBy(array, f64)?.add
groupBy(array, f64)?.array
groupBy(array, f64)?.div
groupBy(array, f64)?.f32
groupBy(array, f64)?.f64
groupBy(array, f64)?.foo
groupBy(array, f64)?.greet
groupBy(array, f64)?.half
groupBy(array, f64)?.i
groupBy(array, f64)?.i32
groupBy(array, f64)?.i64
groupBy(array, f64)?.list
groupBy(array, f64)?.ok
groupBy(array, f64)?.score
groupBy(array, f64)[i32]
groupBy(array, false ? # : #)
groupBy(array, false || ok)
groupBy(array, false).Bar
groupBy(array, false).Qux
groupBy(array, false).String
groupBy(array, false).add
groupBy(array, false).array
groupBy(array, false).div
groupBy(array, false).f32
groupBy(array, false).f64
groupBy(array, false).greet
groupBy(array, false).half
groupBy(array, false).i
groupBy(array, false).i32
groupBy(array, false).i64
groupBy(array, false).list
groupBy(array, false).ok
groupBy(array, false).score
groupBy(array, false)?.Bar
groupBy(array, false)?.Qux
groupBy(array, false)?.String
groupBy(array, false)?.add
groupBy(array, false)?.array
groupBy(array, false)?.div
groupBy(array, false)?.f32
groupBy(array, false)?.f64
groupBy(array, false)?.foo
groupBy(array, false)?.greet
groupBy(array, false)?.half
groupBy(array, false)?.i
groupBy(array, false)?.i32
groupBy(array, false)?.i64
groupBy(array, false)?.list
groupBy(array, false)?.ok
groupBy(array, false)?.score
groupBy(array, findLastIndex(list, true))
groupBy(array, float(#))
groupBy(array, floor(#))
groupBy(array, floor(i32))
groupBy(array, foo)
groupBy(array, foo).Bar
groupBy(array, foo).Qux
groupBy(array, foo).String
groupBy(array, foo).add
groupBy(array, foo).array
groupBy(array, foo).div
groupBy(array, foo).f32
groupBy(array, foo).f64
groupBy(array, foo).foo
groupBy(array, foo).greet
groupBy(array, foo).half
groupBy(array, foo).i
groupBy(array, foo).i32
groupBy(array, foo).i64
groupBy(array, foo).list
groupBy(array, foo).ok
groupBy(array, foo).score
groupBy(array, foo)?.Bar
groupBy(array, foo)?.Qux
groupBy(array, foo)?.String
groupBy(array, foo)?.add
groupBy(array, foo)?.array
groupBy(array, foo)?.div
groupBy(array, foo)?.f32
groupBy(array, foo)?.f64
groupBy(array, foo)?.foo
groupBy(array, foo)?.greet
groupBy(array, foo)?.half
groupBy(array, foo)?.i
groupBy(array, foo)?.i32
groupBy(array, foo)?.i64
groupBy(array, foo)?.list
groupBy(array, foo)?.ok
groupBy(array, foo)?.score
groupBy(array, foo.Bar)
groupBy(array, foo?.Bar)
groupBy(array, get(array, #))
groupBy(array, get(list, #))
groupBy(array, get(list, i32))
groupBy(array, half != add)
groupBy(array, half(1))
groupBy(array, half(f64))
groupBy(array, half(f64))?.i64
groupBy(array, i != #)
groupBy(array, i % #)
groupBy(array, i * #)
groupBy(array, i * #)?.f64
groupBy(array, i ** #)
groupBy(array, i + #)
groupBy(array, i - f64).array
groupBy(array, i / #)
groupBy(array, i < #)
groupBy(array, i <= #)
groupBy(array, i <= f64)
groupBy(array, i > i)
groupBy(array, i ^ #)
groupBy(array, i ^ 0.5)
groupBy(array, i)
groupBy(array, i).Bar
groupBy(array, i).Qux
groupBy(array, i).String
groupBy(array, i).add
groupBy(array, i).array
groupBy(array, i).div
groupBy(array, i).f32
groupBy(array, i).f64
groupBy(array, i).foo
groupBy(array, i).greet
groupBy(array, i).half
groupBy(array, i).i
groupBy(array, i).i32
groupBy(array, i).i64
groupBy(array, i).list
groupBy(array, i).ok
groupBy(array, i).score
groupBy(array, i)?.Bar
groupBy(array, i)?.String
groupBy(array, i)?.add
groupBy(array, i)?.array
groupBy(array, i)?.div
groupBy(array, i)?.f32
groupBy(array, i)?.f64
groupBy(array, i)?.foo
groupBy(array, i)?.greet
groupBy(array, i)?.half
groupBy(array, i)?.i
groupBy(array, i)?.i32
groupBy(array, i)?.i64
groupBy(array, i)?.list
groupBy(array, i)?.ok
groupBy(array, i)?.score
groupBy(array, i)[f64]
groupBy(array, i)[false ? i32 : ok]
groupBy(array, i32 * f64)
groupBy(array, i32 ** # <= i32)
groupBy(array, i32 ** f64)
groupBy(array, i32 ** i)
groupBy(array, i32 ** i64)
groupBy(array, i32 + #)
groupBy(array, i32 - 1)?.foo
groupBy(array, i32 - i64)
groupBy(array, i32 / #)
groupBy(array, i32 / f32)
groupBy(array, i32 < #)
groupBy(array, i32 < f64)
groupBy(array, i32 <= 1)
groupBy(array, i32 == #)
groupBy(array, i32 == i)
groupBy(array, i32 > #)
groupBy(array, i32 >= #).Bar
groupBy(array, i32 ^ #)
groupBy(array, i32)
groupBy(array, i32).Bar
groupBy(array, i32).Qux
groupBy(array, i32).String
groupBy(array, i32).add
groupBy(array, i32).array
groupBy(array, i32).div
groupBy(array, i32).f32
groupBy(array, i32).f64
groupBy(array, i32).greet
groupBy(array, i32).half
groupBy(array, i32).i
groupBy(array, i32).i32
groupBy(array, i32).i64
groupBy(array, i32).list
groupBy(array, i32).ok
groupBy(array, i32).score
groupBy(array, i32)?.Bar
groupBy(array, i32)?.Qux
groupBy(array, i32)?.String
groupBy(array, i32)?.add
groupBy(array, i32)?.array
groupBy(array, i32)?.div
groupBy(array, i32)?.f32
groupBy(array, i32)?.f64
groupBy(array, i32)?.foo
groupBy(array, i32)?.greet
groupBy(array, i32)?.half
groupBy(array, i32)?.i
groupBy(array, i32)?.i32
groupBy(array, i32)?.i64
groupBy(array, i32)?.list
groupBy(array, i32)?.ok
groupBy(array, i32)?.score
groupBy(array, i32)[i]
groupBy(array, i64 != i)
groupBy(array, i64 % #)
groupBy(array, i64 * f32)
groupBy(array, i64 ** #)
groupBy(array, i64 ** i)
groupBy(array, i64 + #)
groupBy(array, i64 - #)
groupBy(array, i64 / #)?.Qux
groupBy(array, i64 / 0.5)
groupBy(array, i64 < #)
groupBy(array, i64 <= #).foo
groupBy(array, i64 >= #)
groupBy(array, i64 ^ #)
groupBy(array, i64)
groupBy(array, i64).Bar
groupBy(array, i64).Qux
groupBy(array, i64).String
groupBy(array, i64).add
groupBy(array, i64).array
groupBy(array, i64).div
groupBy(array, i64).f32
groupBy(array, i64).f64
groupBy(array, i64).foo
groupBy(array, i64).greet
groupBy(array, i64).half
groupBy(array, i64).i
groupBy(array, i64).i32
groupBy(array, i64).i64
groupBy(array, i64).list
groupBy(array, i64).ok
groupBy(array, i64).score
groupBy(array, i64)?.Bar
groupBy(array, i64)?.Qux
groupBy(array, i64)?.String
groupBy(array, i64)?.add
groupBy(array, i64)?.array
groupBy(array, i64)?.div
groupBy(array, i64)?.f32
groupBy(array, i64)?.f64
groupBy(array, i64)?.foo
groupBy(array, i64)?.greet
groupBy(array, i64)?.half
groupBy(array, i64)?.i
groupBy(array, i64)?.i32
groupBy(array, i64)?.i64
groupBy(array, i64)?.list
groupBy(array, i64)?.ok
groupBy(array, i64)?.score
groupBy(array, int(f64)).i32
groupBy(array, max(#))
groupBy(array, max(#, #, #)).ok
groupBy(array, max(0.5, #))
groupBy(array, max(1))
groupBy(array, max(f64))
groupBy(array, min(#))
groupBy(array, min(0.5))
groupBy(array, min(f32))
groupBy(array, min(i, #, i32))
groupBy(array, nil != #)
groupBy(array, nil != f64)
groupBy(array, nil != foo)
groupBy(array, nil != half)
groupBy(array, nil == #)
groupBy(array, nil == 0.5)
groupBy(array, none(array, false))
groupBy(array, none(array, ok))
groupBy(array, not ok)?.Bar
groupBy(array, not true)
groupBy(array, ok == ok)
groupBy(array, ok ? # : #)
groupBy(array, ok)
groupBy(array, ok).Bar
groupBy(array, ok).Qux
groupBy(array, ok).String
groupBy(array, ok).add
groupBy(array, ok).array
groupBy(array, ok).div
groupBy(array, ok).f32
groupBy(array, ok).f64
groupBy(array, ok).foo
groupBy(array, ok).greet
groupBy(array, ok).half
groupBy(array, ok).i
groupBy(array, ok).i32
groupBy(array, ok).i64
groupBy(array, ok).list
groupBy(array, ok).ok
groupBy(array, ok).score
groupBy(array, ok)?.Bar
groupBy(array, ok)?.Qux
groupBy(array, ok)?.String
groupBy(array, ok)?.array
groupBy(array, ok)?.div
groupBy(array, ok)?.f32
groupBy(array, ok)?.f64
groupBy(array, ok)?.foo
groupBy(array, ok)?.greet
groupBy(array, ok)?.half
groupBy(array, ok)?.i32
groupBy(array, ok)?.i64
groupBy(array, ok)?.list
groupBy(array, ok)?.ok
groupBy(array, ok)?.score
groupBy(array, one(array, ok))
groupBy(array, reduce(array, #))
groupBy(array, reduce(array, foo))
groupBy(array, reduce(list, #))
groupBy(array, round(#))
groupBy(array, score == div)
groupBy(array, score(#))
groupBy(array, score(#, #))
groupBy(array, score(#, #, #, 1))
groupBy(array, score(#, 1)).list
groupBy(array, score(1))
groupBy(array, score(i))
groupBy(array, string(#))
groupBy(array, string(div))
groupBy(array, string(i32))
groupBy(array, toJSON("bar"))
groupBy(array, toJSON(#))
groupBy(array, toJSON(1 .. i))
groupBy(array, toJSON(foo))
groupBy(array, trimPrefix("foo"))
groupBy(array, true == nil)
groupBy(array, true ? # : #)
groupBy(array, true ? # : 1)
groupBy(array, true ? nil : "foo")
groupBy(array, true).Bar
groupBy(array, true).Qux
groupBy(array, true).add
groupBy(array, true).div
groupBy(array, true).f64
groupBy(array, true).foo
groupBy(array, true).greet
groupBy(array, true).half
groupBy(array, true).i
groupBy(array, true).i32
groupBy(array, true).i64
groupBy(array, true).list
groupBy(array, true).ok
groupBy(array, true).score
groupBy(array, true)?.Bar
groupBy(array, true)?.Qux
groupBy(array, true)?.String
groupBy(array, true)?.add
groupBy(array, true)?.array
groupBy(array, true)?.div
groupBy(array, true)?.f32
groupBy(array, true)?.f64
groupBy(array, true)?.half
groupBy(array, true)?.i
groupBy(array, true)?.i32
groupBy(array, true)?.i64
groupBy(array, true)?.list
groupBy(array, true)?.ok
groupBy(array, true)?.score
groupBy(array, true)[i32]
groupBy(array, type(# <= #))
groupBy(array, type(#)).i64
groupBy(array, type(-f64))
groupBy(array, type(f32))
groupBy(false ? 0.5 : "bar", #)
groupBy(filter(array, false), #)
groupBy(filter(array, false), add)
groupBy(filter(array, false), f32)
groupBy(filter(array, false), nil == #)
groupBy(filter(array, ok), half(1))
groupBy(filter(array, true), #)
groupBy(filter(array, true), f64)
groupBy(filter(list, ok), #)
groupBy(groupBy(array, "foo").list, #)
groupBy(groupBy(array, #).i32, add)
groupBy(groupBy(array, 0.5)?.div, get(.foo(add, false), none(#, foo)))
groupBy(groupBy(array, f64)?.ok, .Bar()?.Bar)
groupBy(groupBy(array, ok).Bar, #?.array not matches #)
groupBy(groupBy(array, true).f64, #[#])
groupBy(i .. 1, !ok)?.f64
groupBy(i .. 1, # % #)
groupBy(i .. i, i64)
groupBy(i .. i32, #)
groupBy(i .. i32, f64 * #)
groupBy(i .. i64, f64)?.score
groupBy(i .. i64, foo)
groupBy(i .. len(array), #)
groupBy(i32 .. 1, # - #)
groupBy(i32 .. 1, #)?.f32
groupBy(i32 .. i, #)
groupBy(i32 .. i32, i)
groupBy(i32 .. i32, i32)
groupBy(i32 .. i32, i64)
groupBy(i32 .. i32, list[i])
groupBy(i32 .. i32, ok)
groupBy(i32 .. i64, #)
groupBy(i32 .. i64, get(array, #))
groupBy(i64 .. 1, -0.5)
groupBy(i64 .. 1, i)
groupBy(i64 .. i, -#)
groupBy(i64 .. i, i32)
groupBy(i64 .. i32, i)
groupBy(i64 .. i64, i32)
groupBy(list, !("foo" in #))
groupBy(list, !false)
groupBy(list, !ok)
groupBy(list, !true)
groupBy(list, "bar" contains "foo")?.ok
groupBy(list, "bar" endsWith "bar")
groupBy(list, "bar" not in #)
groupBy(list, "bar").Bar
groupBy(list, "bar").Qux
groupBy(list, "bar").String
groupBy(list, "bar").add
groupBy(list, "bar").array
groupBy(list, "bar").div
groupBy(list, "bar").f32
groupBy(list, "bar").f64
groupBy(list, "bar").foo
groupBy(list, "bar").greet
groupBy(list, "bar").i
groupBy(list, "bar").i32
groupBy(list, "bar").i64
groupBy(list, "bar").list
groupBy(list, "bar").ok
groupBy(list, "bar").score
groupBy(list, "bar")?.Bar
groupBy(list, "bar")?.Qux
groupBy(list, "bar")?.String
groupBy(list, "bar")?.add
groupBy(list, "bar")?.array
groupBy(list, "bar")?.div
groupBy(list, "bar")?.f32
groupBy(list, "bar")?.f64
groupBy(list, "bar")?.foo
groupBy(list, "bar")?.greet
groupBy(list, "bar")?.half
groupBy(list, "bar")?.i
groupBy(list, "bar")?.i32
groupBy(list, "bar")?.i64
groupBy(list, "bar")?.list
groupBy(list, "bar")?.ok
groupBy(list, "bar")?.score
groupBy(list, "foo" not in #)?.foo
groupBy(list, "foo").Bar
groupBy(list, "foo").Qux
groupBy(list, "foo").String
groupBy(list, "foo").add
groupBy(list, "foo").array
groupBy(list, "foo").div
groupBy(list, "foo").f32
groupBy(list, "foo").f64
groupBy(list, "foo").foo
groupBy(list, "foo").greet
groupBy(list, "foo").half
groupBy(list, "foo").i
groupBy(list, "foo").i32
groupBy(list, "foo").i64
groupBy(list, "foo").list
groupBy(list, "foo").ok
groupBy(list, "foo").score
groupBy(list, "foo")?.Bar
groupBy(list, "foo")?.Qux
groupBy(list, "foo")?.String
groupBy(list, "foo")?.add
groupBy(list, "foo")?.array
groupBy(list, "foo")?.div
groupBy(list, "foo")?.f32
groupBy(list, "foo")?.f64
groupBy(list, "foo")?.foo
groupBy(list, "foo")?.greet
groupBy(list, "foo")?.half
groupBy(list, "foo")?.i
groupBy(list, "foo")?.i32
groupBy(list, "foo")?.i64
groupBy(list, "foo")?.list
groupBy(list, "foo")?.ok
groupBy(list, "foo")?.score
groupBy(list, # != #)
groupBy(list, # != foo)
groupBy(list, # != foo)?.i
groupBy(list, # != nil)
groupBy(list, # == #)
groupBy(list, # == #).div
groupBy(list, # in list)
groupBy(list, # not in list)
groupBy(list, #)
groupBy(list, #).Bar
groupBy(list, #).Qux
groupBy(list, #).String
groupBy(list, #).add
groupBy(list, #).array
groupBy(list, #).div
groupBy(list, #).f32
groupBy(list, #).f64
groupBy(list, #).foo
groupBy(list, #).greet
groupBy(list, #).half
groupBy(list, #).i
groupBy(list, #).i32
groupBy(list, #).i64
groupBy(list, #).list
groupBy(list, #).ok
groupBy(list, #).score
groupBy(list, #)?.Bar
groupBy(list, #)?.Qux
groupBy(list, #)?.String
groupBy(list, #)?.add
groupBy(list, #)?.array
groupBy(list, #)?.div
groupBy(list, #)?.f32
groupBy(list, #)?.f64
groupBy(list, #)?.foo
groupBy(list, #)?.greet
groupBy(list, #)?.half
groupBy(list, #)?.i
groupBy(list, #)?.i32
groupBy(list, #)?.i64
groupBy(list, #)?.list
groupBy(list, #)?.ok
groupBy(list, #)?.score
groupBy(list, #)[-i64]
groupBy(list, #)[1 == i32]
groupBy(list, #)[f32]
groupBy(list, #)[foo]
groupBy(list, #)[i == i64]
groupBy(list, #)[i32]
groupBy(list, #)[i64]
groupBy(list, #)[ok]
groupBy(list, #?.Bar)
groupBy(list, #?.String())
groupBy(list, #?.String())?.score
groupBy(list, -0.5)
groupBy(list, -1)
groupBy(list, -f32)
groupBy(list, -i)
groupBy(list, .Bar)
groupBy(list, .Bar).f32
groupBy(list, .String())
groupBy(list, .String())?.score
groupBy(list, 0.5 != f32)
groupBy(list, 0.5 != f64)
groupBy(list, 0.5 * f32)
groupBy(list, 0.5 ** i64)
groupBy(list, 0.5 / i)
groupBy(list, 0.5).Bar
groupBy(list, 0.5).Qux
groupBy(list, 0.5).String
groupBy(list, 0.5).add
groupBy(list, 0.5).array
groupBy(list, 0.5).div
groupBy(list, 0.5).f32
groupBy(list, 0.5).f64
groupBy(list, 0.5).greet
groupBy(list, 0.5).half
groupBy(list, 0.5).i
groupBy(list, 0.5).i32
groupBy(list, 0.5).i64
groupBy(list, 0.5).list
groupBy(list, 0.5).ok
groupBy(list, 0.5).score
groupBy(list, 0.5)?.Bar
groupBy(list, 0.5)?.Qux
groupBy(list, 0.5)?.String
groupBy(list, 0.5)?.add
groupBy(list, 0.5)?.array
groupBy(list, 0.5)?.div
groupBy(list, 0.5)?.f32
groupBy(list, 0.5)?.f64
groupBy(list, 0.5)?.foo
groupBy(list, 0.5)?.greet
groupBy(list, 0.5)?.half
groupBy(list, 0.5)?.i
groupBy(list, 0.5)?.i32
groupBy(list, 0.5)?.i64
groupBy(list, 0.5)?.list
groupBy(list, 0.5)?.ok
groupBy(list, 0.5)?.score
groupBy(list, 1 * f64).f32
groupBy(list, 1 + i)
groupBy(list, 1 - 0.5)
groupBy(list, 1 ^ 0.5)
groupBy(list, 1 ^ 1)
groupBy(list, 1 ^ i)
groupBy(list, 1).Bar
groupBy(list, 1).Qux
groupBy(list, 1).String
groupBy(list, 1).add
groupBy(list, 1).array
groupBy(list, 1).div
groupBy(list, 1).f32
groupBy(list, 1).f64
groupBy(list, 1).foo
groupBy(list, 1).greet
groupBy(list, 1).half
groupBy(list, 1).i
groupBy(list, 1).i32
groupBy(list, 1).i64
groupBy(list, 1).list
groupBy(list, 1).ok
groupBy(list, 1).score
groupBy(list, 1)?.Bar
groupBy(list, 1)?.Qux
groupBy(list, 1)?.String
groupBy(list, 1)?.add
groupBy(list, 1)?.array
groupBy(list, 1)?.div
groupBy(list, 1)?.f32
groupBy(list, 1)?.f64
groupBy(list, 1)?.foo
groupBy(list, 1)?.greet
groupBy(list, 1)?.half
groupBy(list, 1)?.i
groupBy(list, 1)?.i32
groupBy(list, 1)?.i64
groupBy(list, 1)?.list
groupBy(list, 1)?.ok
groupBy(list, 1)?.score
groupBy(list, 1)[i]
groupBy(list, 1)[reduce(list, "foo")]
groupBy(list, abs(1))
groupBy(list, abs(i))
groupBy(list, abs(i64))
groupBy(list, all(list, ok))
groupBy(list, ceil(0.5))
groupBy(list, ceil(f64))
groupBy(list, f32 ** 0.5)
groupBy(list, f32 ** 1)
groupBy(list, f32 < f32)
groupBy(list, f32 == i64)
groupBy(list, f32 >= 1)
groupBy(list, f32)
groupBy(list, f32).Bar
groupBy(list, f32).Qux
groupBy(list, f32).String
groupBy(list, f32).add
groupBy(list, f32).array
groupBy(list, f32).div
groupBy(list, f32).f32
groupBy(list, f32).f64
groupBy(list, f32).foo
groupBy(list, f32).half
groupBy(list, f32).i
groupBy(list, f32).i32
groupBy(list, f32).i64
groupBy(list, f32).list
groupBy(list, f32).ok
groupBy(list, f32)?.Bar
groupBy(list, f32)?.Qux
groupBy(list, f32)?.String
groupBy(list, f32)?.add
groupBy(list, f32)?.array
groupBy(list, f32)?.div
groupBy(list, f32)?.f32
groupBy(list, f32)?.f64
groupBy(list, f32)?.foo
groupBy(list, f32)?.greet
groupBy(list, f32)?.half
groupBy(list, f32)?.i
groupBy(list, f32)?.i32
groupBy(list, f32)?.i64
groupBy(list, f32)?.list
groupBy(list, f32)?.ok
groupBy(list, f32)?.score
groupBy(list, f32)[add == nil]
groupBy(list, f32)[toJSON(true)]
groupBy(list, f64 * 0.5)
groupBy(list, f64 * 1)
groupBy(list, f64 - 1)
groupBy(list, f64 < f64)
groupBy(list, f64)
groupBy(list, f64).Bar
groupBy(list, f64).Qux
groupBy(list, f64).String
groupBy(list, f64).add
groupBy(list, f64).array
groupBy(list, f64).div
groupBy(list, f64).f32
groupBy(list, f64).f64
groupBy(list, f64).foo
groupBy(list, f64).greet
groupBy(list, f64).half
groupBy(list, f64).i
groupBy(list, f64).i32
groupBy(list, f64).i64
groupBy(list, f64).list
groupBy(list, f64).ok
groupBy(list, f64).score
groupBy(list, f64)?.Bar
groupBy(list, f64)?.Qux
groupBy(list, f64)?.String
groupBy(list, f64)?.add
groupBy(list, f64)?.array
groupBy(list, f64)?.div
groupBy(list, f64)?.f32
groupBy(list, f64)?.f64
groupBy(list, f64)?.foo
groupBy(list, f64)?.greet
groupBy(list, f64)?.half
groupBy(list, f64)?.i
groupBy(list, f64)?.i32
groupBy(list, f64)?.i64
groupBy(list, f64)?.list
groupBy(list, f64)?.ok
groupBy(list, f64)?.score
groupBy(list, false == ok)
groupBy(list, false ? score : #)
groupBy(list, false).Bar
groupBy(list, false).add
groupBy(list, false).array
groupBy(list, false).div
groupBy(list, false).f32
groupBy(list, false).foo
groupBy(list, false).greet
groupBy(list, false).half
groupBy(list, false).i
groupBy(list, false).i32
groupBy(list, false).i64
groupBy(list, false).list
groupBy(list, false).ok
groupBy(list, false)?.Bar
groupBy(list, false)?.Qux
groupBy(list, false)?.String
groupBy(list, false)?.add
groupBy(list, false)?.div
groupBy(list, false)?.f32
groupBy(list, false)?.f64
groupBy(list, false)?.greet
groupBy(list, false)?.half
groupBy(list, false)?.i
groupBy(list, false)?.i32
groupBy(list, false)?.i64
groupBy(list, false)?.list
groupBy(list, false)?.ok
groupBy(list, false)?.score
groupBy(list, findLastIndex(array, ok))
groupBy(list, findLastIndex(list, false))
groupBy(list, first(array))
groupBy(list, float(-1))
groupBy(list, float(0.5))
groupBy(list, floor(i))
groupBy(list, floor(i64))
groupBy(list, foo != #)
groupBy(list, foo)
groupBy(list, foo).Bar
groupBy(list, foo).Qux
groupBy(list, foo).String
groupBy(list, foo).add
groupBy(list, foo).array
groupBy(list, foo).div
groupBy(list, foo).f32
groupBy(list, foo).f64
groupBy(list, foo).foo
groupBy(list, foo).greet
groupBy(list, foo).half
groupBy(list, foo).i
groupBy(list, foo).i32
groupBy(list, foo).i64
groupBy(list, foo).list
groupBy(list, foo).ok
groupBy(list, foo).score
groupBy(list, foo)?.Bar
groupBy(list, foo)?.Qux
groupBy(list, foo)?.String
groupBy(list, foo)?.add
groupBy(list, foo)?.array
groupBy(list, foo)?.div
groupBy(list, foo)?.f32
groupBy(list, foo)?.f64
groupBy(list, foo)?.foo
groupBy(list, foo)?.half
groupBy(list, foo)?.i
groupBy(list, foo)?.i32
groupBy(list, foo)?.i64
groupBy(list, foo)?.list
groupBy(list, foo)?.ok
groupBy(list, foo)?.score
groupBy(list, foo)[i32]
groupBy(list, foo.Bar)
groupBy(list, foo.String())
groupBy(list, foo?.String())
groupBy(list, greet != greet)
groupBy(list, greet == add)
groupBy(list, greet("bar"))
groupBy(list, i * i)
groupBy(list, i / f64)
groupBy(list, i <= i)
groupBy(list, i ^ i)
groupBy(list, i)
groupBy(list, i).Bar
groupBy(list, i).Qux
groupBy(list, i).String
groupBy(list, i).add
groupBy(list, i).array
groupBy(list, i).div
groupBy(list, i).f32
groupBy(list, i).f64
groupBy(list, i).foo
groupBy(list, i).half
groupBy(list, i).i
groupBy(list, i).i32
groupBy(list, i).i64
groupBy(list, i).list
groupBy(list, i).ok
groupBy(list, i).score
groupBy(list, i)?.Bar
groupBy(list, i)?.Qux
groupBy(list, i)?.String
groupBy(list, i)?.add
groupBy(list, i)?.array
groupBy(list, i)?.div
groupBy(list, i)?.f32
groupBy(list, i)?.f64
groupBy(list, i)?.foo
groupBy(list, i)?.greet
groupBy(list, i)?.half
groupBy(list, i)?.i
groupBy(list, i)?.i32
groupBy(list, i)?.i64
groupBy(list, i)?.list
groupBy(list, i)?.ok
groupBy(list, i)?.score
groupBy(list, i32 != f32)?.foo
groupBy(list, i32 * 0.5)
groupBy(list, i32 ** 0.5)
groupBy(list, i32 ** f32)
groupBy(list, i32 > i)
groupBy(list, i32 ^ i)
groupBy(list, i32)
groupBy(list, i32).Bar
groupBy(list, i32).Qux
groupBy(list, i32).add
groupBy(list, i32).array
groupBy(list, i32).div
groupBy(list, i32).f32
groupBy(list, i32).f64
groupBy(list, i32).foo
groupBy(list, i32).greet
groupBy(list, i32).half
groupBy(list, i32).i
groupBy(list, i32).i32
groupBy(list, i32).i64
groupBy(list, i32).list
groupBy(list, i32).ok
groupBy(list, i32).score
groupBy(list, i32)?.Bar
groupBy(list, i32)?.Qux
groupBy(list, i32)?.String
groupBy(list, i32)?.add
groupBy(list, i32)?.array
groupBy(list, i32)?.div
groupBy(list, i32)?.f32
groupBy(list, i32)?.f64
groupBy(list, i32)?.foo
groupBy(list, i32)?.greet
groupBy(list, i32)?.half
groupBy(list, i32)?.i
groupBy(list, i32)?.i32
groupBy(list, i32)?.i64
groupBy(list, i32)?.list
groupBy(list, i32)?.ok
groupBy(list, i32)?.score
groupBy(list, i64 != i32)
groupBy(list, i64 != nil)
groupBy(list, i64 - 0.5)
groupBy(list, i64 < 1)
groupBy(list, i64 <= 1)
groupBy(list, i64 == 1)
groupBy(list, i64 == nil)
groupBy(list, i64)
groupBy(list, i64).Bar
groupBy(list, i64).Qux
groupBy(list, i64).String
groupBy(list, i64).add
groupBy(list, i64).array
groupBy(list, i64).div
groupBy(list, i64).f32
groupBy(list, i64).f64
groupBy(list, i64).foo
groupBy(list, i64).greet
groupBy(list, i64).half
groupBy(list, i64).i
groupBy(list, i64).i32
groupBy(list, i64).list
groupBy(list, i64).ok
groupBy(list, i64).score
groupBy(list, i64)?.Bar
groupBy(list, i64)?.Qux
groupBy(list, i64)?.String
groupBy(list, i64)?.add
groupBy(list, i64)?.array
groupBy(list, i64)?.div
groupBy(list, i64)?.f32
groupBy(list, i64)?.f64
groupBy(list, i64)?.foo
groupBy(list, i64)?.greet
groupBy(list, i64)?.half
groupBy(list, i64)?.i
groupBy(list, i64)?.i32
groupBy(list, i64)?.i64
groupBy(list, i64)?.list
groupBy(list, i64)?.ok
groupBy(list, i64)?.score
groupBy(list, i64)[max(i)]
groupBy(list, i64)[ok]
groupBy(list, int(1))
groupBy(list, list == array)
groupBy(list, lower("foo"))
groupBy(list, max(f64))
groupBy(list, max(i))
groupBy(list, nil != #)
groupBy(list, nil != div)
groupBy(list, nil != true)
groupBy(list, nil == #)
groupBy(list, nil == #).i
groupBy(list, nil in list)
groupBy(list, not false)
groupBy(list, not ok)
groupBy(list, ok != false)
groupBy(list, ok ? # : true)
groupBy(list, ok)
groupBy(list, ok).Bar
groupBy(list, ok).Qux
groupBy(list, ok).String
groupBy(list, ok).add
groupBy(list, ok).array
groupBy(list, ok).div
groupBy(list, ok).f32
groupBy(list, ok).f64
groupBy(list, ok).foo
groupBy(list, ok).greet
groupBy(list, ok).half
groupBy(list, ok).i
groupBy(list, ok).i32
groupBy(list, ok).i64
groupBy(list, ok).list
groupBy(list, ok).ok
groupBy(list, ok).score
groupBy(list, ok)?.Bar
groupBy(list, ok)?.Qux
groupBy(list, ok)?.String
groupBy(list, ok)?.add
groupBy(list, ok)?.array
groupBy(list, ok)?.div
groupBy(list, ok)?.f32
groupBy(list, ok)?.f64
groupBy(list, ok)?.foo
groupBy(list, ok)?.greet
groupBy(list, ok)?.half
groupBy(list, ok)?.i
groupBy(list, ok)?.i32
groupBy(list, ok)?.i64
groupBy(list, ok)?.list
groupBy(list, ok)?.ok
groupBy(list, ok)?.score
groupBy(list, reduce(array, #))
groupBy(list, reduce(list, #)).i32
groupBy(list, reduce(list, f64))
groupBy(list, reduce(list, i32))
groupBy(list, reduce(map(list, i64), #))
groupBy(list, round(0.5))
groupBy(list, round(1))
groupBy(list, round(f64))
groupBy(list, score(1))
groupBy(list, score(i))
groupBy(list, string(#))
groupBy(list, string(add))
groupBy(list, string(half))
groupBy(list, string(i32))
groupBy(list, string(true))
groupBy(list, toBase64("foo"))
groupBy(list, toJSON(#))
groupBy(list, toJSON(1))
groupBy(list, toJSON(array))
groupBy(list, toJSON(foo))
groupBy(list, true && false)
groupBy(list, true ? # : 1)
groupBy(list, true ? 1 : #)
groupBy(list, true).Qux
groupBy(list, true).String
groupBy(list, true).add
groupBy(list, true).array
groupBy(list, true).div
groupBy(list, true).f32
groupBy(list, true).f64
groupBy(list, true).foo
groupBy(list, true).greet
groupBy(list, true).half
groupBy(list, true).i
groupBy(list, true).i32
groupBy(list, true).i64
groupBy(list, true).list
groupBy(list, true).ok
groupBy(list, true).score
groupBy(list, true)?.Bar
groupBy(list, true)?.Qux
groupBy(list, true)?.String
groupBy(list, true)?.add
groupBy(list, true)?.array
groupBy(list, true)?.div
groupBy(list, true)?.f32
groupBy(list, true)?.f64
groupBy(list, true)?.foo
groupBy(list, true)?.greet
groupBy(list, true)?.half
groupBy(list, true)?.i
groupBy(list, true)?.i32
groupBy(list, true)?.i64
groupBy(list, true)?.list
groupBy(list, true)?.ok
groupBy(list, true)?.score
groupBy(list, type("foo"))
groupBy(list, type(#))
groupBy(list, type(false))
groupBy(list[i32:1], i64)
groupBy(list[i32:i32], foo)
groupBy(list[i64:1], i32)
groupBy(list[i:1], f64)
groupBy(map(array, #), # <= #)
groupBy(map(array, #), # == #)
groupBy(map(array, #), # >= #)
groupBy(map(array, #), #)
groupBy(map(array, #), 0.5 < 0.5)
groupBy(map(array, #), foo)
groupBy(map(array, #), i)
groupBy(map(array, #), i64)
groupBy(map(array, #), min(1))
groupBy(map(array, #), ok)
groupBy(map(array, 0.5), # != 0.5)
groupBy(map(array, 0.5), # / #)
groupBy(map(array, 0.5), #)
groupBy(map(array, 0.5), f64)
groupBy(map(array, 1), 0.5 / #)
groupBy(map(array, 1), f64)
groupBy(map(array, 1), max(#))
groupBy(map(array, 1), ok)
groupBy(map(array, div), div != #)
groupBy(map(array, f32), # - 0.5)
groupBy(map(array, f32), min(#))
groupBy(map(array, f64), #)
groupBy(map(array, false), f64)
groupBy(map(array, false), i)
groupBy(map(array, foo), #).add
groupBy(map(array, foo), i)
groupBy(map(array, foo), ok)
groupBy(map(array, i), #)
groupBy(map(array, i32), # % i)
groupBy(map(array, i32), #)
groupBy(map(array, ok), i64)
groupBy(map(list, "bar"), #)
groupBy(map(list, "foo"), #)
groupBy(map(list, #), "bar" == "bar")
groupBy(map(list, #), #)
groupBy(map(list, #), #)?.array
groupBy(map(list, #), f32)
groupBy(map(list, #), f64)
groupBy(map(list, #), i32)
groupBy(map(list, #), i64)
groupBy(map(list, #), ok)
groupBy(map(list, 0.5), # * i64)
groupBy(map(list, 0.5), # ** #)
groupBy(map(list, 0.5), #)
groupBy(map(list, 0.5), i32)
groupBy(map(list, 1), #)
groupBy(map(list, 1), get(list, #)).i64
groupBy(map(list, 1), i64)
groupBy(map(list, f32), # ** #).array
groupBy(map(list, f64), #)
groupBy(map(list, f64), #).half
groupBy(map(list, f64), f32)
groupBy(map(list, f64), i)
groupBy(map(list, i), #)
groupBy(map(list, i32), # == #)
groupBy(map(list, i64), #)?.i32
groupBy(map(list, i64), i)
groupBy(map(list, list), foo)
groupBy(map(list, ok), #)
groupBy(ok ? "foo" : greet, # <= #)
groupBy(reduce(array, # .. i64), add)
groupBy(reduce(array, array), foo)
groupBy(reduce(array, array), i)
groupBy(reduce(list, array), # / #)
groupBy(reduce(list, array), true ? true : nil)
groupBy(sort(array), #)
groupBy(sort(array), foo)
groupBy(true ? "foo" : 1, # > 0.5)
groupBy(true ? "foo" : 1, foo)
groupBy(true ? "foo" : false, # / #)
groupBy(true ? "foo" : score, #)
half
half != add
half != add ? add : array
half != add ? true : 1
half != add || ok
half != div
half != div ? i32 : f64
half != div ? nil : greet
half != foo.Qux
half != foo.String
half != foo?.Qux
half != foo?.String
half != greet
half != greet == ok
half != greet ? score : true
half != half
half != half != nil
half != half and "bar" in foo
half != nil == false
half != nil ? "bar" : div
half != nil ? "bar" : false
half != nil ? true : div
half != reduce(list, half)
half != score
half != score && i32 > 1
half == add
half == add == nil
half == add ? list : add
half == add or ok
half == div
half == foo.Qux
half == foo.String
half == foo?.Qux
half == foo?.String
half == greet
half == greet != ok
half == greet ? half : div
half == greet ? i64 : ok
half == greet || true ? i : list
half == half
half == nil && ok
half == nil ? array : 0.5
half == nil ? foo : false
half == score
half == score ? f32 : nil
half == score ? foo : "bar"
half(-(0.5 + 1))
half(-(f64 + 1))
half(-(i64 - 0.5))
half(-0.5)
half(-1)
half(-f64)
half(0.5 * 0.5)
half(0.5 * 1)
half(0.5 * f64)
half(0.5 * i)
half(0.5 * i32)
half(0.5 * i64)
half(0.5 ** 0.5)
half(0.5 ** 1)
half(0.5 ** f32)
half(0.5 ** f64)
half(0.5 ** i)
half(0.5 ** i32)
half(0.5 ** i64)
half(0.5 + 0.5)
half(0.5 + 1 + i64)
half(0.5 + 1)
half(0.5 + f32)
half(0.5 + f64)
half(0.5 + i)
half(0.5 + i32)
half(0.5 + i64)
half(0.5 - 0.5)
half(0.5 - 1)
half(0.5 - f32)
half(0.5 - f64)
half(0.5 - i)
half(0.5 - i32)
half(0.5 - i64)
half(0.5 / 0.5)
half(0.5 / 1)
half(0.5 / f32)
half(0.5 / f64)
half(0.5 / i)
half(0.5 / i64)
half(0.5 ^ 0.5)
half(0.5 ^ 1)
half(0.5 ^ f32)
half(0.5 ^ f64)
half(0.5 ^ i)
half(0.5 ^ i32)
half(0.5 ^ i64)
half(0.5) != -i64
half(0.5) != 0.5 ^ i
half(0.5) != i32
half(0.5) != i64
half(0.5) * f32
half(0.5) * i
half(0.5) * i32
half(0.5) * i64
half(0.5) ** f32
half(0.5) ** i
half(0.5) ** i32
half(0.5) ** i64
half(0.5) ** max(1)
half(0.5) + 1 / 1
half(0.5) + f32
half(0.5) + f64
half(0.5) + i32
half(0.5) + i64
half(0.5) - i64
half(0.5) / -0.5
half(0.5) / f64
half(0.5) / i
half(0.5) / i64
half(0.5) < f64
half(0.5) <= f32 ? f64 : 1
half(0.5) <= f64
half(0.5) <= i32
half(0.5) <= i64 + i32
half(0.5) <= int(0.5)
half(0.5) == f32
half(0.5) == i32 / i
half(0.5) == i64
half(0.5) > f32
half(0.5) > f64
half(0.5) > i
half(0.5) > i64
half(0.5) >= i32
half(0.5) ^ (1 * i32)
half(0.5) ^ f32
half(0.5) ^ f64
half(0.5) ^ i
half(0.5) ^ i32
half(0.5) ^ i64
half(1 * 0.5)
half(1 * 1)
half(1 * f32)
half(1 * f64)
half(1 * i)
half(1 * i32)
half(1 * i64)
half(1 ** 0.5)
half(1 ** 1)
half(1 ** f32)
half(1 ** f64)
half(1 ** i)
half(1 ** i32)
half(1 ** i64)
half(1 + 0.5)
half(1 + 1)
half(1 + f32)
half(1 + f64)
half(1 + i)
half(1 + i32)
half(1 + i64)
half(1 - 0.5)
half(1 - 1)
half(1 - f32)
half(1 - f64)
half(1 - i)
half(1 - i32)
half(1 - i64)
half(1 / 0.5)
half(1 / 1)
half(1 / f32)
half(1 / f64)
half(1 / i)
half(1 / i32)
half(1 / i64)
half(1 ^ 0.5)
half(1 ^ 1)
half(1 ^ f32)
half(1 ^ f64)
half(1 ^ i)
half(1 ^ i32)
half(1 ^ i64)
half(1) != f32
half(1) != f64
half(1) != f64 ** f32
half(1) != f64 ^ 0.5
half(1) != i32
half(1) != i64
half(1) * i32 * i64
half(1) ** (i64 * f32)
half(1) ** f32
half(1) ** i
half(1) ** i32
half(1) ** i64
half(1) + f32
half(1) + f32 / 0.5
half(1) + i
half(1) + i32
half(1) + i64 + i32
half(1) - f32
half(1) - i < i64
half(1) - i32
half(1) - i64
half(1) / -1
half(1) / 0.5 / i
half(1) / i
half(1) / i32
half(1) < f64
half(1) < i
half(1) < i64
half(1) <= f32
half(1) <= i32
half(1) <= i64
half(1) == -1
half(1) == 1 ^ i64
half(1) == f32
half(1) == i32
half(1) > i
half(1) > i32
half(1) > i64
half(1) >= f32
half(1) >= i
half(1) >= i32
half(1) >= i64
half(1) >= max(1)
half(1) >= mean(array)
half(1) ^ f32
half(1) ^ findIndex(list, true)
half(1) ^ i64
half(1) in array
half(1) not in array
half(abs(0.5))
half(abs(f64))
half(ceil(0.5))
half(ceil(1))
half(ceil(f32))
half(ceil(f64))
half(ceil(i))
half(ceil(i32))
half(ceil(i64))
half(f32 * 0.5)
half(f32 * 1)
half(f32 * f64)
half(f32 * i)
half(f32 * i32)
half(f32 ** 0.5)
half(f32 ** f32)
half(f32 ** f64)
half(f32 ** i64)
half(f32 + 0.5)
half(f32 + 1)
half(f32 + f64)
half(f32 + i32)
half(f32 + i64)
half(f32 - 0.5)
half(f32 - 1)
half(f32 - f64)
half(f32 - i)
half(f32 - i32)
half(f32 - i64)
half(f32 / 0.5)
half(f32 / 1)
half(f32 / f32)
half(f32 / f64)
half(f32 / i)
half(f32 / i32)
half(f32 / i64)
half(f32 ^ 0.5)
half(f32 ^ 1)
half(f32 ^ f32)
half(f32 ^ f64)
half(f32 ^ i)
half(f32 ^ i32)
half(f32 ^ i64)
half(f64 * 0.5)
half(f64 * f32)
half(f64 * f64)
half(f64 * i)
half(f64 * i32)
half(f64 * i64)
half(f64 ** 0.5)
half(f64 ** 1)
half(f64 ** f32)
half(f64 ** i)
half(f64 ** i32)
half(f64 + 0.5)
half(f64 + 1)
half(f64 + f64)
half(f64 + i)
half(f64 + i64)
half(f64 - 0.5)
half(f64 - 1)
half(f64 - f32)
half(f64 - f64)
half(f64 - i)
half(f64 - i64)
half(f64 / 0.5)
half(f64 / 1)
half(f64 / f32)
half(f64 / f64)
half(f64 / i)
half(f64 / i32)
half(f64 ^ 0.5)
half(f64 ^ 1)
half(f64 ^ f32)
half(f64 ^ f64)
half(f64 ^ i32)
half(f64)
half(f64) != f64 != false
half(f64) != i32
half(f64) != i64
half(f64) ** f64
half(f64) ** i
half(f64) ** i32
half(f64) + i32
half(f64) + i64
half(f64) - f64
half(f64) - i32
half(f64) / f64
half(f64) / i32
half(f64) < i
half(f64) < i32
half(f64) <= f32
half(f64) <= i32
half(f64) == f32
half(f64) == f64
half(f64) == i
half(f64) == i32
half(f64) == i64
half(f64) > f32
half(f64) > f64
half(f64) > i
half(f64) > i32
half(f64) > i64
half(f64) >= i
half(f64) >= i64
half(f64) ^ i
half(f64) not in array
half(false ? f64 : 0.5)
half(false ? i32 : 0.5)
half(false ? ok : 0.5)
half(false ? score : 0.5)
half(false ? true : f64)
half(float(0.5))
half(float(1))
half(float(f32))
half(float(f64))
half(float(i))
half(float(i32))
half(float(i64))
half(floor(0.5))
half(floor(1))
half(floor(f32))
half(floor(f64))
half(floor(i))
half(floor(i32))
half(floor(i64))
half(half(0.5))
half(half(1))
half(half(ceil(i)))
half(half(f64 - 0.5))
half(half(f64))
half(i * 0.5)
half(i * 1)
half(i * f64)
half(i ** 0.5)
half(i ** 1)
half(i ** f32)
half(i ** f64)
half(i ** i)
half(i ** i32)
half(i ** i64)
half(i + 0.5)
half(i + 1)
half(i + f32)
half(i + f64)
half(i - 1)
half(i - f32)
half(i - f64)
half(i / 0.5)
half(i / 1)
half(i / f64)
half(i / i)
half(i / i32)
half(i ^ 0.5)
half(i ^ 1)
half(i ^ i)
half(i ^ i32)
half(i ^ i64)
half(i32 * 0.5)
half(i32 * 1)
half(i32 * f32)
half(i32 * f64)
half(i32 ** 0.5)
half(i32 ** 1)
half(i32 ** f64)
half(i32 ** i)
half(i32 ** i32)
half(i32 ** i64)
half(i32 + 0.5)
half(i32 + 1)
half(i32 + f32)
half(i32 + f64)
half(i32 - 0.5)
half(i32 - 1)
half(i32 - f32)
half(i32 / 0.5)
half(i32 / 1)
half(i32 / f32)
half(i32 / f64)
half(i32 / i)
half(i32 / i32 / f32 / f64)
half(i32 / i32)
half(i32 / i64)
half(i32 ^ 0.5)
half(i32 ^ 1)
half(i32 ^ f32)
half(i32 ^ f64)
half(i32 ^ i)
half(i32 ^ i32)
half(i32 ^ i64 ^ i)
half(i32 ^ i64)
half(i64 != i ? true : 0.5)
half(i64 * 0.5)
half(i64 * 1)
half(i64 * f64)
half(i64 ** 0.5)
half(i64 ** 1)
half(i64 ** f64)
half(i64 ** i)
half(i64 ** i32)
half(i64 ** i64)
half(i64 + 0.5)
half(i64 + f32)
half(i64 + f64)
half(i64 - 0.5)
half(i64 - 1)
half(i64 - f32)
half(i64 - f64)
half(i64 / 0.5)
half(i64 / 1)
half(i64 / f32)
half(i64 / f64)
half(i64 / i)
half(i64 / i32)
half(i64 ^ 0.5)
half(i64 ^ 1)
half(i64 ^ f32)
half(i64 ^ f64)
half(i64 ^ i)
half(i64 ^ i32)
half(max(0.5))
half(max(0.5)) ** i
half(max(f64))
half(mean(array))
half(median(array))
half(min(0.5))
half(min(0.5, f32))
half(min(0.5, i32))
half(min(f64))
half(min(i, 0.5))
half(reduce(array, 0.5))
half(reduce(array, f64))
half(reduce(list, 0.5))
half(reduce(list, f64))
half(round(0.5))
half(round(1))
half(round(f32))
half(round(f64))
half(round(i))
half(round(i32))
half(round(i64))
half(score(1) ^ i64)
half(true ? 0.5 : i64)
half(true ? f64 : nil)
i
i != -0.5
i != -1
i != -f32
i != -f64
i != -i
i != -i32
i != 0.5 + 0.5
i != 0.5 - 1
i != 0.5 / 1
i != 0.5 ? 1 : div
i != 0.5 ? false : i32
i != 0.5 ^ 0.5
i != 0.5 ^ 1
i != 0.5 ^ f32
i != 1 != nil
i != 1 / 1
i != 1 ? f64 : score
i != ceil(1)
i != ceil(f32)
i != ceil(i64)
i != f32
i != f32 ** i64
i != f32 + i64
i != f32 == ok
i != f64
i != f64 + i32
i != f64 == true
i != f64 ^ f32
i != f64 ^ i64
i != float(0.5)
i != float(i)
i != half(0.5)
i != half(f64)
i != i
i != i * 1
i != i * i32
i != i - i32
i != i ? i : false
i != i32
i != i32 != nil ? greet : score
i != i32 * 0.5
i != i32 * f32
i != i32 and ok
i != i64
i != i64 ** i
i != i64 ? add : i64
i != i64 ? f32 : nil
i != i64 ^ 1
i != int(1)
i != min(i64)
i != nil != ok
i != nil ? ok : f64
i != reduce(array, #)
i != reduce(array, 0.5)
i != reduce(list, 1)
i != round(f64)
i != score(1)
i != score(i)
i != {"foo": score}?.f32
i % (1 + i32)
i % (i32 + i32)
i % (i64 + 1)
i % -1
i % -i
i % -i32
i % 1 % i32
i % 1 % i64
i % 1 * i32
i % 1 + i64
i % 1 .. i
i % 1 / 0.5
i % 1 / f32
i % 1 <= i64
i % 1 >= i
i % abs(1)
i % abs(i)
i % array[1]
i % array[i64]
i % i
i % i / i
i % i32
i % i32 != i32
i % i32 * 1
i % i32 * f64
i % i32 / i32
i % i32 <= f64
i % i64
i % i64 != i ? f64 : list
i % i64 <= i
i % min(1)
i % min(i64)
i % reduce(array, #)
i % score(i)
i * (1 + 1)
i * (f32 + 0.5)
i * (f32 + 1)
i * (f64 + i)
i * (f64 - i32)
i * -i32
i * -i64
i * 0.5 * f64
i * 0.5 + i
i * 0.5 / i
i * 0.5 < i32
i * 0.5 > i32 * f32
i * 0.5 ^ 1
i * 1 % i64
i * 1 ** 1
i * 1 < f64
i * 1 < i32
i * 1 == i32
i * bitnand(i64, i64)
i * bitnot(i64)
i * ceil(1)
i * f32
i * f32 <= f64
i * f32 ^ 0.5
i * f32 ^ 1
i * f32 ^ f32
i * f64
i * f64 != i
i * f64 * f32 > i
i * f64 * i
i * f64 ** i32
i * float(f32)
i * floor(f32)
i * floor(i)
i * floor(i32)
i * floor(i64)
i * half(0.5)
i * half(1)
i * half(f64)
i * i
i * i % i
i * i * 0.5
i * i * f32
i * i ** 0.5
i * i - f32
i * i .. i
i * i == f32
i * i32
i * i32 * i
i * i32 .. i32
i * i32 / min(1)
i * i32 == f32
i * i32 in array
i * i64
i * i64 < f64
i * int(1)
i * max(1)
i * max(f64, f32)
i * max(i)
i * min(f64, i)
i * reduce(array, #)
i * score(1)
i * score(i)
i * sum(array)
i ** (0.5 * f64)
i ** (0.5 + 0.5)
i ** (0.5 - 1)
i ** (0.5 - f64)
i ** (0.5 / i32)
i ** (f32 + 0.5)
i ** (f32 + f32)
i ** (i * 0.5)
i ** (i * 1)
i ** (i + f64)
i ** (i - i32 + i32)
i ** (i32 - i64)
i ** (i32 / 1)
i ** (i64 - 0.5)
i ** -0.5
i ** -1
i ** -f32
i ** -i32
i ** -i64
i ** 0.5 ** f32
i ** 0.5 ** reduce(array, #)
i ** 0.5 < bitnot(i64)
i ** 0.5 < f32
i ** 0.5 < f64
i ** 0.5 <= i64
i ** 0.5 ^ i
i ** 0.5 ^ i64
i ** 1 ** 1
i ** 1 / i
i ** 1 < -f32
i ** 1 >= f64
i ** 1 ^ i
i ** 1 ^ i32
i ** abs(0.5)
i ** array[i64]
i ** bitnand(i32, 1)
i ** bitshl(i64, i32)
i ** ceil(1)
i ** f32
i ** f32 * i32
i ** f32 ** 1
i ** f32 ^ f64
i ** f32 ^ i64
i ** f64
i ** f64 != i32
i ** f64 ** f64
i ** f64 > i64 ? 1 : ok
i ** f64 >= i
i ** first(array)
i ** floor(f64)
i ** half(1)
i ** half(f64)
i ** half(i + f32)
i ** i
i ** i != i == ok
i ** i ^ 0.5
i ** i32
i ** i32 == f32
i ** i32 > i64
i ** i64
i ** i64 ** i
i ** i64 < i
i ** i64 == i32
i ** i64 >= i
i ** i64 ^ i64
i ** i64 not in array
i ** len("foo")
i ** len(array)
i ** min(1)
i ** min(i32)
i ** reduce(array, #)
i ** score(1)
i ** score(i)
i + -0.5
i + -1
i + -f32
i + -f64
i + 0.5 ** 0.5
i + 0.5 + i
i + 0.5 / 1
i + 1 + f32
i + 1 / f32
i + 1 > f64
i + 1 ^ 1
i + 1 ^ f32
i + abs(0.5)
i + array[i64]
i + array[i]
i + count(list, true)
i + f32
i + f32 ** i
i + f32 / f64
i + f32 / i32
i + f32 < i64
i + f64
i + f64 - i32
i + f64 < i64
i + f64 == i32
i + f64 > f64
i + float(0.5)
i + float(i32)
i + get(array, i)
i + half(1)
i + half(f64)
i + i
i + i * i64
i + i ^ 1
i + i32
i + i32 .. -i64
i + i32 .. i
i + i32 <= f32
i + i32 == i64
i + i32 > min(i)
i + i32 >= i32 == nil
i + i32 in array
i + i64
i + i64 - f64
i + i64 / 0.5
i + i64 / f64
i + i64 > f32
i + int(f32)
i + len("bar")
i + reduce(array, #)
i + reduce(array, f32)
i + reduce(list, i32)
i + score(i)
i - -0.5
i - -1
i - -f32
i - -f64
i - -i64
i - 0.5 + i64
i - 0.5 - 1
i - 0.5 < f64
i - 0.5 > i
i - 0.5 not in array
i - 1 + i
i - 1 - i64
i - 1 .. i64
i - 1 < i32
i - 1 <= f64
i - 1 <= i
i - 1 > 0.5 - 0.5
i - 1 ^ 0.5
i - bitxor(i, i)
i - ceil(f64)
i - f32
i - f32 * f32
i - f32 - i32
i - f32 / i
i - f32 ^ 0.5
i - f64
i - f64 + i32
i - f64 + i32 - f64
i - f64 / i32
i - f64 ^ i64
i - find(array, true)
i - float(0.5)
i - floor(1)
i - half(f64)
i - i
i - i + f32
i - i32
i - i32 + 0.5
i - i32 - f32
i - i32 - i32
i - i64
i - i64 .. i32
i - i64 / i
i - i64 <= i32
i - i64 ^ f32
i - i64 ^ f64
i - int(i32)
i - max(i64)
i - median(array)
i - round(i32)
i - score(1)
i .. -i
i .. -i32
i .. -i64
i .. abs(1)
i .. i
i .. i32
i .. i64
i .. i64 * 1
i .. i64 + 1
i .. int(0.5)
i .. max(1)
i .. max(i)
i .. min(i)
i .. reduce(list, i64)
i .. score(1)
i .. score(i)
i / (0.5 + 1)
i / (0.5 + f64)
i / (0.5 + i)
i / (0.5 - f32)
i / (i + f32)
i / -1
i / -f32
i / -f64
i / -i32
i / 0.5 * 1
i / 0.5 * f64
i / 0.5 / f64
i / 0.5 == nil != false
i / 0.5 >= f32
i / 0.5 ^ i32
i / 1 ** i32
i / 1 <= i64
i / 1 > i
i / abs(i)
i / bitnot(i64)
i / count(array, false)
i / f32
i / f32 != i64 ? 1 : list
i / f32 >= len(array)
i / f64
i / f64 * f64
i / f64 ^ i32
i / float(0.5)
i / float(1)
i / float(f64)
i / floor(1)
i / floor(i32)
i / i
i / i ** 1
i / i / i
i / i < i32
i / i ^ 1
i / i32
i / i32 / 1
i / i64
i / i64 * f32
i / i64 / f64
i / max(0.5)
i / mean(array)
i / min(f32)
i / min(i64)
i / score(1)
i < -(f32 * 1)
i < --f64
i < -i32
i < -i64
i < 0.5 != nil
i < 0.5 + f64
i < 0.5 == ok
i < 1 / 0.5
i < 1 == nil
i < 1 ? array : score
i < 1 ^ i64
i < abs(i32)
i < f32
i < f32 && ok
i < f32 * 0.5
i < f32 * i64
i < f32 ** i
i < f32 ** i32
i < f32 + 1
i < f32 + array[i64]
i < f32 / 0.5
i < f32 ? "bar" : div
i < f32 || ok
i < f64
i < f64 - 1
i < float(f64)
i < floor(f32)
i < half(0.5)
i < half(1)
i < half(f64)
i < i
i < i != true
i < i ** 1
i < i / i64
i < i ? score : list
i < i32
i < i32 * f32
i < i32 + 1
i < i64
i < i64 ^ f32
i < max(0.5)
i < reduce(array, #)
i <= -0.5
i <= -1
i <= -f64
i <= -i
i <= -i32
i <= -i64
i <= 0.5 * f32
i <= 0.5 + 0.5
i <= 0.5 / 1
i <= 0.5 / f64
i <= 0.5 == ok
i <= 0.5 ? i : ok
i <= 0.5 ? nil : i32
i <= 0.5 ^ f32
i <= 1 != nil
i <= 1 && ok
i <= 1 * 0.5
i <= 1 ** i
i <= 1 + f64
i <= 1 - f32
i <= 1 ? 0.5 : f32
i <= 1 ? 0.5 : list
i <= 1 ? list : div
i <= 1 ^ f32
i <= abs(0.5)
i <= ceil(1)
i <= f32
i <= f32 - 0.5
i <= f32 ? array : nil
i <= f64
i <= float(0.5)
i <= float(f32)
i <= half(1)
i <= half(f64)
i <= i
i <= i != nil
i <= i * f32
i <= i ** f64
i <= i - 0.5
i <= i - 1
i <= i / i
i <= i ^ 1
i <= i32
i <= i32 - f64
i <= i32 - i
i <= i32 == ok
i <= i32 ? array : false
i <= i32 ? greet : foo
i <= i32 || false ? f32 : i32
i <= i64
i <= i64 * i
i <= i64 + f64
i <= len(list)
i <= max(0.5)
i <= max(f32, i32)
i <= round(f32)
i <= round(i32)
i <= score(1)
i == -f32
i == -f64
i == -i
i == -i32
i == -i64
i == 0.5 ** f64
i == 0.5 == ok
i == 0.5 ? "foo" : f64
i == 1 * 0.5
i == 1 ** i64
i == 1 / 0.5
i == 1 / f32
i == 1 ? f32 : 1
i == 1 ? f64 : f64
i == 1 ? greet : score
i == abs(i64)
i == bitnot(1)
i == f32
i == f32 + i
i == f32 == nil
i == f32 ? foo : foo
i == f32 ^ i32
i == f64
i == f64 + i32
i == f64 - i
i == f64 ? i64 : div
i == f64 ? score : foo
i == f64 and ok
i == findIndex(list, true)
i == float(0.5)
i == floor(f32)
i == floor(i32)
i == half(0.5)
i == half(f64)
i == i
i == i + 0.5
i == i - i32
i == i == true
i == i ? add : i32
i == i ? i32 : add
i == i and ok
i == i32
i == i32 * 0.5
i == i32 ** 0.5
i == i32 + 0.5
i == i32 + i64
i == i32 ^ f32
i == i64
i == i64 * 0.5
i == i64 * f32
i == i64 ** 0.5
i == i64 == nil
i == i64 == ok
i == i64 ? list : div
i == len("bar")
i == nil ? 0.5 : div
i == nil ? div : i32
i == nil and add != nil
i == reduce(array, #)
i == reduce(array, 0.5)
i == score(1)
i == score(i)
i > -f32
i > -f64
i > -i
i > -i32
i > 0.5 - 0.5
i > 0.5 ^ i64
i > 0.5 or ok
i > 0.5 || ok
i > 1 != ok
i > 1 % i64
i > 1 ** i32
i > 1 == ok
i > 1 ? greet : nil
i > 1 ? score : 0.5
i > 1 ? true : greet
i > bitnot(1)
i > bitor(1, i32)
i > count(array, true)
i > f32
i > f32 ** i32
i > f32 - f64
i > f32 ^ 1
i > f64
i > f64 != ok
i > f64 * 1
i > f64 * f32
i > f64 ** i32
i > f64 ? foo : array
i > f64 ? greet : "bar"
i > first(array)
i > floor(f64)
i > i
i > i % i32
i > i ** i
i > i + i
i > i ? f32 : i32
i > i32
i > i32 * 1
i > i32 * i32
i > i32 + 1
i > i32 == ok
i > i64
i > i64 && f32 < 0.5
i > i64 + 0.5
i > i64 - 0.5
i > i64 - i
i > int(f32)
i > len("bar")
i > reduce(list, i32)
i >= -0.5
i >= -1
i >= -f32
i >= -i
i >= -i32
i >= -i64
i >= 0.5 / 1
i >= 0.5 ? i64 : array
i >= 0.5 ? nil : ok
i >= 0.5 ^ i
i >= 1 * i64
i >= 1 + f32
i >= 1 == nil
i >= 1 ? f32 : nil
i >= 1 ? ok : false
i >= 1 ^ f64
i >= bitnot(i)
i >= f32
i >= f32 ? f32 : i
i >= f32 ? true : list
i >= f64
i >= f64 * 0.5
i >= f64 - 1
i >= first(array)
i >= float(0.5)
i >= float(1)
i >= get(array, i64)
i >= half(f64)
i >= i
i >= i * 1
i >= i ** f32
i >= i ? foo : div
i >= i32
i >= i32 ** i64
i >= i32 ? f32 : div
i >= i32 ^ 1
i >= i64
i >= int(0.5)
i >= min(0.5)
i >= reduce(array, f64)
i >= reduce(array, i)
i >= reduce(list, 1)
i >= round(1)
i >= score(1)
i >= score(i)
i ^ (1 % i)
i ^ (1 * f64)
i ^ (1 - 0.5)
i ^ (f32 - f64)
i ^ (f64 - 1)
i ^ (i + 0.5)
i ^ (i + i64)
i ^ (i - f32)
i ^ (i32 * i32)
i ^ (i32 + 1)
i ^ (i32 / f32)
i ^ (i32 / i)
i ^ (i64 * 1)
i ^ -1
i ^ -f32
i ^ -f64
i ^ -i
i ^ 0.5 ** 0.5
i ^ 0.5 + i32
i ^ 0.5 < f64
i ^ 0.5 < i
i ^ 0.5 <= i64
i ^ 0.5 > f64
i ^ 0.5 >= f32
i ^ 0.5 >= reduce(array, #)
i ^ 0.5 ^ f32
i ^ 0.5 ^ i64
i ^ 1 * f64
i ^ 1 / i
i ^ 1 >= f32
i ^ 1 ^ i
i ^ 1 not in array
i ^ bitnot(i64 + 1)
i ^ bitnot(min(i))
i ^ ceil(0.5)
i ^ f32
i ^ f32 ** 1
i ^ f32 < i
i ^ f32 <= -f32
i ^ f64
i ^ f64 ** 0.5
i ^ f64 - f64
i ^ f64 / i32
i ^ f64 <= f32
i ^ f64 == i
i ^ f64 > f32
i ^ find(array, ok)
i ^ floor(i32)
i ^ half(0.5)
i ^ half(1)
i ^ half(f64)
i ^ i
i ^ i * i
i ^ i * i64
i ^ i ** i
i ^ i / i
i ^ i32
i ^ i32 / f64
i ^ i32 in array
i ^ i64
i ^ i64 != f32 + 1
i ^ i64 ** f32
i ^ last(array)
i ^ median(array)
i ^ min(i32, 1)
i ^ reduce(array, #)
i ^ round(i32)
i ^ score(1)
i in 1 .. i
i in array
i in array != nil
i in array ? nil : 1
i in groupBy(list, #)
i in groupBy(list, foo)
i in map(array, #)
i in map(array, i64)
i not in 1 .. 1
i not in array
i not in groupBy(array, #)
i not in groupBy(list, #)
i not in i64 .. 1
i not in i64 .. i64
i not in map(array, #)
i not in map(list, i32)
i32
i32 != -0.5
i32 != -1
i32 != -f32
i32 != -i
i32 != -i32
i32 != -i64
i32 != 0.5 - 0.5
i32 != 0.5 - i32
i32 != 0.5 / f32
i32 != 0.5 ^ 0.5
i32 != 0.5 ^ i64
i32 != 0.5 || ok
i32 != 1 % i64
i32 != 1 && ok
i32 != 1 * f32
i32 != 1 ? "foo" : array
i32 != 1 ? greet : "foo"
i32 != array[i64]
i32 != bitnot(i)
i32 != bitnot(i64)
i32 != ceil(1)
i32 != ceil(f64)
i32 != count(array, false)
i32 != f32
i32 != f32 == true
i32 != f32 ? false : 0.5
i32 != f32 ? i : 0.5
i32 != f64
i32 != f64 ** i
i32 != f64 - 1
i32 != f64 ? 1 : add
i32 != findLastIndex(array, false)
i32 != get(array, 1)
i32 != half(1)
i32 != i
i32 != i + 1
i32 != i32
i32 != i32 ** 0.5
i32 != i32 + 0.5
i32 != i32 ^ i64
i32 != i64
i32 != i64 * i64
i32 != i64 / 0.5
i32 != i64 / f32
i32 != len(list)
i32 != max(f64)
i32 != min(1)
i32 != min(i32)
i32 != nil != false
i32 != nil ? f64 : "foo"
i32 != reduce(array, #)
i32 != reduce(array, i)
i32 != reduce(list, f32)
i32 != round(1)
i32 % -1
i32 % -i32
i32 % 1 % i32
i32 % 1 * f32
i32 % 1 * i
i32 % 1 * i32
i32 % 1 .. i
i32 % 1 / 0.5
i32 % 1 / i32
i32 % 1 > i
i32 % array[i64]
i32 % get(array, 1)
i32 % i
i32 % i != i
i32 % i < i
i32 % i32
i32 % i32 != f64
i32 % i32 * i64
i32 % i32 == i32
i32 % i32 >= i64
i32 % i64
i32 % i64 % i
i32 % i64 * i64
i32 % i64 + i
i32 % i64 .. i
i32 % i64 / i
i32 % i64 == f64
i32 % max(i32)
i32 % reduce(array, #)
i32 % score(1)
i32 * (1 + f32)
i32 * (1 + f64)
i32 * (f32 + 1)
i32 * (f32 - i)
i32 * (f64 + 0.5)
i32 * (f64 + i)
i32 * (i - f32)
i32 * (i32 + i64)
i32 * (i32 - 1)
i32 * (i32 - f64)
i32 * -0.5
i32 * -1
i32 * -f32
i32 * -i32
i32 * -i64
i32 * 0.5 * 0.5
i32 * 0.5 / 0.5
i32 * 0.5 / 1
i32 * 0.5 / i32
i32 * 0.5 == f64
i32 * 0.5 == i64
i32 * 0.5 ^ f64
i32 * 0.5 ^ i32
i32 * 1 * i
i32 * 1 ** i64
i32 * 1 + f64
i32 * 1 - i64
i32 * 1 > half(0.5)
i32 * 1 ^ 1
i32 * abs(i32)
i32 * bitnot(i32)
i32 * ceil(1)
i32 * f32
i32 * f32 + f32
i32 * f32 / i
i32 * f32 <= f64
i32 * f32 <= i32
i32 * f32 ^ f32
i32 * f64
i32 * f64 * 1
i32 * f64 >= f32
i32 * first(array)
i32 * float(f32)
i32 * float(f64)
i32 * floor(f64)
i32 * half(0.5)
i32 * half(1)
i32 * i
i32 * i / -i
i32 * i / f32
i32 * i / i64
i32 * i < f32
i32 * i32
i32 * i32 != f64
i32 * i32 % i64 / i
i32 * i32 / i64
i32 * i32 < i64
i32 * i32 >= f32
i32 * i64
i32 * i64 % 1
i32 * i64 % 1 % 1
i32 * i64 ** i64
i32 * i64 / f32
i32 * i64 < i
i32 * len("foo")
i32 * max(i32)
i32 * max(i64)
i32 * median(array)
i32 * min(0.5)
i32 * min(i)
i32 * reduce(array, #)
i32 * round(i)
i32 * score(1)
i32 * score(i)
i32 ** (0.5 - i32)
i32 ** (1 * i64)
i32 ** (1 / 0.5)
i32 ** (f32 * i64)
i32 ** (i % i32)
i32 ** (i - i)
i32 ** (i - i32)
i32 ** (i / 0.5)
i32 ** (i32 / i64)
i32 ** (i64 + 0.5)
i32 ** (i64 - 1)
i32 ** -1
i32 ** -f64
i32 ** -i
i32 ** -i64
i32 ** 0.5 * i64
i32 ** 0.5 - f64
i32 ** 0.5 / reduce(array, #)
i32 ** 0.5 ^ i
i32 ** 1 ** i64
i32 ** 1 + f32
i32 ** 1 / i64
i32 ** 1 <= i
i32 ** 1 ^ i64
i32 ** 1 in array
i32 ** array[1]
i32 ** array[i64]
i32 ** bitnot(i64)
i32 ** ceil(1)
i32 ** ceil(f64)
i32 ** f32
i32 ** f32 / score(1)
i32 ** f32 < f32
i32 ** f32 <= i
i32 ** f32 == f32
i32 ** f64
i32 ** f64 == f32
i32 ** f64 > i
i32 ** find(array, ok)
i32 ** float(i32)
i32 ** half(0.5)
i32 ** half(1)
i32 ** half(f64)
i32 ** i
i32 ** i * f64
i32 ** i ** i
i32 ** i ^ i
i32 ** i32
i32 ** i32 ^ i64
i32 ** i64
i32 ** int(1)
i32 ** int(i32)
i32 ** len("foo")
i32 ** len(list)
i32 ** max(f32, i32)
i32 ** min(0.5)
i32 ** min(i64)
i32 ** reduce(array, 1)
i32 ** reduce(array, i64)
i32 ** reduce(list, i64)
i32 ** round(i64)
i32 ** sum(array)
i32 + -0.5
i32 + -1
i32 + -i
i32 + -i32
i32 + -i64
i32 + 0.5 != f32
i32 + 0.5 != i32
i32 + 0.5 * i
i32 + 0.5 + 0.5
i32 + 0.5 + 1
i32 + 0.5 + f32
i32 + 0.5 + f64
i32 + 0.5 + i
i32 + 0.5 + i64
i32 + 0.5 / i64
i32 + 0.5 <= -f32
i32 + 1 % 1
i32 + 1 + i64
i32 + 1 - f32
i32 + 1 - i
i32 + 1 - i64
i32 + 1 / i
i32 + 1 ^ f32
i32 + abs(f32)
i32 + array[i64]
i32 + bitnot(i32)
i32 + ceil(i)
i32 + f32
i32 + f32 / i
i32 + f32 < i32
i32 + f32 <= i64
i32 + f64
i32 + f64 * 1
i32 + f64 * i32
i32 + f64 > i32
i32 + f64 ^ 0.5
i32 + f64 ^ i32
i32 + findIndex(list, true)
i32 + floor(0.5)
i32 + floor(f64)
i32 + i
i32 + i + f64
i32 + i + i64
i32 + i - 0.5
i32 + i - i64
i32 + i <= i32
i32 + i > i64
i32 + i32
i32 + i32 + f64
i32 + i32 <= i + i64
i32 + i32 > i
i32 + i32 > i32
i32 + i64
i32 + i64 % i32
i32 + i64 ** 1
i32 + i64 - 0.5
i32 + i64 - f32
i32 + i64 / 0.5
i32 + i64 ^ 1
i32 + int(i64)
i32 + len("bar")
i32 + min(i32)
i32 + reduce(array, #)
i32 + round(f32)
i32 + round(i32)
i32 + score(i)
i32 - -0.5
i32 - -1
i32 - -f32
i32 - -i
i32 - 0.5 * f32
i32 - 0.5 + half(0.5)
i32 - 0.5 - i32
i32 - 0.5 <= f32
i32 - 0.5 ^ 0.5
i32 - 1 ** i
i32 - 1 + 0.5
i32 - 1 > -i64
i32 - abs(i32)
i32 - abs(i64)
i32 - array[i]
i32 - bitushr(i32, i64)
i32 - div(1, i)
i32 - div(i, i)
i32 - f32
i32 - f32 * 0.5
i32 - f32 + i32
i32 - f32 - int(f64)
i32 - f32 / i32
i32 - f32 < i64
i32 - f32 <= f32
i32 - f32 <= i32
i32 - f32 > i
i32 - f32 >= f32
i32 - f64
i32 - f64 + f32
i32 - float(0.5)
i32 - float(1)
i32 - float(f64)
i32 - floor(1)
i32 - floor(f64)
i32 - get(array, i)
i32 - half(0.5)
i32 - half(f64)
i32 - i
i32 - i ** i64
i32 - i + i32
i32 - i / 0.5
i32 - i == f32
i32 - i > f64
i32 - i > i
i32 - i >= i64
i32 - i32
i32 - i32 != i64
i32 - i32 * 1
i32 - i32 * i32
i32 - i32 + 1
i32 - i32 < i32
i32 - i32 > i64
i32 - i32 > i64 / i
i32 - i64
i32 - i64 != -f32
i32 - i64 / 1
i32 - i64 == f64
i32 - len(array)
i32 - len(list)
i32 - max(f32)
i32 - score(1)
i32 .. -i64
i32 .. abs(i64)
i32 .. bitnot(i64)
i32 .. bitushr(i, 1)
i32 .. count(array, true)
i32 .. div(i, 1)
i32 .. i
i32 .. i32
i32 .. i64
i32 .. int(f32)
i32 .. len("foo")
i32 .. max(1)
i32 .. max(i32)
i32 .. max(i32, 0.5)
i32 .. score(i)
i32 / (1 + 1)
i32 / (1 + i64)
i32 / (f64 - i64)
i32 / (i32 + i64)
i32 / (i64 + 0.5)
i32 / -0.5
i32 / -f32
i32 / -i
i32 / -i32
i32 / -i64
i32 / 0.5 * i
i32 / 0.5 * i / 1
i32 / 0.5 + i64
i32 / 0.5 - i32
i32 / 0.5 / i32
i32 / 0.5 / i64
i32 / 0.5 >= i64
i32 / 0.5 ^ 1
i32 / 0.5 ^ f64
i32 / 1 != i
i32 / 1 * i64
i32 / 1 ** 1
i32 / 1 ^ 0.5
i32 / abs(0.5)
i32 / abs(1)
i32 / abs(f64)
i32 / abs(i32)
i32 / array[1]
i32 / ceil(i32)
i32 / f32
i32 / f32 ** 1
i32 / f32 / i64
i32 / f32 <= i32
i32 / f32 <= i64
i32 / f32 >= i32 == false
i32 / f64
i32 / f64 != f64
i32 / f64 != i64
i32 / f64 * 1
i32 / f64 - i32
i32 / f64 == i64
i32 / f64 >= f32
i32 / find(array, ok)
i32 / float(f32)
i32 / floor(1)
i32 / floor(f64)
i32 / half(0.5)
i32 / i
i32 / i * i32
i32 / i ^ i32
i32 / i32
i32 / i32 * f64
i32 / i32 / i64
i32 / i32 <= i64
i32 / i64
i32 / i64 ** f32
i32 / i64 ^ 0.5
i32 / int(1)
i32 / len("foo")
i32 / max(1)
i32 / max(i)
i32 / min(f32)
i32 / reduce(array, #)
i32 / score(i)
i32 < -f32
i32 < -f64
i32 < -i32
i32 < 0.5 ** i32
i32 < 0.5 - 1
i32 < 0.5 - f32
i32 < 0.5 / 1
i32 < 0.5 == nil
i32 < 0.5 ? "foo" : half
i32 < 0.5 ? foo : 1
i32 < 0.5 or ok
i32 < 0.5 || ok
i32 < 1 * f32
i32 < 1 + i64
i32 < 1 / f32
i32 < 1 ^ i
i32 < abs(f64)
i32 < f32
i32 < f32 * i
i32 < f32 - 0.5
i32 < f32 - 1
i32 < f64
i32 < f64 * i64
i32 < float(reduce(array, f32))
i32 < get(array, i32)
i32 < get(array, i64)
i32 < half(1)
i32 < half(f64)
i32 < i
i32 < i ** i64
i32 < i + 0.5
i32 < i / i32
i32 < i ? score : score
i32 < i32
i32 < i32 % i
i32 < i32 ** 1
i32 < i32 - f32
i32 < i32 ^ i64
i32 < i64
i32 < i64 ** 0.5
i32 < i64 + f32
i32 < i64 / f64
i32 < int(0.5)
i32 < last(array)
i32 < min(1)
i32 < min(f64)
i32 < min(i32)
i32 < score(1)
i32 < score(i)
i32 <= -0.5
i32 <= -f32
i32 <= -i
i32 <= -i32
i32 <= -i64
i32 <= 0.5 - f64
i32 <= 0.5 == nil
i32 <= 0.5 ? i32 : greet
i32 <= 0.5 ? i32 : half
i32 <= 0.5 ^ i64
i32 <= 0.5 and ok
i32 <= 1 + i32
i32 <= 1 + i64
i32 <= 1 ^ 0.5
i32 <= 1 and ok
i32 <= 1 || i32 >= i32
i32 <= abs(1)
i32 <= f32
i32 <= f32 != ok
i32 <= f64
i32 <= f64 != ok
i32 <= f64 * i
i32 <= f64 == ok
i32 <= f64 ^ f64
i32 <= findIndex(array, true)
i32 <= float(i32)
i32 <= floor(0.5)
i32 <= half(0.5)
i32 <= half(1)
i32 <= half(f64)
i32 <= i
i32 <= i * 1
i32 <= i * i64
i32 <= i - 0.5
i32 <= i32
i32 <= i32 != true
i32 <= i64
i32 <= i64 / 1
i32 <= len("foo")
i32 <= max(i64)
i32 <= mean(array)
i32 <= round(0.5)
i32 <= score(1)
i32 <= score(i)
i32 == -0.5
i32 == -1
i32 == -f32
i32 == -f64
i32 == -i
i32 == 0.5 != false
i32 == 0.5 * f32
i32 == 0.5 / 0.5
i32 == 1 % 1
i32 == 1 + f32
i32 == 1 - i
i32 == 1 ? div : div
i32 == 1 ^ 0.5
i32 == 1 ^ f64
i32 == abs(f64)
i32 == abs(i)
i32 == bitnot(1)
i32 == bitnot(i)
i32 == ceil(1)
i32 == count(list, ok)
i32 == f32
i32 == f32 * i32
i32 == f32 ** 1
i32 == f32 - f32
i32 == f32 ? f64 : list
i32 == f32 ? i64 : true
i32 == f32 ? score : "bar"
i32 == f64
i32 == f64 ** 0.5
i32 == find(array, 0.5 == i64)
i32 == first(array)
i32 == floor(f64)
i32 == half(f64)
i32 == i
i32 == i ** f64
i32 == i ? half : 1
i32 == i ? i : "bar"
i32 == i32
i32 == i32 && i == i
i32 == i32 - 1
i32 == i32 - i64
i32 == i64
i32 == i64 * f32
i32 == i64 ? "foo" : 1
i32 == i64 or ok
i32 == int(f64)
i32 == int(i)
i32 == nil ? f32 : 0.5
i32 == reduce(array, #)
i32 == round(i32)
i32 == round(i64)
i32 == score(1)
i32 > -0.5
i32 > -f64
i32 > -i32
i32 > 0.5 != true
i32 > 0.5 * f64
i32 > 0.5 ** 0.5
i32 > 0.5 ** 1
i32 > 0.5 ** i
i32 > 0.5 - i
i32 > 0.5 / 1
i32 > 0.5 == ok
i32 > 0.5 ^ 1
i32 > 0.5 || ok
i32 > 1 * f64
i32 > 1 * i32
i32 > 1 + i64
i32 > 1 ? f32 : f64
i32 > 1 ? i : "bar"
i32 > 1 ? i64 : div
i32 > ceil(0.5)
i32 > ceil(1)
i32 > count(array, ok)
i32 > f32
i32 > f32 * i64
i32 > f32 + 0.5
i32 > f32 + 1
i32 > f32 - f32
i32 > f32 - i32
i32 > f32 ^ 0.5
i32 > f64
i32 > f64 ** i32
i32 > f64 + f64
i32 > get(array, i32)
i32 > half(1)
i32 > half(half(1))
i32 > i
i32 > i != ok
i32 > i + f32
i32 > i ? i : i
i32 > i ^ i32
i32 > i32
i32 > i32 - i
i32 > i32 == nil ? score : i
i32 > i32 ? score : 1
i32 > i32 ^ 1
i32 > i32 ^ i32
i32 > i64
i32 > i64 != false
i32 > i64 ** f32
i32 > i64 / 1
i32 > i64 == ok
i32 > i64 || ok
i32 > int(1)
i32 > int(i64)
i32 > min(i32)
i32 > reduce(array, #)
i32 > round(i64)
i32 > score(i)
i32 >= -1
i32 >= -f32
i32 >= -f64
i32 >= -i
i32 >= -i64
i32 >= 0.5 != not true
i32 >= 0.5 == true
i32 >= 0.5 ? 0.5 : half
i32 >= 0.5 ^ 0.5
i32 >= 0.5 ^ i32
i32 >= 1 % i
i32 >= 1 * 0.5
i32 >= 1 * i32
i32 >= 1 + i64
i32 >= 1 - 1
i32 >= 1 == ok
i32 >= 1 ? 1 : false
i32 >= 1 ? add : 1
i32 >= abs(0.5)
i32 >= abs(f32)
i32 >= bitnot(1 + i)
i32 >= bitnot(i64)
i32 >= ceil(1)
i32 >= ceil(f32)
i32 >= count(list, true)
i32 >= f32
i32 >= f32 ** f32
i32 >= f32 ^ 1
i32 >= f64
i32 >= f64 != false
i32 >= f64 ** f64
i32 >= f64 / i64
i32 >= f64 ? half : f64
i32 >= f64 ^ f64
i32 >= float(0.5)
i32 >= floor(1)
i32 >= floor(f32)
i32 >= half(0.5)
i32 >= i
i32 >= i % 1
i32 >= i % i64
i32 >= i / i32
i32 >= i / i64
i32 >= i == ok
i32 >= i32
i32 >= i32 ** i32
i32 >= i64
i32 >= i64 != false
i32 >= i64 - i64
i32 >= i64 / i32
i32 >= i64 ? 0.5 : 0.5
i32 >= i64 ? div : half
i32 >= i64 ? half : i64
i32 >= i64 and ok
i32 >= int(i64)
i32 >= last(array)
i32 >= min(i32)
i32 >= reduce(array, #)
i32 >= reduce(array, i64)
i32 >= reduce(list, i32)
i32 >= round(f32)
i32 >= score(1)
i32 ^ (0.5 + 1)
i32 ^ (1 - i)
i32 ^ (i + 1)
i32 ^ (i / f64)
i32 ^ (i32 + 0.5)
i32 ^ (i32 - f32)
i32 ^ (i64 + i)
i32 ^ -0.5
i32 ^ -1
i32 ^ -f64
i32 ^ -i
i32 ^ -i32
i32 ^ -i64
i32 ^ 0.5 != f32
i32 ^ 0.5 != f64
i32 ^ 0.5 * i
i32 ^ 0.5 ** i64
i32 ^ 0.5 - f32
i32 ^ 0.5 / i32
i32 ^ 0.5 == i64
i32 ^ 0.5 >= f64
i32 ^ 1 ** i32
i32 ^ 1 + i32
i32 ^ 1 - f64
i32 ^ 1 < f64
i32 ^ 1 ^ (1 + i64)
i32 ^ 1 ^ f32
i32 ^ array[i64]
i32 ^ f32
i32 ^ f32 / bitnot(1)
i32 ^ f32 >= max(f64)
i32 ^ f64
i32 ^ f64 + i
i32 ^ find(array, true)
i32 ^ first(array)
i32 ^ float(i64)
i32 ^ i
i32 ^ i * f64
i32 ^ i + i64
i32 ^ i <= f32
i32 ^ i32
i32 ^ i32 * f64
i32 ^ i32 ** i
i32 ^ i64
i32 ^ i64 == f64
i32 ^ i64 > -f64
i32 ^ len(list)
i32 ^ mean(array)
i32 ^ min(i)
i32 ^ reduce(array, #)
i32 ^ reduce(list, 1)
i32 in [0.5]
i32 in array
i32 in array || ok
i32 in groupBy(array, #)
i32 in groupBy(array, f32)
i32 in groupBy(list, #)
i32 in groupBy(list, #?.Bar)
i32 in groupBy(list, foo).i
i32 in i32 .. 1
i32 in i32 .. i64
i32 in map(array, #)
i32 in map(list, 0.5)
i32 in map(list, i32)
i32 not in 1 .. i
i32 not in array
i32 not in array ? array : array
i32 not in filter(array, ok)
i32 not in groupBy(list, #)
i64
i64 != -1
i64 != -i
i64 != -i64
i64 != 0.5 && ok
i64 != 0.5 * 0.5
i64 != 0.5 * i
i64 != 0.5 + 0.5
i64 != 0.5 + i
i64 != 0.5 - 0.5
i64 != 0.5 / i64
i64 != 0.5 ? i : 1
i64 != 0.5 ^ i32
i64 != 1 * f64
i64 != 1 - 1
i64 != abs(f64)
i64 != array[i64]
i64 != bitnot(i32)
i64 != f32
i64 != f32 + i64
i64 != f64
i64 != f64 * 1
i64 != f64 == true
i64 != f64 or i64 <= f32
i64 != findIndex(array, ok)
i64 != float(1)
i64 != floor(i)
i64 != get(array, i)
i64 != half(0.5)
i64 != half(1)
i64 != i
i64 != i % 1
i64 != i + 1
i64 != i / 0.5
i64 != i ? f32 : true
i64 != i32
i64 != i32 ? 0.5 : nil
i64 != i32 ? f64 : greet
i64 != i32 ^ i
i64 != i32 || ok
i64 != i64
i64 != i64 - 0.5
i64 != len("bar")
i64 != len(list)
i64 != max(0.5)
i64 != min(1)
i64 != min(1, f32)
i64 != min(f32)
i64 != min(i)
i64 != nil != ok
i64 != nil ? div : 1
i64 != nil ? greet : i
i64 != nil ? i : i
i64 != nil ? i64 : false
i64 != score(1)
i64 != score(i)
i64 % -i
i64 % 1 % 1
i64 % 1 * i
i64 % 1 < i32
i64 % 1 >= f64
i64 % 1 >= i32
i64 % abs(i32)
i64 % array[i32]
i64 % i
i64 % i * i
i64 % i >= i
i64 % i32
i64 % i32 / f64
i64 % i32 <= f64
i64 % i64
i64 % i64 % 1
i64 % i64 .. i64
i64 % i64 == i64
i64 % int(i32)
i64 % len("bar")
i64 % max(i)
i64 % min(1)
i64 % score(1)
i64 * (0.5 + f64)
i64 * (1 - i64)
i64 * (f32 - f32)
i64 * (f64 + f32)
i64 * (i + 0.5)
i64 * (i + f64)
i64 * (i32 + f64)
i64 * -0.5
i64 * -1
i64 * -f32
i64 * -i32
i64 * 0.5 * i32
i64 * 0.5 ** 0.5
i64 * 0.5 - f32
i64 * 0.5 / 1
i64 * 0.5 >= f32
i64 * 1 % 1
i64 * 1 * 0.5
i64 * 1 * f64
i64 * 1 ** 1
i64 * 1 - i64
i64 * 1 .. i32
i64 * 1 / i64
i64 * 1 <= f64
i64 * 1 == 0.5 != true
i64 * 1 == f32
i64 * 1 > 1 - i64
i64 * 1 > f64
i64 * 1 ^ i32
i64 * add(1, 1)
i64 * ceil(1)
i64 * ceil(i)
i64 * ceil(i64)
i64 * count(array, false)
i64 * f32
i64 * f32 * f32
i64 * f32 ** 1
i64 * f32 / f32
i64 * f32 / i
i64 * f32 / i32
i64 * f32 not in array
i64 * f64
i64 * f64 + i32
i64 * f64 - f64
i64 * f64 / f64
i64 * f64 < f64
i64 * f64 > f64
i64 * f64 ^ i32
i64 * findIndex(array, ok)
i64 * float(i)
i64 * float(i64)
i64 * half(0.5)
i64 * i
i64 * i - -f64
i64 * i <= f64
i64 * i32
i64 * i32 != i32
i64 * i32 * 1
i64 * i32 * i
i64 * i32 / 0.5
i64 * i32 ^ i
i64 * i64
i64 * i64 % i64
i64 * i64 * i64
i64 * i64 ** i
i64 * i64 / f32
i64 * i64 > i32
i64 * int(1)
i64 * int(i)
i64 * max(1)
i64 * max(i64)
i64 * min(1)
i64 * min(i32)
i64 * reduce(array, #)
i64 * reduce(list, 0.5)
i64 * reduce(list, 1)
i64 * round(i)
i64 * score(1)
i64 ** (0.5 + 0.5)
i64 ** (0.5 / 1)
i64 ** (1 % 1)
i64 ** (1 * 1)
i64 ** (1 - f32)
i64 ** (f32 + 1)
i64 ** (f32 / 0.5)
i64 ** (f64 - 0.5)
i64 ** (i * i64)
i64 ** (i / 1)
i64 ** (i64 % i)
i64 ** (i64 / i)
i64 ** -0.5
i64 ** -1
i64 ** -f32
i64 ** 0.5 != i32
i64 ** 0.5 <= f32
i64 ** 0.5 <= i
i64 ** 1 + i32
i64 ** 1 - f32
i64 ** 1 / i64
i64 ** 1 >= f32
i64 ** bitnot(i32)
i64 ** ceil(i32)
i64 ** count(array, false)
i64 ** f32
i64 ** f32 * min(0.5)
i64 ** f64
i64 ** f64 ** f64
i64 ** f64 not in array
i64 ** f64 not in array ? f32 : greet
i64 ** floor(f32)
i64 ** half(1)
i64 ** i
i64 ** i != f32
i64 ** i * f32
i64 ** i <= -i
i64 ** i == f64
i64 ** i ^ f32
i64 ** i32
i64 ** i32 != i64
i64 ** i32 * i ^ i
i64 ** i32 not in array
i64 ** i64
i64 ** i64 - i64
i64 ** i64 in array
i64 ** max(1)
i64 ** min(0.5)
i64 ** min(1)
i64 ** min(i32, 1)
i64 ** reduce(array, #)
i64 + -1
i64 + -i
i64 + -i64
i64 + 0.5 ** f32
i64 + 0.5 + i32
i64 + 0.5 + i64
i64 + 0.5 - f64
i64 + 0.5 <= bitnand(1, 1)
i64 + 0.5 <= f64
i64 + 0.5 == f32
i64 + 1 != f64
i64 + 1 % i64
i64 + 1 + f64
i64 + 1 <= f32
i64 + array[i64]
i64 + array[i]
i64 + f32
i64 + f32 * f64
i64 + f32 / i64
i64 + f64
i64 + f64 * 0.5
i64 + f64 ** 0.5
i64 + f64 > f32
i64 + float(f32)
i64 + float(i32)
i64 + half(0.5)
i64 + i
i64 + i % 1
i64 + i * 0.5
i64 + i + f32
i64 + i - i32
i64 + i / i32
i64 + i == 0.5 - i32
i64 + i ^ f32
i64 + i ^ f64
i64 + i32
i64 + i32 % i64
i64 + i32 - 0.5
i64 + i32 == f64
i64 + i64
i64 + i64 - 0.5
i64 + reduce(array, #)
i64 + score(i)
i64 - -1
i64 - -f32
i64 - -i32
i64 - -i64
i64 - 0.5 + f32
i64 - 0.5 / i64
i64 - 0.5 <= i
i64 - 0.5 ^ f32
i64 - 1 ** 1
i64 - 1 < i
i64 - 1 == i32
i64 - 1 > f32
i64 - 1 >= i
i64 - 1 not in array
i64 - ceil(1)
i64 - f32
i64 - f32 != f32
i64 - f32 - 1
i64 - f32 - i
i64 - f32 / 1
i64 - f32 < i64
i64 - f32 >= f64
i64 - f64
i64 - f64 != i
i64 - f64 ** f32
i64 - f64 ** i32
i64 - f64 + f32
i64 - f64 + i32
i64 - f64 >= f64
i64 - float(0.5)
i64 - half(1)
i64 - half(f64)
i64 - i
i64 - i * 1
i64 - i + i64
i64 - i - 1
i64 - i .. i64
i64 - i < i32
i64 - i > 1 - 0.5
i64 - i >= f64
i64 - i ^ i64
i64 - i not in array
i64 - i32
i64 - i32 - i64
i64 - i32 .. i64
i64 - i32 > i
i64 - i32 >= i
i64 - i64
i64 - i64 > f32
i64 - int(i)
i64 - len("foo")
i64 - max(0.5)
i64 - min(f32)
i64 - min(f64)
i64 - min(i)
i64 - reduce(array, #)
i64 - reduce(array, i64)
i64 - round(1)
i64 - score(1)
i64 - score(i)
i64 .. -1
i64 .. -i
i64 .. -i32
i64 .. -i64
i64 .. 1 * i64
i64 .. 1 - 1
i64 .. 1 - i
i64 .. 1 - i64
i64 .. abs(i)
i64 .. bitnot(i32)
i64 .. count(array, false)
i64 .. get(array, 1)
i64 .. i
i64 .. i * i
i64 .. i + 1
i64 .. i == list
i64 .. i32
i64 .. i32 * 1
i64 .. i64
i64 .. i64 * i32
i64 .. i64 + i
i64 .. i64 - i
i64 .. int(0.5)
i64 .. int(f32)
i64 .. int(i64)
i64 .. min(i32)
i64 .. min(i64, 0.5)
i64 .. reduce(array, #)
i64 .. score(1)
i64 / (f32 + i64)
i64 / (f32 - i)
i64 / (i + 1)
i64 / (i32 + 0.5)
i64 / (i64 - i)
i64 / -0.5
i64 / -1
i64 / -f32
i64 / -f64
i64 / -i
i64 / 0.5 * f64
i64 / 0.5 - i64
i64 / 0.5 / i
i64 / 0.5 == i
i64 / 1 ** i64
i64 / 1 / i32
i64 / 1 / i64
i64 / 1 < i
i64 / 1 == f32
i64 / ceil(i)
i64 / f32
i64 / f32 - i
i64 / f32 / i64
i64 / f32 > i
i64 / f32 ^ 1
i64 / f32 ^ i
i64 / f64
i64 / f64 * i64
i64 / f64 - min(i64)
i64 / f64 / f32
i64 / f64 / i * 0.5
i64 / f64 / i32
i64 / f64 in array
i64 / float(1)
i64 / get(array, i32)
i64 / half(1)
i64 / i
i64 / i * i64
i64 / i - f64
i64 / i32
i64 / i32 != f32
i64 / i32 * f64
i64 / i32 == f64
i64 / i32 > 1 + 1
i64 / i32 >= f32
i64 / i32 >= f64
i64 / i32 ^ f32
i64 / i64
i64 / i64 + f64
i64 / i64 < i32
i64 / i64 <= f32
i64 / i64 == i32
i64 / int(1)
i64 / len(list)
i64 / max(1)
i64 / reduce(array, #)
i64 / reduce(array, 1)
i64 / round(0.5)
i64 / round(i)
i64 / score(1)
i64 / score(i)
i64 < -0.5
i64 < -1
i64 < -f32
i64 < -f64
i64 < -i
i64 < -i32
i64 < -i64
i64 < 0.5 * 0.5
i64 < 0.5 + i
i64 < 0.5 - 1
i64 < 0.5 / 0.5
i64 < 0.5 / 1
i64 < 0.5 == ok
i64 < 0.5 || false ? 1 : nil
i64 < 1 * i32
i64 < 1 ** 0.5
i64 < 1 + 0.5
i64 < 1 + i64
i64 < 1 / f32
i64 < ceil(i64)
i64 < f32
i64 < f32 * 0.5
i64 < f32 - i64
i64 < f32 ^ f32
i64 < f64
i64 < f64 && ok
i64 < f64 - f64
i64 < f64 ? score : add
i64 < float(0.5)
i64 < float(i32)
i64 < floor(0.5)
i64 < floor(i32)
i64 < half(1)
i64 < i
i64 < i % i64
i64 < i ^ 0.5
i64 < i || ok
i64 < i32
i64 < i32 + 1
i64 < i32 + i32
i64 < i32 / f32
i64 < i32 ? foo : i
i64 < i64
i64 < i64 != nil
i64 < i64 * 1
i64 < i64 * i64
i64 < i64 / f32
i64 < i64 / i
i64 < i64 ^ 1
i64 < i64 ^ i
i64 < int(f64)
i64 < len("bar")
i64 < len("foo")
i64 <= -0.5
i64 <= -1
i64 <= -f32
i64 <= -f64
i64 <= -i64
i64 <= 0.5 && ok
i64 <= 0.5 * 0.5
i64 <= 0.5 + 1
i64 <= 0.5 ? i : i32
i64 <= 1 ** i32
i64 <= 1 + 1
i64 <= 1 - 0.5
i64 <= 1 - 1
i64 <= 1 / 1
i64 <= 1 == ok
i64 <= 1 ? add : div
i64 <= 1 ? f32 : greet
i64 <= 1 ? i64 : true
i64 <= 1 ^ 1
i64 <= array[i64]
i64 <= array[i]
i64 <= bitnot(1)
i64 <= f32
i64 <= f32 ** i
i64 <= f32 ** i64
i64 <= f32 == ok
i64 <= f64
i64 <= f64 + 1
i64 <= f64 + f32
i64 <= f64 / 1
i64 <= f64 ? nil : i32
i64 <= float(1)
i64 <= floor(i)
i64 <= floor(i32)
i64 <= half(min(0.5, 1, i64))
i64 <= i
i64 <= i * 1
i64 <= i * f32
i64 <= i ** i32
i64 <= i ? greet : add
i64 <= i32
i64 <= i32 ** i32
i64 <= i32 ? list : half
i64 <= i32 ^ -1
i64 <= i64
i64 <= i64 * i
i64 <= len(list)
i64 <= max(f32)
i64 <= min(0.5)
i64 <= min(i32)
i64 <= reduce(array, i32)
i64 <= reduce(list, i64)
i64 <= round(0.5)
i64 == -1
i64 == -f32
i64 == -f64
i64 == -i
i64 == -i32
i64 == 0.5 * 1
i64 == 0.5 - f64
i64 == 0.5 == ok
i64 == 0.5 ? 0.5 : f64
i64 == 1 ** f64
i64 == 1 + 0.5
i64 == 1 / i
i64 == 1 == ok
i64 == 1 ? "foo" : i
i64 == array[1]
i64 == bitnot(i64)
i64 == ceil(i64)
i64 == f32
i64 == f32 != true
i64 == f32 + i
i64 == f32 - f32
i64 == f32 == ok
i64 == f64
i64 == f64 * f64
i64 == f64 ? 1 : nil
i64 == f64 ^ 0.5
i64 == f64 ^ f32
i64 == f64 and not true
i64 == findIndex(list, f64 <= f64)
i64 == floor(0.5)
i64 == get(array, 1)
i64 == half(1)
i64 == i
i64 == i != nil
i64 == i + i32
i64 == i ? i64 : foo
i64 == i32
i64 == i64
i64 == i64 * f32
i64 == i64 / i64
i64 == i64 ? add : 0.5
i64 == i64 ? add : greet
i64 == int(0.5)
i64 == int(1)
i64 == int(i)
i64 == len("foo")
i64 == nil != nil
i64 == reduce(array, #)
i64 == score(1)
i64 > -0.5
i64 > -f32
i64 > -f64
i64 > 0.5 + f32
i64 > 0.5 - f64
i64 > 0.5 - i32
i64 > 0.5 ? array : 1
i64 > 0.5 ? f32 : nil
i64 > 0.5 ? ok : nil
i64 > 0.5 ? score : foo
i64 > 0.5 or ok
i64 > 1 != true
i64 > 1 ** 1
i64 > 1 == false
i64 > 1 ? nil : 1
i64 > 1 ^ f32
i64 > 1 ^ i32
i64 > f32
i64 > f32 * 0.5
i64 > f32 + f64
i64 > f32 / f32
i64 > f32 ? "foo" : greet
i64 > f32 ? 1 : i32
i64 > f64
i64 > f64 * i
i64 > f64 - 0.5
i64 > f64 - f32
i64 > first(array)
i64 > half(0.5)
i64 > i
i64 > i != nil
i64 > i == true
i64 > i32
i64 > i32 ? div : f32
i64 > i32 ^ f32
i64 > i64
i64 > i64 - i
i64 > i64 - i32
i64 > i64 / f64
i64 > i64 == false
i64 > len(list)
i64 > max(0.5)
i64 > min(1)
i64 > min(i32)
i64 > reduce(array, #)
i64 > reduce(array, 1)
i64 > round(0.5)
i64 > round(i32)
i64 > score(i)
i64 >= -0.5
i64 >= -1
i64 >= -i
i64 >= -i64
i64 >= 0.5 / i
i64 >= 0.5 == nil
i64 >= 0.5 ? 0.5 : f64
i64 >= 0.5 ^ i
i64 >= 1 % i64
i64 >= 1 * f64
i64 >= 1 * i64
i64 >= abs(i64)
i64 >= array[i32]
i64 >= bitnot(1)
i64 >= f32
i64 >= f32 + f32
i64 >= f32 - f32
i64 >= f32 ? array : i
i64 >= f32 ? f32 : i32
i64 >= f32 ? list : f32
i64 >= f64
i64 >= f64 + 0.5
i64 >= first(array)
i64 >= float(0.5)
i64 >= float(f32)
i64 >= floor(1)
i64 >= floor(i64)
i64 >= half(0.5)
i64 >= half(half(f64))
i64 >= i
i64 >= i / 0.5
i64 >= i ? true : i32
i64 >= i32
i64 >= i32 * i
i64 >= i32 / f32
i64 >= i32 == false
i64 >= i32 || f64 == 1
i64 >= i64
i64 >= i64 + 1
i64 >= i64 ? foo : foo
i64 >= i64 or ok
i64 >= int(f64)
i64 >= last(array)
i64 >= max(i64)
i64 >= min(1)
i64 >= min(f64)
i64 >= round(1)
i64 >= round(i)
i64 >= score(1)
i64 ^ (0.5 * i32)
i64 ^ (0.5 / i64)
i64 ^ (1 * f64)
i64 ^ (1 - i)
i64 ^ (f32 / 1)
i64 ^ (i % i)
i64 ^ (i32 * f64)
i64 ^ (i32 - f64)
i64 ^ (i64 + 0.5)
i64 ^ (i64 + 1)
i64 ^ (i64 - f32)
i64 ^ -0.5
i64 ^ -1
i64 ^ -f32
i64 ^ -i64
i64 ^ 0.5 != i64
i64 ^ 0.5 ** 0.5
i64 ^ 0.5 / f32
i64 ^ 0.5 <= i64
i64 ^ 0.5 == i
i64 ^ 0.5 ^ f32
i64 ^ 0.5 ^ i64
i64 ^ 1 * i64
i64 ^ 1 * round(0.5)
i64 ^ 1 ** f64
i64 ^ 1 ** i32
i64 ^ 1 - f32
i64 ^ 1 < f64
i64 ^ 1 >= f32
i64 ^ 1 >= half(1)
i64 ^ 1 ^ f32
i64 ^ 1 ^ i32
i64 ^ abs(1)
i64 ^ array[i]
i64 ^ f32
i64 ^ f32 * i32
i64 ^ f32 ** f64
i64 ^ f32 - f64
i64 ^ f32 / i - i32
i64 ^ f32 < f32
i64 ^ f32 <= i64
i64 ^ f32 ^ 1
i64 ^ f64
i64 ^ f64 * i
i64 ^ f64 ** 1
i64 ^ f64 > i64
i64 ^ f64 ^ f32
i64 ^ float(i32)
i64 ^ floor(i32)
i64 ^ floor(i64)
i64 ^ half(0.5)
i64 ^ half(1)
i64 ^ i
i64 ^ i * i
i64 ^ i ** i32
i64 ^ i + i % 1
i64 ^ i + i64
i64 ^ i - f32 ^ 1
i64 ^ i - f64
i64 ^ i / i
i64 ^ i < f32
i64 ^ i ^ i32
i64 ^ i32
i64 ^ i32 * i
i64 ^ i32 + i32
i64 ^ i32 + i64
i64 ^ i64
i64 ^ i64 * i64
i64 ^ i64 + i
i64 ^ i64 == i64
i64 ^ i64 ^ 1
i64 ^ i64 in array
i64 ^ int(1)
i64 ^ max(0.5)
i64 ^ reduce(array, #)
i64 ^ round(i64)
i64 ^ score(1)
i64 in array
i64 in array == ok
i64 in groupBy(array, 0.5)
i64 in groupBy(array, foo)
i64 in groupBy(list, "bar")
i64 in groupBy(list, i)
i64 in i64 .. i32
i64 in map(array, #)
i64 in map(list, 1)
i64 in map(list, i)
i64 not in 1 .. i
i64 not in array
i64 not in array ? f32 : i32
i64 not in array ? ok : f32
i64 not in map(array, #)
i64 not in map(list, 0.5)
int(-0.5)
int(-1)
int(-f32)
int(-f64)
int(-i)
int(-i32)
int(-i64)
int(0.5 * 0.5)
int(0.5 * f32)
int(0.5 * f64)
int(0.5 * i32)
int(0.5 ** 0.5)
int(0.5 ** 1)
int(0.5 ** f32)
int(0.5 ** f64)
int(0.5 ** i32)
int(0.5 + 0.5)
int(0.5 + 1)
int(0.5 + f64)
int(0.5 + i32)
int(0.5 + i64)
int(0.5 - f32)
int(0.5 - i)
int(0.5 - i32)
int(0.5 - i64)
int(0.5 / i)
int(0.5 / i64)
int(0.5 ^ i)
int(0.5 ^ i64)
int(0.5) * -i
int(0.5) ** f64
int(0.5) ** i32
int(0.5) + i
int(0.5) / i32
int(0.5) < 0.5 * f64
int(0.5) <= i
int(0.5) <= i32
int(0.5) == f32
int(0.5) > -i64
int(0.5) > i
int(0.5) >= f32
int(0.5) >= i32
int(0.5) >= max(0.5)
int(0.5) ^ i32
int(1 % i)
int(1 * f32)
int(1 * i)
int(1 * i32)
int(1 ** i)
int(1 + 1)
int(1 + f32)
int(1 + f64)
int(1 + i32)
int(1 - 0.5)
int(1 - f32)
int(1 - f64)
int(1 - i32)
int(1 - i64)
int(1 / 0.5)
int(1 / 1)
int(1 ^ 0.5)
int(1 ^ i64)
int(1) != i64
int(1) ** f32
int(1) ** i32
int(1) + f32
int(1) + i64
int(1) + reduce(array, #)
int(1) - i
int(1) < f64
int(1) < i64 * 0.5
int(1) == i32
int(1) ^ f64
int(abs(0.5))
int(abs(1))
int(abs(f64))
int(abs(i))
int(abs(i32))
int(abs(i64))
int(add(1, 1))
int(array[i64])
int(bitnot(1))
int(bitnot(i32))
int(bitnot(i64))
int(bitshl(1, i))
int(bitxor(1, i32) + i)
int(bitxor(i32, i))
int(ceil(0.5))
int(ceil(1))
int(ceil(f32))
int(ceil(half(1)))
int(ceil(i))
int(ceil(i32))
int(count(array, ok))
int(count(list, false))
int(f32 * 1)
int(f32 * i)
int(f32 ** 0.5)
int(f32 ** i64)
int(f32 + f32)
int(f32 - 0.5)
int(f32 - i64)
int(f32 / 0.5)
int(f32 / 1)
int(f32 / f64)
int(f32 / i32)
int(f32 / i64)
int(f32 ^ f32)
int(f32 ^ i32)
int(f32)
int(f32) != i
int(f32) != i64
int(f32) ** f64
int(f32) + i32
int(f32) - f32
int(f32) < i
int(f32) <= i32
int(f32) == i ? list : add
int(f64 * 0.5)
int(f64 ** 1)
int(f64 ** i)
int(f64 ** i32)
int(f64 + 0.5)
int(f64 + 1)
int(f64 + i)
int(f64 - 0.5)
int(f64 - f32)
int(f64 / 0.5)
int(f64 / i64)
int(f64 ^ 0.5)
int(f64 ^ 1)
int(f64 ^ f64)
int(f64 ^ i64)
int(f64)
int(f64) % i64
int(f64) * f64
int(f64) + f64
int(f64) < i32
int(f64) == f32
int(f64) == f64
int(f64) > i
int(f64) > i64
int(false ? 0.5 : 0.5)
int(false ? i : 0.5)
int(findIndex(list, ok))
int(findLastIndex(list, ok))
int(first(array))
int(float(0.5))
int(float(1))
int(float(f32))
int(float(f64))
int(float(i32 ** i))
int(float(i32))
int(floor(f64))
int(floor(i))
int(floor(i32))
int(get(array, i64))
int(half(0.5))
int(half(1))
int(half(f64))
int(i % 1)
int(i % i32)
int(i % i64)
int(i * 0.5)
int(i * 1)
int(i * f64)
int(i ** f32)
int(i ** f64)
int(i ** i64)
int(i + f32)
int(i + f64)
int(i + i)
int(i - 0.5)
int(i - f32)
int(i - i32)
int(i - i64)
int(i / 0.5)
int(i / 1)
int(i / i)
int(i / i32)
int(i ^ 0.5)
int(i ^ 1)
int(i ^ i32)
int(i)
int(i) != i32
int(i) * f64
int(i) * i64
int(i) - i
int(i) .. i64
int(i32 * 0.5)
int(i32 * 1)
int(i32 * i64)
int(i32 ** 0.5)
int(i32 ** 1)
int(i32 + 0.5)
int(i32 + 1)
int(i32 + f64)
int(i32 + i64)
int(i32 - 1)
int(i32 - i)
int(i32 / 0.5)
int(i32 / 1)
int(i32 / f64)
int(i32 ^ 0.5)
int(i32 ^ f64)
int(i32 ^ i32)
int(i32)
int(i32) != f32
int(i32) - i
int(i32) / f32
int(i32) / i
int(i32) / i64
int(i32) < i64
int(i32) > half(0.5)
int(i64 * 1)
int(i64 ** 0.5)
int(i64 ** f64)
int(i64 ** i64)
int(i64 + i)
int(i64 + i32)
int(i64 - 0.5)
int(i64 - f32)
int(i64 - i)
int(i64 - i64)
int(i64 / 1)
int(i64 ^ f64)
int(i64 ^ i32)
int(i64 ^ i64)
int(i64)
int(i64) != i64
int(i64) - i64
int(i64) .. i32
int(i64) / i
int(i64) <= i
int(i64) == f32
int(i64) > i64
int(i64) ^ i
int(int(0.5))
int(int(1))
int(int(f64))
int(len("bar"))
int(len(array))
int(max(0.5))
int(max(0.5, i64))
int(max(1))
int(max(f32))
int(max(f64))
int(max(i))
int(max(i64))
int(mean(array))
int(min(0.5))
int(min(1))
int(min(1, i64))
int(min(f32))
int(min(i))
int(min(i32))
int(min(i64))
int(ok ? i : div)
int(ok ? i : i64)
int(ok ? i64 : list)
int(reduce(array, #))
int(reduce(array, f32))
int(reduce(array, i32))
int(reduce(list, 0.5))
int(reduce(list, 1))
int(reduce(list, i64))
int(round(0.5))
int(round(1))
int(round(f32))
int(round(f64))
int(round(i))
int(score(1))
int(score(1, i))
int(score(i))
int(string(1))
int(string(i))
int(string(i32))
int(string(i64))
int(sum(array))
int(toJSON(i))
int(toJSON(i32))
int(toJSON(i64))
int(true ? 1 : foo)
int(true ? f64 : greet)
join(map(array, "foo"))
join(map(list, "foo"))
keys(groupBy(array, "foo"))
keys(groupBy(array, # ** 0.5))
keys(groupBy(array, #))
keys(groupBy(array, f32 != f64))
keys(groupBy(array, foo))
keys(groupBy(array, i32))
keys(groupBy(array, ok))
keys(groupBy(list, "bar"))
keys(groupBy(list, #))
keys(groupBy(list, false))
keys(groupBy(list, i32))
keys({"bar": 1})
keys({"bar": array, "foo": "bar"})
keys({"bar": f32})
keys({"foo": array, "bar": f64})
keys({"foo": array})
last(1 .. 1)
last(1 .. i)
last([0.5])
last([f32, list])
last([list, list])
last(array)
last(array) != int(i64)
last(array) + f64
last(array) - f32
last(array) - i64
last(array) .. i32
last(array) / f32
last(array) <= i32
last(array) == f32
last(array) > f32 * i64
last(array) >= f64
last(false ? "foo" : true)
last(false ? 0.5 : "bar")
last(false ? 1 : foo)?.div
last(false ? div : score)
last(false ? f64 : false)
last(filter(array, false))
last(filter(array, ok))
last(filter(list, true))
last(groupBy(array, foo).Qux)
last(groupBy(array, i32).Qux)
last(groupBy(list, #).list)
last(groupBy(list, #)?.Qux)
last(groupBy(list, #)?.ok)
last(i32 .. 1)
last(i32 .. i64)
last(i64 .. 1)
last(list)
last(list).Bar
last(list).Qux
last(list).String
last(list).String()
last(list)?.Bar
last(list)?.Qux
last(list)?.String
last(list)?.String()
last(list[1:i64])
last(map(array, #))
last(map(array, 1))
last(map(array, array))
last(map(array, foo))
last(map(array, i))
last(map(list, "foo"))
last(map(list, #))
last(map(list, 1))
last(map(list, false))
last(map(list, half))
last(map(list, i32))
last(map(list, i64))
last(map(list, ok))
last(ok ? "bar" : true)
last(ok ? "foo" : f64)
last(ok ? 0.5 : "foo")
last(ok ? 0.5 : list)
last(ok ? 1 : add)
last(ok ? 1 : half)
last(ok ? array : array)
last(ok ? array : ok)
last(ok ? f32 : 0.5)
last(ok ? greet : 1)
last(ok ? i32 : array)
last(ok ? i64 : add)
last(ok ? ok : 0.5)
last(reduce(array, list))
last(reduce(list, array))
last(sort(array))
last(sum(array))
last(true ? "bar" : half)
last(true ? add : list)
last(true ? foo : 1)
last(true ? greet : true)
last(true ? ok : 1)
len("bar") ** i64
len("bar") + i64 - i64
len("bar") / i64
len("bar") >= i
len("bar") in array
len("foo") ** i32
len("foo") ** i64
len("foo") - i
len("foo") - i32
len("foo") >= i
len(1 .. 1)
len([f32])
len([foo])
len([half])
len(array)
len(array) != f32
len(array) + i64
len(array) < f64
len(array) <= i32
len(array) == f32
len(array) >= f64
len(array) ^ i32
len(array) not in array
len(filter(list, false))
len(filter(list, ok))
len(foo.Bar)
len(foo.String())
len(foo?.Bar)
len(foo?.Qux("bar"))
len(foo?.String())
len(greet("bar"))
len(greet("foo"))
len(groupBy(array, #))
len(groupBy(array, 0.5))
len(groupBy(array, f32))
len(groupBy(array, false))
len(groupBy(array, i64))
len(groupBy(array, true))
len(groupBy(list, #))
len(groupBy(list, #).ok)
len(groupBy(list, 0.5))
len(groupBy(list, false))
len(groupBy(list, foo).list)
len(groupBy(list, i32))
len(groupBy(list, i64))
len(i64 .. 1)
len(i64 .. i)
len(list)
len(list) % i32
len(list) % i64
len(list) .. i64
len(list) / i32
len(list) <= i
len(list) > i
len(list) ^ f64
len(list[1:i])
len(lower("bar"))
len(lower("foo"))
len(map(array, "bar"))
len(map(array, #))
len(map(array, add))
len(map(array, f32))
len(map(array, greet))
len(map(array, i))
len(map(array, list)[i64])
len(map(array, score))
len(map(list, #))
len(map(list, 1))
len(map(list, f32))
len(map(list, f64))
len(map(list, foo))
len(map(list, i64))
len(map(list, ok))
len(map(list, true))
len(ok ? list : score)
len(sort(array))
len(string("bar"))
len(string("foo"))
len(string(0.5))
len(string(1))
len(string(add))
len(string(f64))
len(string(foo))
len(string(half))
len(string(i))
len(string(i32))
len(string(i64))
len(string(list))
len(string(nil))
len(string(score))
len(string(string(list)))
len(toJSON("bar"))
len(toJSON("foo"))
len(toJSON(0.5))
len(toJSON(1))
len(toJSON(array))
len(toJSON(f32))
len(toJSON(false))
len(toJSON(i))
len(toJSON(i32))
len(toJSON(list))
len(toJSON(nil))
len(toJSON(ok))
len(toJSON(true))
len(trim("foo"))
len(trimPrefix("foo"))
len(trimSuffix("bar"))
len(type("foo"))
len(type(0.5))
len(type(1))
len(type(add))
len(type(array))
len(type(div))
len(type(half))
len(type(i))
len(type(i32))
len(type(i64))
len(type(list))
len(type(nil))
len(type(ok))
len(type(score))
len(upper("bar"))
len(upper("foo"))
len({"bar": array})
len({"bar": f64})
len({"bar": score})
len({"foo": 1})
len({"foo": add, "foo": "foo"})
len({"foo": i64})
list
list != 1 .. 1
list != ["foo"]
list != [i, 0.5]
list != [i]
list != array
list != filter(array, ok)
list != filter(array, true)
list != list
list != list ? 0.5 : div
list != list ? half : div
list != map(array, #)
list != map(list, 1)
list != map(list, i64)
list != nil && i32 <= 1
list != nil ? false : 1
list != nil ? i : 1
list != sort(array)
list == [div, nil]
list == [i]
list == array
list == array == nil
list == list
list == list != false
list == list ? i32 : i
list == map(list, #)
list == nil && ok
list == nil ? nil : "foo"
list == nil or f64 == f64
list not in groupBy(list, #).i
list[-1]
list[-i32]
list[-i64]
list[-i]
list[1 - 1]
list[1] not in list
list[1].Bar
list[1].Qux
list[1].String
list[1].String()
list[1]?.Bar
list[1]?.Qux
list[1]?.String
list[1]?.String()
list[bitnot(i)]
list[bitshr(i32, i32)]
list[findIndex(array, true)]
list[first(array)]
list[i * i64]
list[i32:i32]
list[i32:i]
list[i32]
list[i32] in list
list[i32].Bar
list[i32].Qux
list[i32].String
list[i32]?.Bar
list[i32]?.Qux
list[i32]?.String
list[i32]?.String()
list[i64:i32 - i]
list[i64:i64]
list[i64]
list[i64] in list
list[i64].Bar
list[i64].Qux
list[i64].String
list[i64]?.Bar
list[i64]?.Qux
list[i64]?.String
list[i:i32]
list[i:i64]
list[i:i64] == nil != nil
list[i:i]
list[i]
list[i].Bar
list[i].Qux
list[i].String
list[i].String()
list[i]?.Bar
list[i]?.Qux
list[i]?.String
list[i]?.String()
list[int(f32)]
list[int(f64)]
list[int(i)]
list[int(i64)]
list[max(i64, 1)]
list[min(i)]
list[min(i32)]
list[ok ? 1 : half]
list[score(1)]
list[score(i)]
lower("bar" + "bar")
lower("bar") == trimSuffix("bar")
lower("foo" + "bar")
lower(false ? foo : "bar")
lower(foo.Bar)
lower(foo.String())
lower(foo?.Bar)
lower(foo?.String())
lower(greet("bar"))
lower(greet("foo"))
lower(lower("bar"))
lower(lower("foo"))
lower(reduce(array, "bar"))
lower(reduce(list, "bar"))
lower(string("foo"))
lower(string(0.5))
lower(string(add))
lower(string(f32))
lower(string(f64))
lower(string(foo))
lower(string(greet))
lower(string(i))
lower(string(i32))
lower(string(i64))
lower(string(list))
lower(string(nil))
lower(string(score))
lower(toBase64("foo"))
lower(toBase64(string(i)))
lower(toJSON("bar"))
lower(toJSON("foo"))
lower(toJSON(0.5))
lower(toJSON(1))
lower(toJSON(f64))
lower(toJSON(foo))
lower(toJSON(list))
lower(toJSON(nil))
lower(toJSON(ok))
lower(toJSON(true))
lower(trim("bar"))
lower(trim("foo"))
lower(trimPrefix("bar"))
lower(trimPrefix("foo"))
lower(trimSuffix("bar"))
lower(type("bar"))
lower(type("foo"))
lower(type(0.5))
lower(type(1))
lower(type(add))
lower(type(div))
lower(type(f32))
lower(type(half))
lower(type(i))
lower(type(i32))
lower(type(i64))
lower(type(list))
lower(type(ok))
lower(type(true))
lower(upper("bar"))
lower(upper("foo"))
map(1 .. 1, f32)
map(1 .. 1, foo)
map(1 .. 1, score)
map(1 .. i, foo)
map(1 .. i32, #)
map(1 .. i32, 0.5 / f64)
map(1 .. i32, div)
map(1 .. i32, reduce(array, #))
map(1 .. i64, # ^ #)
map(1 .. i64, #)
map(1 .. i64, half)
map(1 .. i64, i32)
map([1], get(#, 1))
map([f64], half)
map([false], ok)
map([half], #)
map([i * i32], score)
map([i32, foo, score], #)
map([i32], foo)
map([i32], greet)
map([i32], half)
map([list, 1, foo], i32)
map([nil], #?.f32(ok, #, false))
map([nil], foo)
map([score, "bar"], f32)
map([true, i32, 1], #)
map(array, !(# == #))
map(array, !(nil in list))
map(array, !ok)
map(array, "bar" in foo)
map(array, "foo" not endsWith "bar")
map(array, "foo") == array
map(array, # != #)
map(array, # != 0.5)
map(array, # != 1)
map(array, # != f64)
map(array, # != i32)
map(array, # != nil)
map(array, # % #)
map(array, # % 1)
map(array, # % i)
map(array, # % i64)
map(array, # * #)
map(array, # * 0.5)
map(array, # * 1)
map(array, # * f32)
map(array, # * f64)
map(array, # * i)
map(array, # ** #)
map(array, # ** 1)
map(array, # ** f32)
map(array, # ** i)
map(array, # ** i64)
map(array, # + #)
map(array, # + 0.5)
map(array, # + 1)
map(array, # + f32)
map(array, # + i)
map(array, # + i32)
map(array, # - #)
map(array, # - 0.5)
map(array, # - 1)
map(array, # - f32)
map(array, # - f64)
map(array, # - i)
map(array, # - i32)
map(array, # .. #)
map(array, # .. 1)
map(array, # / #)
map(array, # / 0.5)
map(array, # / 1)
map(array, # / f32)
map(array, # / f64)
map(array, # / i)
map(array, # / i64)
map(array, # < #)
map(array, # < 1)
map(array, # < f32)
map(array, # < i32)
map(array, # < i64)
map(array, # <= #)
map(array, # <= f32)
map(array, # <= i)
map(array, # <= i32)
map(array, # == #)
map(array, # == f32)
map(array, # == f64)
map(array, # == nil)
map(array, # > #)
map(array, # > 0.5)
map(array, # > 1)
map(array, # > f32)
map(array, # > f64)
map(array, # >= #)
map(array, # >= 1)
map(array, # >= f32)
map(array, # >= i32)
map(array, # >= i64)
map(array, # ^ #)
map(array, # ^ 0.5)
map(array, # ^ 1)
map(array, # ^ i)
map(array, # ^ i32)
map(array, # not in array)
map(array, #)
map(array, #) != array
map(array, #) != list
map(array, #) == array
map(array, #) == list
map(array, #)[i64]
map(array, #)[i]
map(array, -#)
map(array, --#)
map(array, -0.5)
map(array, -1)
map(array, -f64)
map(array, -i)
map(array, -i32)
map(array, -i64)
map(array, 0.5 != #)
map(array, 0.5 != 0.5)
map(array, 0.5 * #)
map(array, 0.5 * f64)
map(array, 0.5 ** f32)
map(array, 0.5 ** i64)
map(array, 0.5 + #)
map(array, 0.5 + 1)
map(array, 0.5 - #)
map(array, 0.5 - 0.5)
map(array, 0.5 / i)
map(array, 0.5 < #)
map(array, 0.5 < i32)
map(array, 0.5 > #)
map(array, 0.5 > i64)
map(array, 0.5 >= #)
map(array, 0.5 ^ #)
map(array, 0.5)[i]
map(array, 1 != #)
map(array, 1 != f32)
map(array, 1 % #)
map(array, 1 ** #)
map(array, 1 ** i)
map(array, 1 ** i64)
map(array, 1 + #)
map(array, 1 + f64)
map(array, 1 - #)
map(array, 1 .. #)
map(array, 1 / #)
map(array, 1 / i32)
map(array, 1 < #)
map(array, 1 <= #)
map(array, 1 <= 1)
map(array, 1 <= f32)
map(array, 1 == #)
map(array, 1 ^ #)
map(array, abs(#))
map(array, abs(i64))
map(array, add == greet)
map(array, add == nil)
map(array, add(#, #))
map(array, add(#, i))
map(array, add)
map(array, array)
map(array, array)[bitnot(i32)]
map(array, array)[i64]
map(array, array[#:#])
map(array, bitand(#, 1))
map(array, bitnand(#, 1))
map(array, bitnot(#))
map(array, bitnot(1))
map(array, bitshl(#, #))
map(array, bitshr(#, #))
map(array, bitshr(#, i64))
map(array, bitushr(1, #))
map(array, ceil(#))
map(array, ceil(0.5))
map(array, ceil(f32))
map(array, div(#, #))
map(array, div)
map(array, f32 * #)
map(array, f32 * f64)
map(array, f32 ** #)
map(array, f32 + #)
map(array, f32 / #)
map(array, f32 < #)
map(array, f32 == #)
map(array, f32 > #)
map(array, f32 >= #)
map(array, f32 >= i)
map(array, f32 ^ #)
map(array, f32)
map(array, f32)[min(i32)]
map(array, f64 != #)
map(array, f64 != 0.5)
map(array, f64 * #)
map(array, f64 ** #)
map(array, f64 ** 0.5)
map(array, f64 / #)
map(array, f64 < #)
map(array, f64 < f64)
map(array, f64 <= #)
map(array, f64 == #)
map(array, f64 >= #)
map(array, f64 >= i32)
map(array, f64 ^ #)
map(array, f64)
map(array, false && false)
map(array, false ? # : f64)
map(array, false ? greet : i)
map(array, false)[i32]
map(array, find(array, true))
map(array, findIndex(list, ok))
map(array, float(# + #))
map(array, float(#))
map(array, floor(#))
map(array, foo == foo)
map(array, foo)
map(array, foo.Bar)
map(array, foo.Qux)
map(array, foo.String())
map(array, foo.String)
map(array, foo?.Bar)
map(array, foo?.String)
map(array, get(array, #))
map(array, greet("bar"))
map(array, greet("foo"))
map(array, greet)
map(array, groupBy(array, #))
map(array, groupBy(array, f32))
map(array, groupBy(list, #))
map(array, groupBy(list, f64))
map(array, groupBy(list, i))
map(array, half != half)
map(array, half != nil)
map(array, half(0.5))
map(array, half(1))
map(array, half(f64))
map(array, half(i - 0.5))
map(array, half)
map(array, i % #)
map(array, i + #)
map(array, i - i32)
map(array, i / 0.5)
map(array, i <= #)
map(array, i <= f32)
map(array, i <= f64)
map(array, i == #)
map(array, i == f64)
map(array, i > i32)
map(array, i >= #)
map(array, i)
map(array, i)[i]
map(array, i32 * #)
map(array, i32 ** #)
map(array, i32 ** f64)
map(array, i32 / f32)
map(array, i32 < #)
map(array, i32 < f64)
map(array, i32 == #)
map(array, i32 == 1)
map(array, i32 > #)
map(array, i32 ^ #)
map(array, i32 not in array)
map(array, i32)
map(array, i32) == array
map(array, i32) == list
map(array, i64 != #)
map(array, i64 % #)
map(array, i64 * #)
map(array, i64 * 0.5)
map(array, i64 + 0.5)
map(array, i64 - #)
map(array, i64 .. #)
map(array, i64 < #)
map(array, i64 <= #)
map(array, i64 <= f64)
map(array, i64 <= i64)
map(array, i64 > #)
map(array, i64)
map(array, int(#))
map(array, int(0.5))
map(array, len("foo"))
map(array, list != array)
map(array, list)
map(array, map(array, f64))
map(array, map(list, greet))
map(array, max(#))
map(array, max(f32, 1))
map(array, max(f64))
map(array, mean(array))
map(array, min(#, #))
map(array, nil == #)
map(array, nil == ok)
map(array, nil not in list)
map(array, not ok)
map(array, not true)
map(array, ok || ok)
map(array, ok)
map(array, ok)[i64]
map(array, reduce(array, "bar"))
map(array, reduce(array, #))
map(array, reduce(list, add))
map(array, reduce(list, half))
map(array, round(#))
map(array, score(#))
map(array, score(#, #))
map(array, score(1))
map(array, score)
map(array, string(add))
map(array, string(foo))
map(array, string(i64))
map(array, take(array, #))
map(array, toBase64("foo"))
map(array, toJSON(#))
map(array, toJSON(foo))
map(array, toJSON(list))
map(array, true != nil)
map(array, true ? 0.5 : #)
map(array, true ? 0.5 : 1)
map(array, true ? f32 : div)
map(array, true ? i : true)
map(array, type(#))
map(array, type(f32))
map(array[1:i32], list)
map(false ? i32 : list, ok)
map(filter(array, false), foo)
map(filter(array, ok), 1 * #)
map(filter(list, # != #), #)
map(filter(list, false), #)
map(filter(list, ok), #)
map(filter(list, ok), i)
map(filter(list, true), i64)
map(groupBy(array, #).String, i32)
map(groupBy(array, #).greet, foo.Qux(.f32))
map(groupBy(array, #).greet, score)
map(groupBy(array, #).score, #?.list())
map(groupBy(array, 0.5)?.i64, .Qux())
map(groupBy(array, f64)?.array, first(.div()))
map(groupBy(list, i32).i, #)
map(i .. 1, -#)
map(i .. 1, 0.5 ^ #)
map(i .. 1, f32)
map(i .. 1, i)
map(i .. i, add(#, #))
map(i .. i, div)
map(i .. i, i32)
map(i .. i32, half)
map(i .. i64, min(#, #, #))
map(i32 .. 1, half)
map(i32 .. i, f32)
map(i32 .. i32, array)
map(i32 .. i64, div)
map(i32 .. i64, list)
map(i64 .. 1, #)
map(i64 .. 1, 1 ^ #)
map(i64 .. 1, array)
map(i64 .. 1, f32)
map(i64 .. 1, f64)
map(i64 .. i32, #)
map(i64 .. i64, # - #)
map(i64 .. i64, #)
map(list, !false)
map(list, !ok)
map(list, "bar" not matches "foo")
map(list, "bar") != list
map(list, "bar")[i64]
map(list, "foo" not in foo)
map(list, "foo" not matches #.Bar)
map(list, # != #)
map(list, # != nil)
map(list, # == #)
map(list, # in list)
map(list, #)
map(list, #) != array
map(list, #) == list
map(list, #)[i64]
map(list, #)[i]
map(list, #?.Bar)
map(list, #?.Qux)
map(list, #?.String())
map(list, #?.String)
map(list, -0.5)
map(list, -f32)
map(list, -i)
map(list, -i32)
map(list, .Bar)
map(list, .Qux)
map(list, .String())
map(list, .String)
map(list, 0.5 != 0.5)
map(list, 0.5 != i64)
map(list, 0.5 + i64)
map(list, 0.5 - 0.5)
map(list, 0.5 <= 0.5)
map(list, 0.5 == i32)
map(list, 0.5 in array)
map(list, 0.5) != array
map(list, 0.5) == array
map(list, 1 % i)
map(list, 1 ** 0.5)
map(list, 1 ** f32)
map(list, 1 + 1)
map(list, 1 / f64)
map(list, 1 / i64)
map(list, 1 < 0.5)
map(list, 1 <= i32)
map(list, 1 ^ i32)
map(list, [#])
map(list, [foo, 0.5, #])
map(list, [score])
map(list, abs(f32))
map(list, add == score)
map(list, add)
map(list, array)
map(list, ceil(0.5))
map(list, count(array, true))
map(list, div)
map(list, f32 != i32)
map(list, f32 ** 1)
map(list, f32 + i64)
map(list, f32 < f32)
map(list, f32 == 0.5)
map(list, f32 > i64)
map(list, f32 >= i)
map(list, f32 >= i32)
map(list, f32 ^ i)
map(list, f32)
map(list, f64 < 0.5)
map(list, f64 < f32)
map(list, f64 <= 1)
map(list, f64 > 1)
map(list, f64 >= 0.5)
map(list, f64 >= f32)
map(list, f64)
map(list, f64)[i]
map(list, false ? # : list)
map(list, false) != array
map(list, float(f64))
map(list, float(i))
map(list, float(i32))
map(list, foo == #)
map(list, foo)
map(list, foo.Qux)
map(list, foo.String())
map(list, foo?.String)
map(list, greet)
map(list, groupBy(array, #))
map(list, groupBy(array, i))
map(list, groupBy(list, #))
map(list, half == greet)
map(list, half(0.5))
map(list, half(f64))
map(list, half)
map(list, i ** 1)
map(list, i + i64)
map(list, i .. i)
map(list, i < 0.5)
map(list, i == 1)
map(list, i)
map(list, i)[i64]
map(list, i32 % i64)
map(list, i32 ** 0.5)
map(list, i32 + f32)
map(list, i32 - i32)
map(list, i32 / f64)
map(list, i32 < 1)
map(list, i32 < i32)
map(list, i32 <= 1)
map(list, i32 >= 1)
map(list, i32)
map(list, i64 * i)
map(list, i64 + i64)
map(list, i64 <= i64)
map(list, i64 == nil)
map(list, i64)
map(list, i64)[i64]
map(list, i64)[i]
map(list, last(array))
map(list, list)
map(list, list)[i]
map(list, map(array, #))
map(list, map(array, 1))
map(list, map(array, div))
map(list, map(array, i64))
map(list, map(list, "foo"))
map(list, max(f32))
map(list, min(0.5))
map(list, min(f64))
map(list, nil != #)
map(list, nil != i64)
map(list, nil == #)
map(list, nil == ok)
map(list, nil not in list)
map(list, none(array, true))
map(list, not ok)
map(list, ok ? # : #)
map(list, ok || ok)
map(list, ok)
map(list, reduce(array, half))
map(list, reduce(list, foo))
map(list, reduce(list, half))
map(list, score != add)
map(list, score(1))
map(list, score)
map(list, score)[i64]
map(list, string(#))
map(list, string(1))
map(list, string(add))
map(list, string(i32))
map(list, toJSON(#))
map(list, toJSON([#]))
map(list, toJSON(false))
map(list, toJSON(ok))
map(list, true ? i : f32)
map(list, true ? i32 : #)
map(list, true ? list : div)
map(list, true)[i32]
map(list, type("bar"))
map(list, type(#))
map(list, type(i32))
map(list, type(true))
map(list[i64:i32], greet)
map(map(array, #), # - i32)
map(map(array, #), # == #)
map(map(array, #), # >= #)
map(map(array, #), #)
map(map(array, #), add)
map(map(array, #), bitand(#, #))
map(map(array, #), foo)
map(map(array, #), greet)
map(map(array, #), half)
map(map(array, #), i % i64)
map(map(array, #), i)
map(map(array, #), i32)
map(map(array, #), i64)
map(map(array, #), list)
map(map(array, 0.5), #)
map(map(array, 0.5), ok)
map(map(array, 1), greet)
map(map(array, array), i32 ^ i32)
map(map(array, array), i64)
map(map(array, array), reduce(#, array))
map(map(array, div), i)
map(map(array, div), list)
map(map(array, f32), #)
map(map(array, f32), array)
map(map(array, f32), f64)
map(map(array, f64), # > #)
map(map(array, f64), f64)
map(map(array, f64), greet)
map(map(array, foo), div)
map(map(array, greet), foo)
map(map(array, greet), list)
map(map(array, half), array)
map(map(array, i), #)
map(map(array, i32), #)
map(map(array, i64), array)
map(map(array, i64), f64)
map(map(array, list), foo)
map(map(array, ok), !#)
map(map(array, ok), -f32)
map(map(array, true), # != nil)
map(map(array, true), i64)
map(map(list, #), # != #)
map(map(list, #), #)
map(map(list, #), #?.Qux)
map(map(list, #), .Bar)
map(map(list, #), div)
map(map(list, #), f32)
map(map(list, #), f64)
map(map(list, #), greet)
map(map(list, #), half)
map(map(list, #), list)
map(map(list, #), ok)
map(map(list, #), score)
map(map(list, 0.5), #)
map(map(list, 0.5), div)
map(map(list, 1), # * #)
map(map(list, 1), f32)
map(map(list, add), #)
map(map(list, add), i)
map(map(list, array), f64)
map(map(list, array), findIndex(#, ok))
map(map(list, f64), f32)
map(map(list, f64), i32)
map(map(list, false), 0.5 / f64)
map(map(list, foo), #)
map(map(list, foo), list)
map(map(list, greet), "bar" <= "foo")
map(map(list, i64), # >= f64)
map(map(list, i64), #)
map(map(list, i64), i64)
map(map(list, list), #)
map(map(list, ok), f64 > i64)
map(map(list, ok), foo)
map(map(list, true), f64)
map(map(list, true), list)
map(ok ? "bar" : i64, ok)
map(ok ? "bar" : ok, i64)
map(ok ? "bar" : score, 1 .. #)
map(ok ? array : foo, foo)
map(ok ? array : i64, list)
map(ok ? list : i64, #)
map(ok ? list : list, add)
map(reduce(array, array), # <= #)
map(reduce(array, array), #)
map(reduce(list, array), -i32)
map(reduce(list, array), foo)
map(reduce(list, array), half)
map(reduce(list, list), #)
map(sort(array), # / 0.5)
map(sort(array), #)
map(sort(array), greet)
map(split("foo", "bar"), #)
map(true ? "foo" : 0.5, # * #)
map(true ? array : "foo", f32 + #)
map(true ? list : greet, greet)
map(true ? list : list, #)
max(-0.5)
max(-1)
max(-f32)
max(-f64)
max(-findIndex(array, ok))
max(-i)
max(-i, f32)
max(-i32)
max(-i64)
max(-reduce(array, #))
max(0.5 * f32)
max(0.5 * i)
max(0.5 * i64)
max(0.5 ** 0.5)
max(0.5 ** 1)
max(0.5 ** f32)
max(0.5 ** f64 ^ reduce(array, f64))
max(0.5 ** i)
max(0.5 ** i32)
max(0.5 + 1)
max(0.5 - 0.5)
max(0.5 - f32)
max(0.5 - f64)
max(0.5 / 0.5)
max(0.5 / 1)
max(0.5 / f64)
max(0.5 / i32)
max(0.5 / i64)
max(0.5 ^ 0.5)
max(0.5 ^ 1)
max(0.5 ^ i)
max(0.5 ^ i32)
max(0.5 ^ i64)
max(0.5) != f32
max(0.5) != i
max(0.5) + f64
max(0.5) + i
max(0.5) - i32
max(0.5) / i64
max(0.5) <= i
max(0.5) > f64
max(0.5) > i
max(0.5) > i64
max(0.5) >= i64
max(0.5, 0.5) != i
max(0.5, i) ** i32
max(1 % 1)
max(1 % i64)
max(1 * 0.5)
max(1 * 1)
max(1 * f64)
max(1 * i32)
max(1 ** 0.5)
max(1 ** 1)
max(1 ** f32)
max(1 ** i64)
max(1 + f32)
max(1 + i64)
max(1 - f32)
max(1 - f64)
max(1 / 1)
max(1 / f32)
max(1 / f32, i64)
max(1 / f64)
max(1 / i)
max(1 / i32)
max(1 / i64)
max(1 ^ 0.5)
max(1 ^ 1)
max(1 ^ f32)
max(1 ^ f64)
max(1 ^ i32)
max(1 ^ i64)
max(1) != 1 ? foo : "bar"
max(1) + f32
max(1) - f64
max(1) .. i
max(1) / i
max(1) == i64
max(1) > f64
max(1) > i32
max(1, i) not in array
max(abs(0.5))
max(abs(1))
max(abs(f32))
max(abs(f64))
max(abs(i))
max(abs(i32))
max(add(1, i))
max(array[1])
max(array[i64])
max(bitnand(i32, 1))
max(bitnot(1))
max(bitnot(i))
max(bitnot(i64))
max(bitshr(1, i32))
max(bitxor(1, 1))
max(ceil(0.5), f64 / i64)
max(ceil(f32))
max(ceil(i32))
max(f32 * 1)
max(f32 * f64)
max(f32 * i64)
max(f32 ** 1)
max(f32 ** f64)
max(f32 + 1)
max(f32 + f64)
max(f32 + i)
max(f32 + i64)
max(f32 - 1)
max(f32 - i64)
max(f32 / 0.5)
max(f32 / f32)
max(f32 ^ 1)
max(f32 ^ f32)
max(f32 ^ f64)
max(f32 ^ i64)
max(f32)
max(f32) * i64
max(f32) ** i
max(f32) + f32
max(f32) + f64
max(f32) - f64
max(f32) / i32
max(f32) < i
max(f32) == i
max(f32) ^ f32
max(f32, f32)
max(f32, f64)
max(f32, f64) in array
max(f32, i)
max(f32, i32)
max(f32, i32) ** i64
max(f32, i64)
max(f64 * 1)
max(f64 * f64)
max(f64 ** 0.5)
max(f64 ** f64)
max(f64 ** i)
max(f64 + 1)
max(f64 + f32)
max(f64 + f64)
max(f64 - 0.5)
max(f64 - i)
max(f64 ^ 0.5)
max(f64 ^ 1)
max(f64 ^ f32)
max(f64 ^ f64)
max(f64)
max(f64) != f64
max(f64) < i32
max(f64) <= f32
max(f64) == f32
max(f64) == i
max(f64) == round(i)
max(f64) ^ f32
max(f64) ^ i64
max(f64, f32)
max(f64, f32) <= int(f64)
max(f64, f64)
max(f64, i)
max(f64, i) - 1 ^ i
max(f64, i) < i
max(f64, i) > f64
max(f64, i32)
max(f64, i64)
max(f64, i64) ^ f32
max(false ? 0.5 : array)
max(false ? add : f64)
max(false ? div : half)
max(false ? div : i64)
max(false ? ok : 0.5)
max(find(array, false))
max(findIndex(list, false))
max(findIndex(list, ok))
max(findLast(array, false))
max(float(0.5))
max(float(1))
max(float(1), i)
max(float(i32))
max(float(i64))
max(float(score(i)))
max(floor(0.5))
max(floor(1))
max(floor(f32))
max(floor(i))
max(floor(i32))
max(floor(len(array)))
max(get(array, 1))
max(get(array, i))
max(get(array, i32))
max(get(array, i64))
max(half(0.5))
max(half(1))
max(half(1), i64)
max(half(f64))
max(i % 1)
max(i * 0.5)
max(i * f32)
max(i * i)
max(i * i64)
max(i ** f64)
max(i ** score(1))
max(i + 1)
max(i - 1)
max(i - i)
max(i - i64)
max(i ^ f64)
max(i)
max(i) != i32
max(i) != i64
max(i) % (i64 + i)
max(i) % array[i32]
max(i) ** (1 / i32)
max(i) + f64
max(i) - i
max(i) / f32
max(i) / i
max(i) < 0.5 - f64
max(i) < f32
max(i) < i32
max(i) <= f64
max(i) == f64
max(i) >= i
max(i, f32)
max(i, f64)
max(i, i)
max(i, i32)
max(i, i64)
max(i, i64, i32)
max(i32 % 1)
max(i32 * 0.5)
max(i32 * 1)
max(i32 * f32)
max(i32 * i)
max(i32 * i64)
max(i32 ** f32)
max(i32 ** i)
max(i32 ** i32)
max(i32 + 0.5)
max(i32 + i64)
max(i32 - 0.5)
max(i32 - 1)
max(i32 - f64)
max(i32 - i)
max(i32 / 1)
max(i32 ^ i)
max(i32 ^ i, f32)
max(i32)
max(i32) * i32
max(i32) / f32
max(i32) / i
max(i32) <= f32
max(i32) ^ f32
max(i32) in array
max(i32, f32)
max(i32, f64)
max(i32, i)
max(i32, i32)
max(i32, i64)
max(i64 % i)
max(i64 * 0.5)
max(i64 * i64)
max(i64 ** 0.5)
max(i64 ** f32)
max(i64 ** i64)
max(i64 + i)
max(i64 + i64)
max(i64 - 0.5)
max(i64 - 1)
max(i64 - f64)
max(i64 / f64)
max(i64 / i32)
max(i64 / i64)
max(i64 ^ 0.5)
max(i64 ^ 1)
max(i64 ^ i)
max(i64)
max(i64) ** (1 + 1)
max(i64) ** f32
max(i64) + i32
max(i64) - i32
max(i64) - i64
max(i64) .. i32
max(i64) < f32
max(i64) >= f32
max(i64) ^ i
max(i64, 0.5 + 1)
max(i64, 0.5, i64) ** i32
max(i64, f32)
max(i64, f64)
max(i64, half(1))
max(i64, i)
max(i64, i) + i32
max(i64, i32)
max(i64, i32) == f64
max(i64, i64)
max(int(0.5))
max(int(f32))
max(int(i32))
max(int(i64))
max(len("foo"))
max(len(array))
max(len(list))
max(max(0.5))
max(max(0.5, f64))
max(max(1))
max(max(i))
max(max(i32))
max(max(i64))
max(mean(array))
max(median(array))
max(min(0.5, 0.5))
max(min(1))
max(min(1, f64))
max(min(f32, i64, i32))
max(min(i))
max(min(i32))
max(ok ? "foo" : f64)
max(ok ? 0.5 : i64)
max(ok ? 1 : i)
max(ok ? array : true)
max(ok ? foo : greet)
max(ok ? half : f32)
max(ok ? half : list)
max(ok ? i : 1)
max(ok ? i : nil)
max(reduce(array, # % #))
max(reduce(array, #))
max(reduce(array, 1))
max(reduce(array, f32))
max(reduce(array, f64))
max(reduce(list, 0.5))
max(reduce(list, f32), i64)
max(reduce(list, i64))
max(round(1))
max(round(f32))
max(round(f64))
max(round(i))
max(round(i32))
max(score(1))
max(score(i), i)
max(true ? f32 : f32)
max(true ? foo : array)
max(true ? greet : 1)
max({"bar": list}.String)
max({"foo": array}?.f32)
max({"foo": half}?.f32)
mean(1 .. 1)
mean(1 .. i)
mean([f64, 0.5])
mean([i])
mean(array)
mean(array) * i
mean(array) + i
mean(array) - min(i)
mean(array) / i
mean(array) / i64
mean(array) < f32
mean(array) < f64
mean(array) <= i64
mean(array) > f32
mean(array) >= f32
mean(array) >= i64
mean(array) ^ i
mean(array) ^ i32
mean(filter(array, true))
mean(groupBy(array, #)?.half)
mean(groupBy(array, i64).score)
mean(i .. 1)
mean(i .. i)
mean(map(array, #))
mean(map(array, -#))
mean(map(array, f32))
mean(map(array, i))
mean(map(array, i32))
mean(map(list, 1))
mean(map(list, f32))
mean(map(list, i))
mean(map(list, i32))
mean(sort(array))
median(1 .. i)
median(array)
median(array) != f32
median(array) * 1 * f32
median(array) * i32
median(array) ** i64
median(array) + f32
median(array) >= i32
median(array) ^ i32
median(array) ^ i64
median(array) not in array
median(array[1:1])
median(filter(array, ok))
median(groupBy(list, #).i32)
median(i .. i)
median(i .. i64)
median(i64 .. i64)
median(map(array, #))
median(map(array, 1))
median(map(list, 0.5))
median(map(list, f32))
median(map(list, i32))
median(reduce(array, array))
median(reduce(list, array))
median(sort(array))
min(-0.5)
min(-0.5, i)
min(-1)
min(-f32)
min(-f64)
min(-half(0.5))
min(-i)
min(-i32)
min(-i64)
min(0.5 * 0.5)
min(0.5 * 1)
min(0.5 * f32, i32 ** i32)
min(0.5 * f64)
min(0.5 * i32)
min(0.5 * i64)
min(0.5 ** i)
min(0.5 ** i64)
min(0.5 + f64)
min(0.5 + i)
min(0.5 + i32)
min(0.5 - 0.5)
min(0.5 - 1)
min(0.5 - f32)
min(0.5 - f64)
min(0.5 - i)
min(0.5 / 0.5)
min(0.5 / i64)
min(0.5 / i64, i64)
min(0.5 ^ 0.5)
min(0.5 ^ f32)
min(0.5 ^ i)
min(0.5 ^ i32)
min(0.5) != i64
min(0.5) * i32
min(0.5) ** f64
min(0.5) ** i
min(0.5) + f64 ^ i64
min(0.5) - f32
min(0.5) - f64
min(0.5) / i32
min(0.5) < i32
min(0.5) == f32 / f32
min(0.5) == i
min(0.5) >= i64
min(0.5) ^ (f32 - i64)
min(0.5, 0.5) < f32 + f64
min(1 % 1)
min(1 % i)
min(1 % i32)
min(1 % i64)
min(1 * 0.5)
min(1 * 1)
min(1 * f32)
min(1 * i)
min(1 * i32)
min(1 ** i)
min(1 + 0.5)
min(1 + 1)
min(1 + f32)
min(1 + i64)
min(1 - 1)
min(1 - f64)
min(1 - i)
min(1 - i32)
min(1 - i64)
min(1 / 0.5)
min(1 / f32)
min(1 / i)
min(1 / i32)
min(1 / i64)
min(1 ^ 0.5)
min(1 ^ 1)
min(1 ^ f32)
min(1 ^ i)
min(1 ^ i32)
min(1 ^ i64)
min(1) != i
min(1) - i
min(1) .. i32
min(1) <= f32
min(1) <= f64
min(1) > i64
min(1) >= i
min(1) >= i64
min(1) ^ f64
min(abs(0.5))
min(abs(1))
min(abs(f32))
min(abs(f64))
min(abs(i))
min(abs(i32))
min(array[1])
min(array[i32])
min(array[i])
min(bitnand(1, i32))
min(bitnot(1))
min(bitnot(i))
min(bitnot(i32))
min(bitnot(i32), i64)
min(bitnot(i64))
min(ceil(0.5))
min(ceil(1))
min(ceil(f32))
min(ceil(f64))
min(ceil(i))
min(count(array, false))
min(count(list, ok))
min(f32 * 1)
min(f32 * i64)
min(f32 ** 0.5)
min(f32 - 0.5)
min(f32 - 1)
min(f32 - f64)
min(f32 - i)
min(f32 - i64)
min(f32 / 1)
min(f32 / i64)
min(f32 ^ i32)
min(f32)
min(f32) * i64
min(f32) / f64
min(f32) / i32
min(f32) == i
min(f32) >= f64
min(f32, -0.5)
min(f32, ceil(1))
min(f32, f32)
min(f32, f64)
min(f32, i)
min(f32, i32)
min(f32, i64)
min(f64 * 1)
min(f64 * f64)
min(f64 ** f32)
min(f64 ** f64)
min(f64 + 0.5)
min(f64 + f32)
min(f64 + i64)
min(f64 - 1)
min(f64 - i)
min(f64 - i32)
min(f64 / 0.5)
min(f64 / f32)
min(f64 / i)
min(f64 / i64)
min(f64 ^ 1)
min(f64)
min(f64) * f64
min(f64) * i32
min(f64) / i
min(f64) >= f64
min(f64, 0.5 ** i64)
min(f64, 0.5) == f64
min(f64, f32)
min(f64, f64)
min(f64, i)
min(f64, i32)
min(f64, i64)
min(false ? foo : i32)
min(false ? greet : f32)
min(find(array, false))
min(find(array, ok))
min(findIndex(array, false))
min(findLastIndex(array, i32 > #))
min(findLastIndex(array, ok))
min(findLastIndex(array, true))
min(findLastIndex(list, ok))
min(first(array))
min(float(0.5))
min(float(1))
min(float(f32))
min(float(f64))
min(float(i))
min(float(i64), i)
min(floor(0.5))
min(floor(1))
min(floor(f32))
min(floor(i))
min(floor(i32))
min(floor(i64))
min(half(0.5))
min(half(1))
min(half(1), -1)
min(half(f64 - 0.5))
min(half(f64))
min(i % 1)
min(i % i64)
min(i * i)
min(i ** 0.5)
min(i ** i)
min(i + 1)
min(i - 0.5)
min(i - f64)
min(i - i32)
min(i / 1) + f64
min(i / f64)
min(i ^ f32)
min(i ^ f64)
min(i ^ i)
min(i)
min(i) * f32
min(i) ** i64
min(i) / f64
min(i) / i
min(i) < f64
min(i) < i32
min(i) >= i32
min(i) ^ f32
min(i, f32)
min(i, f32, i) + i32
min(i, f64)
min(i, i)
min(i, i32)
min(i, i64)
min(i, last(array))
min(i32 % 1)
min(i32 * f32)
min(i32 * i)
min(i32 ** 0.5)
min(i32 ** i32)
min(i32 + i32)
min(i32 + i64)
min(i32 - 0.5)
min(i32 - i64)
min(i32 / 0.5)
min(i32 / f64)
min(i32 ^ 0.5)
min(i32 ^ f32)
min(i32 ^ f64)
min(i32 ^ i64)
min(i32)
min(i32) - i
min(i32) .. i32
min(i32) / i
min(i32) < i
min(i32) <= f32
min(i32) <= i
min(i32) > f32
min(i32) > i64 + f64
min(i32) >= i
min(i32) ^ f32
min(i32) ^ i64
min(i32, f32)
min(i32, f64 * 0.5)
min(i32, f64)
min(i32, i)
min(i32, i32)
min(i32, i64)
min(i64 % 1)
min(i64 * 0.5)
min(i64 * 1)
min(i64 * bitnot(i64))
min(i64 * i)
min(i64 * i32)
min(i64 * i64)
min(i64 ** 0.5)
min(i64 ** f64)
min(i64 ** i)
min(i64 ** i32)
min(i64 + f32)
min(i64 - f64)
min(i64 - i32)
min(i64 / 1)
min(i64 / f32)
min(i64 / i)
min(i64 / i32)
min(i64 / i64)
min(i64 ^ 0.5)
min(i64 ^ 1)
min(i64 ^ f64)
min(i64 ^ i32)
min(i64)
min(i64) / f32
min(i64) < i32
min(i64) >= f64
min(i64) not in array
min(i64, f32)
min(i64, f64)
min(i64, i)
min(i64, i32)
min(i64, i64)
min(i64, i64) < i64
min(int(0.5))
min(int(1))
min(int(f32))
min(int(f64))
min(int(i))
min(int(i32))
min(int(i64))
min(last(1 .. 1))
min(last(array))
min(len(array))
min(len(list))
min(max(0.5))
min(max(1, 0.5))
min(max(f32))
min(max(f64))
min(max(i))
min(max(i64, 1))
min(mean(array))
min(min(1))
min(min(1, 1, 1))
min(min(1, i, f32))
min(min(i))
min(min(i32))
min(min(reduce(list, f32)))
min(ok ? array : false)
min(ok ? f64 : i)
min(ok ? half : ok)
min(ok ? i : f32)
min(ok ? array : score)
min(ok ? true : div)
min(reduce(array, #))
min(reduce(array, 0.5))
min(reduce(array, 1))
min(reduce(list, 1))
min(round(0.5))
min(round(1))
min(round(f32))
min(round(i32))
min(round(i64))
min(score(1))
min(score(i))
min(sum(array))
min(true ? i : "foo")
min(true ? i : i32)
min(true ? i64 : "foo")
nil != array != nil ? add : half
nil != array && ok
nil != div == reduce(array, ok)
nil != f64 || ok || false
nil != false && ok
nil != false or i == nil
nil != foo and ok
nil != foo.Bar
nil != foo.Qux
nil != foo.String
nil != foo.String()
nil != foo?.Bar
nil != foo?.Qux
nil != foo?.String
nil != foo?.String()
nil != nil ? score : div
nil != true || i < 1
nil == "foo" != ok
nil == "foo" && 0.5 < f64
nil == 0.5 and reduce(list, true)
nil == add && 0.5 >= 0.5
nil == add || f32 >= i64
nil == array and ok
nil == array or ok
nil == array[i64]
nil == div ? f64 : ok
nil == false && nil != true
nil == false ? i64 : toBase64("bar")
nil == foo.Bar
nil == foo.Qux
nil == foo.String
nil == foo.String()
nil == foo?.Bar
nil == foo?.Qux
nil == foo?.String
nil == greet ? i : greet("bar")
nil == list || f32 == i
nil == list[i32]
nil == nil and ok
nil in array || score == nil
nil in list != not false
none(1 .. i, # < #)
none(1 .. i32, # <= #)
none([foo, list, 1 >= i], ok)
none([greet], ok)
none([true], #)
none(array, !(i32 != i32))
none(array, !false)
none(array, !true)
none(array, "bar" endsWith "foo")
none(array, # != #)
none(array, # != 0.5)
none(array, # != 1)
none(array, # != f32)
none(array, # != f64)
none(array, # != i)
none(array, # < #)
none(array, # < 0.5)
none(array, # < f32)
none(array, # < i32)
none(array, # < i64)
none(array, # <= #)
none(array, # <= 0.5)
none(array, # <= 1)
none(array, # <= f32)
none(array, # <= i)
none(array, # <= i32)
none(array, # <= i64)
none(array, # == #)
none(array, # == 0.5)
none(array, # == f32)
none(array, # == i32)
none(array, # == i64)
none(array, # == nil)
none(array, # > #)
none(array, # > 0.5)
none(array, # > i)
none(array, # >= #)
none(array, # >= 0.5)
none(array, # >= 1)
none(array, # >= f32)
none(array, # >= f64)
none(array, # >= i32)
none(array, # >= i64)
none(array, # in array)
none(array, 0.5 != #)
none(array, 0.5 != 1)
none(array, 0.5 < #)
none(array, 0.5 < i64)
none(array, 0.5 <= #)
none(array, 0.5 <= 1)
none(array, 0.5 <= f64)
none(array, 0.5 == #)
none(array, 0.5 > 0.5)
none(array, 0.5 > 1)
none(array, 0.5 > f32)
none(array, 0.5 >= #)
none(array, 0.5 >= 1)
none(array, 1 < #)
none(array, 1 <= #)
none(array, 1 == 1)
none(array, 1 > #)
none(array, any(array, true))
none(array, f32 != #)
none(array, f32 < 0.5)
none(array, f32 < 1)
none(array, f32 == 1)
none(array, f32 > #)
none(array, f32 >= #)
none(array, f32 >= 1)
none(array, f32 >= f32)
none(array, f64 != 1)
none(array, f64 == #)
none(array, f64 > #)
none(array, f64 >= #)
none(array, greet != div)
none(array, greet != half)
none(array, i != #)
none(array, i < #)
none(array, i < f64)
none(array, i <= #)
none(array, i > #)
none(array, i >= #)
none(array, i >= 0.5)
none(array, i >= i32)
none(array, i32 != #)
none(array, i32 != i)
none(array, i32 != nil)
none(array, i32 < #)
none(array, i32 > #)
none(array, i64 != #)
none(array, i64 != 0.5)
none(array, i64 > i64)
none(array, i64 >= #)
none(array, nil != "bar")
none(array, nil != #)
none(array, nil != false)
none(array, nil != greet)
none(array, nil == #)
none(array, nil == 1)
none(array, nil == f32)
none(array, nil == greet)
none(array, nil == half)
none(array, not (# == #))
none(array, not (# >= 1))
none(array, not false)
none(array, ok)
none(array, reduce(array, true))
none(filter(array, # >= f64), ok)
none(groupBy(array, #).f64, # or #.Bar)
none(groupBy(array, #)?.array, fromJSON(#))
none(groupBy(array, #)?.f32, #)
none(groupBy(array, #)?.greet, #)
none(groupBy(list, #).div, ok)
none(groupBy(list, #).greet, #)
none(groupBy(list, 0.5).i, ok)
none(i .. i, ok)
none(i .. i32, # <= #)
none(list, !false)
none(list, !ok)
none(list, "bar" contains "bar")
none(list, # != #)
none(list, # != foo)
none(list, # != nil)
none(list, # == #)
none(list, # == foo)
none(list, # in list)
none(list, # not in list)
none(list, (0.5 not in array) || ok)
none(list, 0.5 != i32)
none(list, 0.5 > f64)
none(list, 0.5 > i)
none(list, 1 != i64)
none(list, 1 != nil)
none(list, 1 == f32)
none(list, 1 > 0.5)
none(list, all(array, ok))
none(list, div == #?.Qux)
none(list, f32 != 1 ** f64)
none(list, f32 >= 0.5)
none(list, f32 in array)
none(list, f32 not in array)
none(list, f64 <= i32)
none(list, f64 >= 1)
none(list, false) ? ok : half
none(list, false) || ok
none(list, foo != #)
none(list, foo == foo)
none(list, i != i)
none(list, i != i64)
none(list, i >= f32)
none(list, i32 == f32)
none(list, i32 > 1)
none(list, i32 > i64)
none(list, i32 not in array)
none(list, i64 != 0.5)
none(list, i64 > i64)
none(list, nil != #)
none(list, nil != greet)
none(list, nil != i64)
none(list, nil == #)
none(list, nil == list)
none(list, not false)
none(list, ok)
none(list, one(array, true))
none(list, true && ok)
none(list, true) and ok
none(map(array, #), ok)
none(map(array, div), # != #)
none(map(array, f64 == #), ok)
none(map(list, "bar"), # endsWith #)
none(map(list, #), nil == list)
none(map(list, #), ok)
none(map(list, 1), i > #)
none(map(list, ok), # ? true : #)
none(map(list, ok), #)
none(map(list, score), ok)
none(sort(filter(array, false)), #?.div > greet(#))
not !(0.5 != i64)
not !(i < 1)
not !(i >= 0.5)
not !(i32 != i32)
not !(nil != false)
not !false
not !not false
not !ok
not !true
not ("bar" != "bar")
not ("bar" != "foo")
not ("bar" != nil)
not ("bar" < "bar")
not ("bar" < "foo")
not ("bar" <= "bar")
not ("bar" <= "foo")
not ("bar" == "bar")
not ("bar" == "foo")
not ("bar" == nil)
not ("bar" > "bar")
not ("bar" > "foo")
not ("bar" >= "bar")
not ("bar" >= "foo")
not ("bar" contains "bar")
not ("bar" contains "foo")
not ("bar" endsWith "bar")
not ("bar" endsWith "foo")
not ("bar" in foo)
not ("bar" matches "bar")
not ("bar" matches "foo")
not ("bar" not contains "bar")
not ("bar" not contains "foo")
not ("bar" not endsWith "bar")
not ("bar" not endsWith "foo")
not ("bar" not in foo)
not ("bar" not matches "bar")
not ("bar" not matches "foo")
not ("bar" not startsWith "bar")
not ("bar" not startsWith "foo")
not ("bar" startsWith "bar")
not ("bar" startsWith "foo")
not ("foo" != "bar")
not ("foo" != "foo")
not ("foo" != nil)
not ("foo" < "bar")
not ("foo" < "foo")
not ("foo" <= "bar")
not ("foo" <= "foo")
not ("foo" == "bar")
not ("foo" == "foo")
not ("foo" == nil)
not ("foo" > "bar")
not ("foo" > "foo")
not ("foo" >= "bar")
not ("foo" >= "foo")
not ("foo" contains "bar")
not ("foo" contains "foo")
not ("foo" endsWith "bar")
not ("foo" endsWith "foo")
not ("foo" in foo)
not ("foo" matches "bar")
not ("foo" matches "foo")
not ("foo" not contains "bar")
not ("foo" not contains "foo")
not ("foo" not endsWith "bar")
not ("foo" not endsWith "foo")
not ("foo" not in foo)
not ("foo" not matches "foo")
not ("foo" not startsWith "foo")
not ("foo" startsWith "bar")
not ("foo" startsWith "foo")
not (0.5 != 0.5)
not (0.5 != 1)
not (0.5 != f32)
not (0.5 != f64)
not (0.5 != i)
not (0.5 != i32)
not (0.5 != i64)
not (0.5 != nil)
not (0.5 < 0.5)
not (0.5 < 1)
not (0.5 < f32)
not (0.5 < f64)
not (0.5 < i)
not (0.5 < i32)
not (0.5 < i64)
not (0.5 <= 0.5)
not (0.5 <= 1)
not (0.5 <= f32)
not (0.5 <= f64)
not (0.5 <= i)
not (0.5 <= i32)
not (0.5 <= i64)
not (0.5 == 0.5)
not (0.5 == 1)
not (0.5 == f32)
not (0.5 == f64)
not (0.5 == i && i32 != i32)
not (0.5 == i)
not (0.5 == i32)
not (0.5 == i64)
not (0.5 == nil)
not (0.5 > 0.5)
not (0.5 > 1)
not (0.5 > f32)
not (0.5 > f64)
not (0.5 > i)
not (0.5 > i32)
not (0.5 > i64)
not (0.5 >= 0.5)
not (0.5 >= 1)
not (0.5 >= f32)
not (0.5 >= f64)
not (0.5 >= i)
not (0.5 >= i32)
not (0.5 >= i64)
not (0.5 in array)
not (0.5 not in array)
not (1 != 0.5)
not (1 != 1)
not (1 != f32)
not (1 != f64)
not (1 != i)
not (1 != i32)
not (1 != i64)
not (1 != nil)
not (1 < 0.5)
not (1 < 1)
not (1 < f32)
not (1 < f64)
not (1 < i)
not (1 < i32)
not (1 < i64)
not (1 <= 0.5)
not (1 <= 1)
not (1 <= f32)
not (1 <= f64)
not (1 <= i)
not (1 <= i32)
not (1 <= i64)
not (1 == 0.5)
not (1 == 1)
not (1 == f32)
not (1 == f64)
not (1 == i)
not (1 == i32)
not (1 == i64)
not (1 == nil)
not (1 > 0.5)
not (1 > 1)
not (1 > f32)
not (1 > f64)
not (1 > i)
not (1 > i32)
not (1 > i64)
not (1 >= 0.5)
not (1 >= 1)
not (1 >= f32)
not (1 >= f64)
not (1 >= i)
not (1 >= i32)
not (1 >= i64)
not (1 in array)
not (1 not in array)
not (add != add)
not (add != greet)
not (add != half)
not (add != nil)
not (add != score)
not (add == div)
not (add == greet)
not (add == half)
not (add == nil)
not (add == score)
not (array != array)
not (array != list)
not (array != nil)
not (array == array)
not (array == list)
not (array == nil)
not (array[i32] > i64)
not (div != add)
not (div != div)
not (div != foo?.Qux)
not (div != greet)
not (div != half)
not (div != nil)
not (div != score)
not (div == add)
not (div == div)
not (div == greet)
not (div == half)
not (div == nil)
not (div == score)
not (f32 != 0.5)
not (f32 != 1)
not (f32 != f32)
not (f32 != f64)
not (f32 != i)
not (f32 != i32)
not (f32 != i64)
not (f32 != nil)
not (f32 < 0.5)
not (f32 < 1)
not (f32 < f32)
not (f32 < f64)
not (f32 < i)
not (f32 < i32)
not (f32 < i64)
not (f32 <= 0.5)
not (f32 <= 1)
not (f32 <= f64)
not (f32 <= i)
not (f32 <= i32)
not (f32 <= i64)
not (f32 == 0.5)
not (f32 == 1)
not (f32 == f32)
not (f32 == f64)
not (f32 == i)
not (f32 == i32)
not (f32 == i64)
not (f32 == nil)
not (f32 > 0.5)
not (f32 > 1)
not (f32 > f32)
not (f32 > f64)
not (f32 > i)
not (f32 > i32)
not (f32 > i64)
not (f32 >= 0.5)
not (f32 >= 1)
not (f32 >= f32)
not (f32 >= f64)
not (f32 >= i)
not (f32 >= i32)
not (f32 >= i64)
not (f32 in array)
not (f32 not in array)
not (f64 != 0.5)
not (f64 != 1)
not (f64 != f32)
not (f64 != f64)
not (f64 != i)
not (f64 != i32)
not (f64 != i64)
not (f64 != nil)
not (f64 < 0.5)
not (f64 < 1)
not (f64 < f32)
not (f64 < f64)
not (f64 < i32)
not (f64 < i64)
not (f64 <= -0.5)
not (f64 <= 0.5)
not (f64 <= 1)
not (f64 <= f32)
not (f64 <= f64)
not (f64 <= i)
not (f64 <= i32)
not (f64 <= i64)
not (f64 == 0.5)
not (f64 == 1)
not (f64 == f64)
not (f64 == i)
not (f64 == i32)
not (f64 == i64)
not (f64 == nil)
not (f64 > 0.5)
not (f64 > 1)
not (f64 > f32)
not (f64 > f64)
not (f64 > i)
not (f64 > i32)
not (f64 > i64)
not (f64 >= 0.5)
not (f64 >= 1)
not (f64 >= f32)
not (f64 >= f64)
not (f64 >= i)
not (f64 >= i32)
not (f64 >= i64)
not (f64 in array)
not (f64 not in array)
not (false != false)
not (false != nil)
not (false != ok)
not (false != true)
not (false && false)
not (false && ok)
not (false == nil)
not (false == ok)
not (false and false)
not (false and ok)
not (false and true)
not (false or false)
not (false or ok)
not (false or true)
not (false || false)
not (false || ok)
not (false || true)
not (findIndex(list, ok) != i ^ f64)
not (foo != foo)
not (foo != nil)
not (foo == foo)
not (foo == nil)
not (foo in list)
not (foo not in list)
not (greet != add)
not (greet != div)
not (greet != greet)
not (greet != half)
not (greet != nil)
not (greet != score)
not (greet == add)
not (greet == div)
not (greet == greet)
not (greet == half)
not (greet == nil)
not (greet == score)
not (half != add)
not (half != div)
not (half != greet)
not (half != half)
not (half != nil)
not (half != score)
not (half == add)
not (half == div)
not (half == foo?.String)
not (half == greet)
not (half == half)
not (half == nil)
not (half == score)
not (i != 0.5)
not (i != 1)
not (i != f32)
not (i != f64)
not (i != i)
not (i != i32)
not (i != i64)
not (i != nil)
not (i < 0.5)
not (i < 1)
not (i < f32)
not (i < f64)
not (i < i)
not (i < i32)
not (i < i64)
not (i <= 0.5)
not (i <= 1)
not (i <= f32)
not (i <= f64)
not (i <= i)
not (i <= i32)
not (i <= i64)
not (i == 0.5)
not (i == 1)
not (i == ceil(f64))
not (i == f32)
not (i == f64)
not (i == i)
not (i == i32)
not (i == i64)
not (i == nil)
not (i > 0.5)
not (i > 1)
not (i > f32)
not (i > f64)
not (i > i)
not (i > i32)
not (i > i64)
not (i >= 0.5)
not (i >= 1)
not (i >= f32)
not (i >= f64)
not (i >= i)
not (i >= i32)
not (i >= i64)
not (i in array)
not (i not in array)
not (i32 != 0.5)
not (i32 != 1)
not (i32 != f32)
not (i32 != f64)
not (i32 != i)
not (i32 != i32)
not (i32 != i64)
not (i32 != nil)
not (i32 < 0.5)
not (i32 < 1)
not (i32 < f32 ** 0.5)
not (i32 < f32)
not (i32 < f64)
not (i32 < i)
not (i32 < i32)
not (i32 < i64)
not (i32 <= 0.5)
not (i32 <= 1)
not (i32 <= f32)
not (i32 <= f64)
not (i32 <= i)
not (i32 <= i32)
not (i32 <= i64)
not (i32 == -i)
not (i32 == 0.5)
not (i32 == 1)
not (i32 == f32)
not (i32 == f64)
not (i32 == i)
not (i32 == i32)
not (i32 == i64)
not (i32 == nil)
not (i32 > 0.5)
not (i32 > 1)
not (i32 > f32)
not (i32 > f64)
not (i32 > i)
not (i32 > i32)
not (i32 > i64)
not (i32 >= 0.5)
not (i32 >= 1)
not (i32 >= f32)
not (i32 >= f64)
not (i32 >= i)
not (i32 >= i32)
not (i32 >= i64)
not (i32 in array)
not (i32 not in array)
not (i64 != 0.5)
not (i64 != 1)
not (i64 != f32)
not (i64 != f64)
not (i64 != i)
not (i64 != i32)
not (i64 != i64)
not (i64 != nil)
not (i64 < 0.5)
not (i64 < 1)
not (i64 < f32)
not (i64 < f64)
not (i64 < i)
not (i64 < i32)
not (i64 < i64)
not (i64 <= 0.5)
not (i64 <= 1)
not (i64 <= f32)
not (i64 <= f64)
not (i64 <= i)
not (i64 <= i32)
not (i64 <= i64)
not (i64 == 0.5)
not (i64 == 1)
not (i64 == f32)
not (i64 == f64)
not (i64 == i)
not (i64 == i32)
not (i64 == i64)
not (i64 == nil)
not (i64 > 0.5)
not (i64 > 1)
not (i64 > f32)
not (i64 > f64)
not (i64 > i)
not (i64 > i32)
not (i64 > i64)
not (i64 >= 0.5)
not (i64 >= 1)
not (i64 >= f32)
not (i64 >= f64)
not (i64 >= i)
not (i64 >= i32)
not (i64 >= i64)
not (i64 not in array)
not (list != array)
not (list != list)
not (list != nil)
not (list == array)
not (list == list)
not (list == nil)
not (nil != "bar")
not (nil != "foo")
not (nil != 0.5)
not (nil != 1)
not (nil != add)
not (nil != array)
not (nil != div)
not (nil != f32)
not (nil != f64)
not (nil != false)
not (nil != foo)
not (nil != half)
not (nil != i)
not (nil != i32)
not (nil != i64)
not (nil != list)
not (nil != nil)
not (nil != ok)
not (nil != score)
not (nil != true)
not (nil == "bar")
not (nil == "foo")
not (nil == 0.5)
not (nil == 1)
not (nil == add)
not (nil == array)
not (nil == div)
not (nil == f32)
not (nil == f64)
not (nil == false)
not (nil == foo)
not (nil == greet)
not (nil == half)
not (nil == i)
not (nil == i32)
not (nil == i64)
not (nil == list)
not (nil == nil)
not (nil == ok)
not (nil == score)
not (nil == true)
not (nil in array)
not (nil in list)
not (nil not in array)
not (nil not in list)
not (ok != nil)
not (ok != ok)
not (ok != true)
not (ok && false)
not (ok && ok)
not (ok && true)
not (ok == false)
not (ok == nil)
not (ok == ok)
not (ok == true)
not (ok and false)
not (ok and ok)
not (ok and true)
not (ok or false)
not (ok or ok)
not (ok or true)
not (ok || ok)
not (ok || true)
not (score != add)
not (score != div)
not (score != greet)
not (score != half)
not (score != nil)
not (score != score)
not (score == add)
not (score == div)
not (score == greet)
not (score == half)
not (score == nil)
not (score == score)
not (true != false)
not (true != nil)
not (true != ok)
not (true != true)
not (true && false)
not (true && true)
not (true == false)
not (true == nil)
not (true == ok)
not (true == true)
not (true and false)
not (true and ok)
not (true and true)
not (true or false)
not (true or ok)
not (true or true)
not (true || false)
not (true || ok)
not (true || true)
not all(array, false)
not all(array, ok)
not all(array, true)
not all(list, nil == #)
not all(list, ok)
not all(list, true)
not any(array, false)
not any(array, ok)
not any(array, true)
not any(list, false)
not any(list, ok)
not any(list, true)
not false && nil == f64
not false && ok
not false == ok
not false ? "foo" : "foo"
not false ? 0.5 : "foo"
not false ? 0.5 : array
not false ? 0.5 : div
not false ? 0.5 : foo
not false ? 0.5 : i64
not false ? 0.5 : nil
not false ? 1 : 0.5
not false ? add : array
not false ? array : 0.5
not false ? array : 1
not false ? array : f64
not false ? array : i
not false ? array : true
not false ? div : 0.5
not false ? div : f64
not false ? f32 : 0.5
not false ? f32 : 1
not false ? f32 : i
not false ? f32 : nil
not false ? f32 : score
not false ? f64 : "foo"
not false ? f64 : f64
not false ? false : half
not false ? false : list
not false ? foo : f64
not false ? greet : 1
not false ? i : "bar"
not false ? i : 1
not false ? i : array
not false ? i : i
not false ? i32 : greet
not false ? i64 : list
not false ? list : i
not false ? list : true
not false ? nil : f32
not false ? nil : half
not false ? nil : ok
not false ? ok : 1
not false ? score : ok
not false ? true : f64
not false ? true : nil
not false or false == false
not false or ok
not false || ok
not none(array, # > f32)
not none(array, false)
not none(array, ok)
not none(array, true)
not none(list, false)
not none(list, ok)
not none(list, true)
not not (f64 <= 1)
not not (i32 < i64)
not not (i64 >= f64)
not not (nil != greet)
not not (ok or ok)
not not false
not not ok
not not true
not ok
not ok != ok
not ok && 1 > 0.5
not ok && ok
not ok ? "bar" : list
not ok ? "foo" : 0.5
not ok ? "foo" : 1
not ok ? 0.5 : "bar"
not ok ? 0.5 : 0.5
not ok ? 0.5 : i
not ok ? 1 : f64
not ok ? 1 : nil
not ok ? add : array
not ok ? add : groupBy(array, #)
not ok ? array : 1
not ok ? array : f32
not ok ? div : f64
not ok ? f32 : f32
not ok ? f64 : f64
not ok ? f64 : half
not ok ? foo : foo
not ok ? greet : 0.5
not ok ? half : half
not ok ? i : 1
not ok ? i : add
not ok ? i32 : 1
not ok ? i32 : i
not ok ? i64 : f32
not ok ? i64 : f64
not ok ? nil : "bar"
not ok ? nil : 0.5
not ok ? nil : foo
not ok ? nil : greet
not ok ? nil : i
not ok ? ok : false
not ok ? ok : list
not ok ? score : "foo"
not ok ? score : score
not ok ? true : 1
not ok ? true : div
not ok ? true : half
not ok ? true : i64
not ok ? true : nil
not ok and "foo" == "foo"
not ok and i32 > 0.5
not ok and ok
not ok or 1 != i
not ok or ok
not ok || array == list
not ok || ok
not one(array, false)
not one(array, ok)
not one(array, true)
not one(list, false)
not one(list, ok)
not one(list, true)
not reduce(array, false)
not reduce(array, ok)
not reduce(array, true)
not reduce(list, false)
not reduce(list, ok)
not reduce(list, true)
not true != ok
not true && ok
not true == ok
not true ? "bar" : array
not true ? "bar" : i32
not true ? "foo" : f32
not true ? "foo" : f64
not true ? 0.5 : foo
not true ? 0.5 : greet
not true ? 0.5 : i
not true ? 0.5 : i64
not true ? 1 : f32
not true ? add : i32
not true ? add : ok
not true ? array : nil
not true ? f32 : 0.5
not true ? f32 : div
not true ? f64 : 1
not true ? f64 : array
not true ? foo : greet
not true ? foo : ok
not true ? greet : 1
not true ? greet : i64
not true ? greet : list
not true ? greet : true
not true ? half : half
not true ? i : f64
not true ? i64 : "foo"
not true ? i64 : array
not true ? i64 : i64
not true ? list : "bar"
not true ? list : f64
not true ? list : foo
not true ? nil : div
not true ? ok : nil
not true ? score : f32
not true ? score : score
not true ? true : 1
not true and ok ? i : half
not true || ok
ok
ok != !ok
ok != (0.5 not in array)
ok != false != ok
ok != false ? f32 : list
ok != nil == nil
ok != nil ? f32 : greet
ok != nil ? nil : array
ok != not ok
ok != ok
ok != ok ? false : "bar"
ok != sum(array)
ok && !false
ok && !ok
ok && "foo" matches "bar"
ok && ("bar" not endsWith "bar")
ok && (false || ok)
ok && (ok or false)
ok && (true || true)
ok && 0.5 < 1
ok && 0.5 < f64
ok && 0.5 <= 1
ok && 0.5 == nil
ok && 0.5 > i64
ok && 1 != 0.5
ok && 1 != i32
ok && 1 <= 1
ok && 1 <= f64
ok && 1 == 0.5
ok && 1 == nil
ok && 1 >= f64
ok && add != greet
ok && f32 != i
ok && f32 >= i64
ok && f64 <= 0.5
ok && false != ok
ok && false ? i : list
ok && false ? ok : ok
ok && i < 0.5
ok && i < i64
ok && i == 0.5
ok && i > f64
ok && i32 > 0.5
ok && i32 >= i64
ok && i64 != i
ok && i64 == 0.5
ok && nil != 0.5
ok && nil != 1
ok && nil == ok
ok && not false
ok && not true
ok && ok
ok && ok ? nil : div
ok && ok and false
ok && true != false
ok && true && 1 >= i64
ok == !false
ok == !true
ok == ("bar" not endsWith "foo")
ok == (0.5 not in array)
ok == (false and ok)
ok == (i32 not in array)
ok == (nil not in list)
ok == false ? f64 : 1
ok == false ? score : 1
ok == nil ? i64 : add
ok == nil ? nil : f64
ok == none(array, true)
ok == not false
ok == ok
ok == ok != false
ok == true && ok
ok ? "bar" : f64 <= f32
ok ? "foo" : foo.Bar
ok ? -0.5 : add
ok ? -f64 : list
ok ? -i32 : i
ok ? 0.5 / 0.5 : f64
ok ? 0.5 : i32 >= i64
ok ? 0.5 > 1 : 0.5 * i64
ok ? 1 + i : i32
ok ? 1 / i64 : greet
ok ? 1 : foo.Bar
ok ? 1 : foo?.Qux
ok ? 1 : score != greet
ok ? abs(i64) : i64
ok ? add : abs(f32)
ok ? add : add
ok ? add : array
ok ? add : f64
ok ? add : foo
ok ? add : foo?.String
ok ? add : greet
ok ? add : half
ok ? add : i
ok ? add : i64
ok ? add : list
ok ? add : ok
ok ? array : array
ok ? array : f32
ok ? array : f64 + f64
ok ? array : foo
ok ? array : foo.String
ok ? array : foo?.String
ok ? array : greet
ok ? array : greet(nil)
ok ? array : i
ok ? array : i32
ok ? array : list
ok ? array : ok
ok ? array : score
ok ? div : add
ok ? div : array
ok ? div : div
ok ? div : f64
ok ? div : foo
ok ? div : foo.Bar
ok ? div : greet
ok ? div : half
ok ? div : i32 > reduce(array, #)
ok ? div : nil == true
ok ? div : ok
ok ? div : score
ok ? f32 != i32 : f32
ok ? f32 ** i64 : score
ok ? f32 : "foo" endsWith lower(nil)
ok ? f32 : -0.5
ok ? f32 : add
ok ? f32 : array
ok ? f32 : div
ok ? f32 : f32
ok ? f32 : f64
ok ? f32 : foo
ok ? f32 : half
ok ? f32 : i32
ok ? f32 : i64
ok ? f32 : ok
ok ? f32 : score
ok ? f64 : add
ok ? f64 : array
ok ? f64 : div
ok ? f64 : f64 - f64
ok ? f64 : false != true
ok ? f64 : foo
ok ? f64 : foo.String
ok ? f64 : greet
ok ? f64 : i32
ok ? f64 : i32 % i32
ok ? f64 : i32 >= -i64
ok ? f64 : ok
ok ? f64 : score
ok ? false : foo.Bar
ok ? foo : div
ok ? foo : f32
ok ? foo : foo
ok ? foo : greet
ok ? foo : half
ok ? foo : i32
ok ? foo : i32 > i32
ok ? foo : i64
ok ? foo : list
ok ? foo : ok
ok ? foo : score
ok ? foo.Qux : ok
ok ? greet : 0.5 > i
ok ? greet : 1 <= 0.5
ok ? greet : add
ok ? greet : div
ok ? greet : f32
ok ? greet : f64
ok ? greet : foo
ok ? greet : half
ok ? greet : i64
ok ? greet : list
ok ? greet : map(list, i)
ok ? greet : ok
ok ? greet : score
ok ? half : add
ok ? half : f32
ok ? half : f64
ok ? half : foo
ok ? half : foo?.Qux
ok ? half : greet
ok ? half : half
ok ? half : list
ok ? half : nil in list
ok ? half : ok
ok ? half : reduce(list, "bar")
ok ? half : string(array)
ok ? half(1) : add
ok ? i : 1 / i64
ok ? i : add
ok ? i : array
ok ? i : f32 <= 0.5
ok ? i : foo
ok ? i : half
ok ? i : i
ok ? i : i32
ok ? i : i64
ok ? i : list
ok ? i : ok
ok ? i : score
ok ? i32 : 1 - f64
ok ? i32 : add
ok ? i32 : div
ok ? i32 : f32
ok ? i32 : f32 + 0.5
ok ? i32 : f64
ok ? i32 : foo
ok ? i32 : foo.Qux
ok ? i32 : greet
ok ? i32 : i
ok ? i32 : i32
ok ? i32 : i32 + i32
ok ? i32 : list
ok ? i32 : ok
ok ? i32 : score
ok ? i64 : (ok ? list : half)
ok ? i64 : div
ok ? i64 : f32
ok ? i64 : foo
ok ? i64 : foo.String
ok ? i64 : half
ok ? i64 : i
ok ? i64 : i32
ok ? i64 : i64
ok ? i64 : list
ok ? i64 : ok
ok ? i64 ^ f32 : foo
ok ? list : 0.5 * f64
ok ? list : add
ok ? list : array
ok ? list : div
ok ? list : div(i64, 1)
ok ? list : f32
ok ? list : foo.String
ok ? list : greet
ok ? list : half
ok ? list : i
ok ? list : i - f32
ok ? list : i64
ok ? list : list
ok ? list : list != array
ok ? list : not ok
ok ? list : score
ok ? map(list, #) : add
ok ? nil : 0.5 <= f64
ok ? nil : foo.Qux
ok ? nil : foo?.Bar
ok ? not false : i32
ok ? ok : 0.5 ** i32
ok ? ok : add
ok ? ok : array
ok ? ok : div
ok ? ok : f32
ok ? ok : f64 ** int(f64)
ok ? ok : foo
ok ? ok : foo.String
ok ? ok : greet
ok ? ok : half
ok ? ok : i32
ok ? ok : i64
ok ? ok : list
ok ? ok : ok
ok ? reduce(array, false) : score
ok ? reduce(list, #) : list
ok ? score : 1 == i32
ok ? score : div
ok ? score : f32
ok ? score : f64
ok ? score : greet
ok ? score : half
ok ? score : i
ok ? score : i32
ok ? score : min(i64)
ok ? score : score
ok ? score : true == nil
ok ? toJSON(i64) : div
ok and !ok
ok and "bar" < "foo"
ok and ("foo" not contains "bar")
ok and 1 < i64
ok and 1 == 1
ok and 1 == i64
ok and add == nil
ok and div == half
ok and f32 != 1
ok and f32 >= 1
ok and greet != div
ok and greet == greet
ok and i == 0.5
ok and i32 < f32
ok and i32 <= i64
ok and i32 > i32
ok and i64 < i32
ok and i64 <= i64
ok and i64 > 1
ok and i64 >= i
ok and i64 in array
ok and list != nil
ok and nil == array
ok and nil == nil
ok and nil in array
ok and nil in list
ok and nil not in array
ok and not ok
ok and not true
ok and ok
ok and ok && ok
ok and true ? f64 : add
ok and true ? greet : i
ok in groupBy(array, "bar")
ok in groupBy(list, #)
ok in groupBy(list, i32)
ok in {"bar": true}?.greet
ok not in groupBy(array, # != i32)
ok not in groupBy(array, 0.5)
ok not in groupBy(array, f64)
ok not in groupBy(list, #)?.f64
ok not in groupBy(list, f64)?.Bar
ok or !ok
ok or !true
ok or "bar" endsWith "foo"
ok or 0.5 != f32
ok or 0.5 != nil
ok or 0.5 == i
ok or 1 != f32
ok or 1 <= 1
ok or 1 <= i
ok or div != half
ok or div != nil
ok or div != score
ok or f32 != f32
ok or f32 == 0.5
ok or f32 == f32
ok or f64 <= 1
ok or false ? ok : 1
ok or false and false
ok or foo != foo
ok or fromJSON(nil)?.ok
ok or half != add
ok or half == div
ok or i < 1
ok or i == 0.5
ok or i == f32
ok or i32 < 1
ok or i32 > f64
ok or i64 != i32
ok or i64 > i64
ok or i64 >= 0.5
ok or i64 not in array
ok or nil != "foo"
ok or nil != f64
ok or nil != foo
ok or nil != greet
ok or nil != ok
ok or nil == div
ok or not false
ok or not ok
ok or ok
ok or ok == true
ok or true || true
ok or {"foo": false}.String
ok || !ok
ok || (nil not in list)
ok || 0.5 < f32
ok || 0.5 > 0.5
ok || 0.5 > 1
ok || 0.5 >= f64
ok || 1 != nil
ok || 1 < i32
ok || 1 == i
ok || f32 >= 1
ok || f64 < 1
ok || f64 == i
ok || f64 > f64
ok || f64 >= i64
ok || false ? half : i64
ok || foo == foo
ok || greet == half
ok || i == i
ok || i32 < f32
ok || i32 <= 0.5
ok || i32 == i
ok || i32 > 0.5
ok || i32 >= i32
ok || i64 != i32
ok || i64 == 0.5
ok || list == list
ok || nil == 0.5
ok || nil == array
ok || nil == nil
ok || nil not in array
ok || not false
ok || not ok
ok || ok
ok || ok ? f64 : i64
ok || ok ? ok : score
ok || ok or ok
ok || reduce(array, false)
ok || true ? add : ok
one(1 .. i64, ok)
one([div], nil == i32)
one([false], i64 != i32)
one(array, !(# <= 0.5))
one(array, !false)
one(array, !ok)
one(array, !true)
one(array, "bar" matches "bar")
one(array, # != #)
one(array, # != 0.5)
one(array, # != 1)
one(array, # != f32)
one(array, # != f64)
one(array, # != i)
one(array, # != i32)
one(array, # != nil)
one(array, # / i >= f64)
one(array, # < #)
one(array, # < 0.5)
one(array, # < 1)
one(array, # < f32)
one(array, # < i64)
one(array, # <= #)
one(array, # <= 0.5)
one(array, # <= 1)
one(array, # <= f32)
one(array, # <= f64)
one(array, # <= i32)
one(array, # == #)
one(array, # == 0.5)
one(array, # == 1)
one(array, # == nil)
one(array, # > #)
one(array, # > f32)
one(array, # > f64)
one(array, # > i32)
one(array, # >= #)
one(array, # >= 0.5)
one(array, # >= 1)
one(array, # >= f64)
one(array, 0.5 != #)
one(array, 0.5 != i64)
one(array, 0.5 < #)
one(array, 0.5 < 0.5)
one(array, 0.5 <= #)
one(array, 0.5 == #)
one(array, 0.5 == 0.5)
one(array, 0.5 > #)
one(array, 0.5 > 1)
one(array, 0.5 >= #)
one(array, 1 != #)
one(array, 1 != i64)
one(array, 1 != nil)
one(array, 1 < #)
one(array, 1 < f64)
one(array, 1 <= #)
one(array, 1 > 0.5)
one(array, 1 >= #)
one(array, add == div)
one(array, all(array, true))
one(array, div != score)
one(array, f32 <= #)
one(array, f32 <= 0.5)
one(array, f32 >= #)
one(array, f64 < #)
one(array, f64 == #)
one(array, f64 >= #)
one(array, f64 >= 1)
one(array, f64 >= i32)
one(array, f64 in array)
one(array, false || true)
one(array, i < #)
one(array, i > 0.5)
one(array, i > f64)
one(array, i32 != #)
one(array, i32 < #)
one(array, i32 <= #)
one(array, i32 > #)
one(array, i32 >= #)
one(array, i64 != #)
one(array, i64 < #)
one(array, i64 == #)
one(array, i64 == f32)
one(array, i64 >= #)
one(array, i64 >= f64)
one(array, list != array)
one(array, nil != #)
one(array, nil != i64)
one(array, not ok)
one(array, ok)
one(array, one(list, false))
one(array, score != add)
one(array, score != greet)
one(array, score == div)
one(array, true != false)
one(array, true == nil)
one(array, true) ? greet : add
one(array, true) or 1 != nil
one(false ? greet : "bar", f64 != #)
one(groupBy(array, 0.5)?.String, #)
one(groupBy(array, f64).array, .i(nil).ok)
one(groupBy(list, ok).foo, .add?.array)
one(groupBy(list, ok)?.score, .i64())
one(i32 .. 1, # == #)
one(i32 .. i32, not ok)
one(i64 .. 1, # >= 1)
one(i64 .. i32, # != #)
one(i64 .. i32, # >= #)
one(list, !(i64 != 1))
one(list, !false)
one(list, !ok)
one(list, "foo" < "bar")
one(list, "foo" not endsWith "bar")
one(list, "foo" not in #)
one(list, "foo" startsWith "bar")
one(list, # != #)
one(list, # != foo)
one(list, # == #)
one(list, # in list)
one(list, # not in list)
one(list, 0.5 < 1)
one(list, 0.5 <= 0.5)
one(list, 0.5 == f64)
one(list, 1 > i)
one(list, add != nil)
one(list, all(array, true))
one(list, any(list, true))
one(list, div != nil)
one(list, f32 == nil)
one(list, f32 > i)
one(list, f32 >= 1)
one(list, f64 >= 1)
one(list, false == nil)
one(list, foo != #)
one(list, foo != nil)
one(list, foo == #)
one(list, greet == nil)
one(list, half == nil)
one(list, i <= i64)
one(list, i > f64)
one(list, i > i32)
one(list, i32 != f32)
one(list, i64 == 1)
one(list, nil != #)
one(list, nil != half)
one(list, nil == #)
one(list, nil == f64)
one(list, ok or true)
one(list, ok)
one(list, ok) or 0.5 == nil
one(list, score != nil)
one(list, true == nil)
one(list[i64:i32], i != i)
one(map(array, "bar"), not false)
one(map(array, #), # != #)
one(map(array, #), # >= #)
one(map(array, #), i32 == #)
one(map(array, 1), ok)
one(map(array, div), # == #)
one(map(array, f64), # < 0.5)
one(map(array, false), #)
one(map(array, i), ok)
one(map(array, list), ok)
one(map(array, true), #)
one(map(list, ok), #)
one(map(list, score), # != #)
one(ok ? "foo" : false, # > #)
one(reduce(array, array), ok)
one(true ? array : 1, # <= #)
reduce(1 .. 1, #)
reduce(1 .. 1, f32 >= i)
reduce(1 .. i64, array)
reduce(1 .. i64, greet)
reduce(1 .. i64, half)
reduce(["foo"], f32)
reduce([0.5], f64)
reduce([1], .Qux)
reduce([div, "foo"], i32)
reduce([div], # >= 0.5)
reduce([div], list == #)
reduce([f32, f64], f32)
reduce([f32], .f64)
reduce([f64], # or #)
reduce([f64], .greet)
reduce([false], # ** #)
reduce([foo], ok)
reduce([greet], # % 1)
reduce([i32], list)
reduce([i64, half], "bar" not startsWith "foo")
reduce([i], # < #)
reduce([i], #[array])
reduce([i], ok)
reduce([list], # - #)
reduce([list], # or #)
reduce([list], f64)
reduce([nil], # in array)
reduce([ok], #?.half)
reduce([true], #?.score())
reduce([true], 0.5 > #)
reduce(array, !false)
reduce(array, "foo" endsWith "foo")
reduce(array, "foo") not in foo
reduce(array, # != #)
reduce(array, # != 1)
reduce(array, # != i32)
reduce(array, # != nil)
reduce(array, # % #)
reduce(array, # % i64)
reduce(array, # * #)
reduce(array, # * 0.5)
reduce(array, # * 1)
reduce(array, # * f32)
reduce(array, # * i)
reduce(array, # * i32)
reduce(array, # * i64)
reduce(array, # ** #)
reduce(array, # ** f32)
reduce(array, # ** i32)
reduce(array, # + #)
reduce(array, # + 0.5)
reduce(array, # + 1)
reduce(array, # + i)
reduce(array, # + i64)
reduce(array, # - #)
reduce(array, # - 0.5)
reduce(array, # - 1)
reduce(array, # - i)
reduce(array, # - i32)
reduce(array, # - i64)
reduce(array, # .. #)
reduce(array, # .. i32)
reduce(array, # / #)
reduce(array, # / 0.5)
reduce(array, # / 1)
reduce(array, # / f32)
reduce(array, # / i32)
reduce(array, # < #)
reduce(array, # < 0.5)
reduce(array, # < 1)
reduce(array, # < i32)
reduce(array, # <= #)
reduce(array, # <= 0.5)
reduce(array, # <= f32)
reduce(array, # <= i32)
reduce(array, # == #)
reduce(array, # == 0.5)
reduce(array, # == 1)
reduce(array, # == f32)
reduce(array, # == i32)
reduce(array, # == i64)
reduce(array, # == nil)
reduce(array, # > #)
reduce(array, # > 1)
reduce(array, # > f64)
reduce(array, # > i)
reduce(array, # >= #)
reduce(array, # >= f32)
reduce(array, # >= f64)
reduce(array, # >= i32)
reduce(array, # >= i64)
reduce(array, # ^ #)
reduce(array, # ^ 0.5)
reduce(array, # ^ f32)
reduce(array, # ^ f64)
reduce(array, # ^ i64)
reduce(array, # in array)
reduce(array, # not in array)
reduce(array, #)
reduce(array, #) != 0.5 == true
reduce(array, #) != 0.5 ? ok : nil
reduce(array, #) != f32
reduce(array, #) != i32
reduce(array, #) != i64
reduce(array, #) % i
reduce(array, #) % i32
reduce(array, #) % i64
reduce(array, #) * i
reduce(array, #) * i32
reduce(array, #) * len("foo")
reduce(array, #) ** f64
reduce(array, #) ** min(1, i32)
reduce(array, #) + i
reduce(array, #) + i64
reduce(array, #) + reduce(array, #)
reduce(array, #) - f64
reduce(array, #) - i
reduce(array, #) - max(f32)
reduce(array, #) .. i
reduce(array, #) .. i32
reduce(array, #) .. i64
reduce(array, #) / f32
reduce(array, #) / f64
reduce(array, #) / i32
reduce(array, #) / i64
reduce(array, #) < f32
reduce(array, #) < f32 / 0.5
reduce(array, #) < f64
reduce(array, #) < i
reduce(array, #) <= -1
reduce(array, #) <= f32
reduce(array, #) <= f64
reduce(array, #) <= f64 * 0.5
reduce(array, #) <= i
reduce(array, #) == f64
reduce(array, #) == i64
reduce(array, #) > i32
reduce(array, #) >= f32
reduce(array, #) >= f64
reduce(array, #) >= i32
reduce(array, #) >= i64
reduce(array, #) ^ f32 ** 0.5
reduce(array, #) ^ i32
reduce(array, #) not in array
reduce(array, #) not in map(array, #)
reduce(array, (0.5 + #) * f32)
reduce(array, -#)
reduce(array, -(# - #))
reduce(array, -0.5)
reduce(array, -1)
reduce(array, -f32)
reduce(array, -f64)
reduce(array, -i)
reduce(array, -i32)
reduce(array, -i64)
reduce(array, 0.5 != #)
reduce(array, 0.5 != 0.5)
reduce(array, 0.5 * #)
reduce(array, 0.5 ** #)
reduce(array, 0.5 ** 1)
reduce(array, 0.5 + #)
reduce(array, 0.5 - #)
reduce(array, 0.5 - i64)
reduce(array, 0.5 / #)
reduce(array, 0.5 / f32)
reduce(array, 0.5 < #)
reduce(array, 0.5 < 1)
reduce(array, 0.5 <= #)
reduce(array, 0.5 <= 1)
reduce(array, 0.5 == #)
reduce(array, 0.5 == f64)
reduce(array, 0.5 == i64)
reduce(array, 0.5 > #)
reduce(array, 0.5 > 0.5)
reduce(array, 0.5 >= 0.5)
reduce(array, 0.5 >= 1)
reduce(array, 0.5 ^ #)
reduce(array, 0.5 ^ 0.5)
reduce(array, 0.5) * f32
reduce(array, 0.5) - i
reduce(array, 0.5) > i64 ? 1 : 0.5
reduce(array, 1 != #)
reduce(array, 1 * f64)
reduce(array, 1 ** #)
reduce(array, 1 + #)
reduce(array, 1 - #)
reduce(array, 1 - 1)
reduce(array, 1 / i32)
reduce(array, 1 < #)
reduce(array, 1 >= #)
reduce(array, 1 ^ #)
reduce(array, 1 ^ 0.5)
reduce(array, 1 ^ i32)
reduce(array, 1) % i32
reduce(array, 1) ** f32
reduce(array, 1) + f64
reduce(array, 1) / f64
reduce(array, 1) / i32
reduce(array, 1) <= i32
reduce(array, 1) ^ i
reduce(array, 1) not in array
reduce(array, [#])
reduce(array, abs(#))
reduce(array, abs(f64))
reduce(array, abs(i64))
reduce(array, add(#, #))
reduce(array, add)
reduce(array, all(list, ok))
reduce(array, array)
reduce(array, array)[i32]
reduce(array, array[#:#])
reduce(array, array[i64:#])
reduce(array, bitand(i32, i32))
reduce(array, bitnot(#))
reduce(array, bitor(#, #))
reduce(array, bitshr(#, #))
reduce(array, bitushr(#, #))
reduce(array, ceil(#))
reduce(array, div(#, #))
reduce(array, div)
reduce(array, f32 ** #)
reduce(array, f32 + #)
reduce(array, f32 / #)
reduce(array, f32 <= #)
reduce(array, f32 == #)
reduce(array, f32 == i)
reduce(array, f32 >= #)
reduce(array, f32 >= 0.5)
reduce(array, f32 ^ #)
reduce(array, f32 ^ f32)
reduce(array, f32 ^ i32)
reduce(array, f32)
reduce(array, f32) ** (0.5 * f64)
reduce(array, f32) <= f32
reduce(array, f32) not in array
reduce(array, f64 ** #)
reduce(array, f64 + #)
reduce(array, f64 + i32)
reduce(array, f64 - #)
reduce(array, f64 / 1)
reduce(array, f64 < #)
reduce(array, f64 == #)
reduce(array, f64 ^ 1)
reduce(array, f64)
reduce(array, f64) != i32
reduce(array, f64) * i
reduce(array, f64) / f64
reduce(array, f64) <= f32
reduce(array, f64) <= first(array)
reduce(array, f64) == i
reduce(array, f64) >= i
reduce(array, f64) ^ f64
reduce(array, false ? f64 : #)
reduce(array, false ? score : #)
reduce(array, false) ? i64 : f32
reduce(array, false) || ok
reduce(array, findLastIndex(list, false))
reduce(array, findLastIndex(list, reduce(array, true)))
reduce(array, float(#))
reduce(array, floor(i64))
reduce(array, foo)
reduce(array, foo).Bar
reduce(array, foo).Qux
reduce(array, foo).String
reduce(array, foo).String()
reduce(array, foo)?.Bar
reduce(array, foo)?.Qux
reduce(array, foo)?.String
reduce(array, foo)?.String()
reduce(array, foo.Bar)
reduce(array, foo.String)
reduce(array, foo?.String())
reduce(array, foo?.String)
reduce(array, get(array, 1))
reduce(array, get(list, #))
reduce(array, greet("bar"))
reduce(array, greet)
reduce(array, greet) != score != nil
reduce(array, groupBy(array, #))
reduce(array, groupBy(list, #))
reduce(array, groupBy(list, #)?.f32)
reduce(array, half(1))
reduce(array, half)
reduce(array, i != #)
reduce(array, i % #)
reduce(array, i * #)
reduce(array, i ** f64)
reduce(array, i + 0.5)
reduce(array, i - #)
reduce(array, i / #)
reduce(array, i <= #)
reduce(array, i <= i64)
reduce(array, i > i32)
reduce(array, i ^ #)
reduce(array, i)
reduce(array, i) % i32
reduce(array, i) + i32
reduce(array, i) - f32
reduce(array, i) == 0.5 ** 1
reduce(array, i32 != #)
reduce(array, i32 != i32)
reduce(array, i32 + 0.5)
reduce(array, i32 - #)
reduce(array, i32 .. #)
reduce(array, i32 < #)
reduce(array, i32 < 1)
reduce(array, i32 > #)
reduce(array, i32 >= #)
reduce(array, i32)
reduce(array, i32) * 1 * 0.5
reduce(array, i64 != #)
reduce(array, i64 % i)
reduce(array, i64 % i32)
reduce(array, i64 * #)
reduce(array, i64 + i32)
reduce(array, i64 - #)
reduce(array, i64 .. #)
reduce(array, i64 .. 1)
reduce(array, i64 / f64)
reduce(array, i64 <= #)
reduce(array, i64 == 1)
reduce(array, i64 == nil)
reduce(array, i64 ^ #)
reduce(array, i64 ^ f64)
reduce(array, i64)
reduce(array, i64) + i
reduce(array, i64) / f64
reduce(array, i64) < i
reduce(array, i64) == f32
reduce(array, int(f64))
reduce(array, len(array))
reduce(array, list)
reduce(array, list) != map(list, half)
reduce(array, map(array, div))
reduce(array, map(array, score))
reduce(array, map(list, 1))
reduce(array, max(#, #, #))
reduce(array, max(0.5))
reduce(array, min(#))
reduce(array, min(#, #, 0.5))
reduce(array, min(0.5))
reduce(array, min(1, 1))
reduce(array, nil != "bar")
reduce(array, nil != #)
reduce(array, nil != 1)
reduce(array, not ok)
reduce(array, ok ? "foo" : "bar")
reduce(array, ok ? # : array)
reduce(array, ok ? # : i)
reduce(array, ok || true)
reduce(array, ok)
reduce(array, ok) and ok
reduce(array, reduce(array, 1))
reduce(array, reduce(list, 0.5))
reduce(array, round(0.5))
reduce(array, score(#))
reduce(array, score(1, #))
reduce(array, score)
reduce(array, string(0.5))
reduce(array, string(1))
reduce(array, string(foo))
reduce(array, string(i32))
reduce(array, toJSON(i))
reduce(array, trimPrefix("bar"))
reduce(array, true && true)
reduce(array, true ? add : #)
reduce(array, true) != ok
reduce(array, true) and ok
reduce(array, type(#))
reduce(array, type(1))
reduce(array, type(add))
reduce(array, type(greet))
reduce(array, type(score))
reduce(array, upper("bar"))
reduce(false ? 0.5 : "bar", # and false)
reduce(false ? i32 : array, toJSON(#))
reduce(false ? nil : list, #)
reduce(filter(array, ok), foo)
reduce(filter(list, ok), foo.Bar)
reduce(filter(list, true), i)
reduce(i .. 1, f64)
reduce(i .. 1, score)
reduce(i .. i, #)
reduce(i .. i, foo)
reduce(i .. i32, add)
reduce(i32 .. 1, #)
reduce(i32 .. 1, foo)
reduce(i32 .. i, 0.5 - #)
reduce(i32 .. i32, i64)
reduce(i32 .. i64, abs(f64))
reduce(i64 .. 1, -#)
reduce(i64 .. i, #)
reduce(i64 .. i, -0.5)
reduce(i64 .. i, false ? "bar" : #)
reduce(i64 .. i, i)
reduce(i64 .. i, ok)
reduce(i64 .. i, round(i32))
reduce(i64 .. i64, i64)
reduce(list, !true)
reduce(list, "bar" <= "bar")
reduce(list, "bar" in #)
reduce(list, "foo" not in #)
reduce(list, # != #)
reduce(list, # != foo)
reduce(list, # != nil)
reduce(list, # == #)
reduce(list, # == foo)
reduce(list, # == nil)
reduce(list, # in list)
reduce(list, # not in list)
reduce(list, #)
reduce(list, #) != foo
reduce(list, #) not in groupBy(array, i)
reduce(list, #) not in list
reduce(list, #).Bar
reduce(list, #).Qux
reduce(list, #).String
reduce(list, #).String()
reduce(list, #)?.Bar
reduce(list, #)?.Qux
reduce(list, #)?.String
reduce(list, #)?.String()
reduce(list, #?.Bar not in # ? # : #)
reduce(list, #?.Bar)
reduce(list, #?.Qux("foo"))
reduce(list, #?.Qux)
reduce(list, #?.String())
reduce(list, #?.String)
reduce(list, -0.5)
reduce(list, -f64)
reduce(list, -i)
reduce(list, -i32)
reduce(list, .Bar)
reduce(list, .Qux)
reduce(list, .String())
reduce(list, .String)
reduce(list, 0.5 != f64)
reduce(list, 0.5 != nil)
reduce(list, 0.5 == i64)
reduce(list, 0.5 >= 0.5)
reduce(list, 0.5) != i
reduce(list, 0.5) / i64
reduce(list, 0.5) < f32
reduce(list, 0.5) < i
reduce(list, 0.5) < i32
reduce(list, 0.5) < i64
reduce(list, 0.5) <= f32
reduce(list, 0.5) >= f64
reduce(list, 0.5) >= i64
reduce(list, 1 != nil)
reduce(list, 1 + f64)
reduce(list, 1 - 0.5)
reduce(list, 1 / 0.5)
reduce(list, 1 < f64)
reduce(list, 1 <= 1)
reduce(list, 1 == 0.5)
reduce(list, 1 == nil)
reduce(list, 1 ^ 1)
reduce(list, 1) * f64
reduce(list, 1) + f32
reduce(list, 1) - i
reduce(list, add)
reduce(list, add) != div
reduce(list, add) in map(array, greet)
reduce(list, array != array)
reduce(list, array)
reduce(list, div == greet)
reduce(list, div)
reduce(list, f32 / 0.5)
reduce(list, f32 < i32)
reduce(list, f32 <= f32)
reduce(list, f32)
reduce(list, f32) == f32
reduce(list, f64 != nil)
reduce(list, f64 + 0.5)
reduce(list, f64 + 1)
reduce(list, f64 / i32)
reduce(list, f64 <= i32)
reduce(list, f64 == f32)
reduce(list, f64 > f32)
reduce(list, f64 >= 0.5)
reduce(list, f64)
reduce(list, f64) * i64
reduce(list, false == false)
reduce(list, false ? "foo" : list)
reduce(list, false ? # : #)
reduce(list, false || true)
reduce(list, filter(list, ok))
reduce(list, findIndex(array, true))
reduce(list, findLastIndex(list, false))
reduce(list, float(i))
reduce(list, floor(0.5))
reduce(list, foo != #)
reduce(list, foo)
reduce(list, foo) == foo
reduce(list, foo).Bar
reduce(list, foo).Qux
reduce(list, foo).String
reduce(list, foo).String()
reduce(list, foo)?.Bar
reduce(list, foo)?.Qux
reduce(list, foo)?.String
reduce(list, foo)?.String()
reduce(list, foo.Bar)
reduce(list, foo.String)
reduce(list, foo?.Bar)
reduce(list, foo?.Qux)
reduce(list, foo?.String)
reduce(list, get(list, i))
reduce(list, greet != nil)
reduce(list, greet("bar"))
reduce(list, greet)
reduce(list, groupBy(array, 1))
reduce(list, groupBy(list, "bar"))
reduce(list, groupBy(list, #))
reduce(list, half(1))
reduce(list, half)
reduce(list, i * i64)
reduce(list, i + 1)
reduce(list, i - f64)
reduce(list, i .. 1)
reduce(list, i == 0.5)
reduce(list, i > i64)
reduce(list, i >= 0.5)
reduce(list, i)
reduce(list, i) * i64
reduce(list, i) .. 1 % 1
reduce(list, i) .. i
reduce(list, i) / f64
reduce(list, i) / i32
reduce(list, i) < f32
reduce(list, i) == f32
reduce(list, i) > f32
reduce(list, i) ^ f32
reduce(list, i32 != nil)
reduce(list, i32 - i32)
reduce(list, i32 .. 1)
reduce(list, i32 / 0.5)
reduce(list, i32 < i)
reduce(list, i32 <= i)
reduce(list, i32 == f64)
reduce(list, i32 >= f32)
reduce(list, i32)
reduce(list, i32) != f64
reduce(list, i32) % i
reduce(list, i32) - f32
reduce(list, i32) >= i
reduce(list, i64 .. 1)
reduce(list, i64 < i64)
reduce(list, i64 > i64)
reduce(list, i64 >= 0.5)
reduce(list, i64)
reduce(list, i64) * f64
reduce(list, i64) ** i32
reduce(list, i64) <= i64
reduce(list, int(i64))
reduce(list, len(array))
reduce(list, list != nil)
reduce(list, list == nil)
reduce(list, list)
reduce(list, map(array, "bar"))
reduce(list, map(array, #))
reduce(list, map(list, 1))
reduce(list, max(0.5))
reduce(list, max(f32))
reduce(list, min(0.5))
reduce(list, min(1))
reduce(list, min(f32))
reduce(list, nil != #)
reduce(list, nil != add)
reduce(list, nil != half)
reduce(list, nil == #)
reduce(list, not (half != score))
reduce(list, not false)
reduce(list, not ok)
reduce(list, not true)
reduce(list, ok ? # : #)
reduce(list, ok ? # : score)
reduce(list, ok ? greet : add)
reduce(list, ok ? score : #)
reduce(list, ok)
reduce(list, reduce(array, ok))
reduce(list, reduce(array, score))
reduce(list, reduce(list, #))
reduce(list, reduce(list, 1))
reduce(list, reduce(list, add))
reduce(list, reduce(list, i32))
reduce(list, score != half)
reduce(list, score(i))
reduce(list, score)
reduce(list, string(greet))
reduce(list, toBase64("bar"))
reduce(list, toBase64("foo"))
reduce(list, toJSON(array))
reduce(list, toJSON(list))
reduce(list, toJSON(nil))
reduce(list, true == nil)
reduce(list, true ? foo : f64)
reduce(list, type(#))
reduce(map(array, "bar"), # not endsWith #)
reduce(map(array, "bar"), add)
reduce(map(array, "foo"), half(f64))
reduce(map(array, #), # != i)
reduce(map(array, #), # .. #)
reduce(map(array, #), #)
reduce(map(array, #), abs(#))
reduce(map(array, #), i)
reduce(map(array, #), i32 * #)
reduce(map(array, #), not ok)
reduce(map(array, 0.5), add)
reduce(map(array, 0.5), div)
reduce(map(array, 0.5), f32)
reduce(map(array, 1), # ^ 0.5)
reduce(map(array, 1), #)
reduce(map(array, 1), foo)
reduce(map(array, add), #)
reduce(map(array, add), f32)
reduce(map(array, add), list)
reduce(map(array, array), f64)
reduce(map(array, div), #)
reduce(map(array, div), div)
reduce(map(array, div), i32 * i)
reduce(map(array, f32), f32)
reduce(map(array, f32), i)
reduce(map(array, f32), i32)
reduce(map(array, f64), #)
reduce(map(array, f64), f32 < #)
reduce(map(array, false), # and true)
reduce(map(array, false), f32)
reduce(map(array, foo), # == nil)
reduce(map(array, i), # / 1)
reduce(map(array, i), #)
reduce(map(array, i), add)
reduce(map(array, i), f64 + 1)
reduce(map(array, i32), array)
reduce(map(array, i32), list)
reduce(map(array, i64), # <= #)
reduce(map(array, i64), #)
reduce(map(array, list), filter(#, false))
reduce(map(array, ok), i)
reduce(map(array, score), i32)
reduce(map(list, "bar"), #)
reduce(map(list, "foo"), #)
reduce(map(list, #), #)
reduce(map(list, #), .Qux)
reduce(map(list, #), add)
reduce(map(list, #), array)
reduce(map(list, #), f32)
reduce(map(list, #), f64)
reduce(map(list, #), half)
reduce(map(list, #), i64)
reduce(map(list, #), ok)
reduce(map(list, 0.5), #)
reduce(map(list, 0.5), foo)
reduce(map(list, 1), # > #)
reduce(map(list, 1), #)
reduce(map(list, 1), list)
reduce(map(list, array), div)
reduce(map(list, div), add)
reduce(map(list, f64), #)
reduce(map(list, f64), ok)
reduce(map(list, false), div)
reduce(map(list, greet), #)
reduce(map(list, i), #)
reduce(map(list, i), [i32])
reduce(map(list, i), f32)
reduce(map(list, i), score(#))
reduce(map(list, i32), #)
reduce(map(list, i32), foo)
reduce(map(list, i64), #)
reduce(map(list, i64), i32)
reduce(map(list, list), ok)
reduce(map(list, score), #)
reduce(map(list, score), f64)
reduce(map(list, true), #)
reduce(map(list, true), add)
reduce(map(list, true), half)
reduce(ok ? "bar" : i32, #)
reduce(ok ? "foo" : list, #)
reduce(ok ? array : half, f32)
reduce(ok ? list : i, #)
reduce(reduce(array, array), f64 != #)
reduce(reduce(array, list), get(array, i32))
reduce(reduce(list, array), f64)
reduce(sort(array), #)
reduce(sort(array), foo)
reduce(sort(array), greet)
reduce(sort(array), ok)
reduce(true ? array : 1, array)
reduce(true ? array : array, #)
repeat(type(ok), i)
round(-0.5)
round(-1)
round(-f32)
round(-f64)
round(-i)
round(-i32)
round(-i64)
round(0.5 * 1)
round(0.5 * f64)
round(0.5 * i32)
round(0.5 ** 0.5)
round(0.5 ** 1)
round(0.5 ** i)
round(0.5 ** i32)
round(0.5 ** i64)
round(0.5 + 1)
round(0.5 + f64)
round(0.5 + i)
round(0.5 + i32)
round(0.5 - 0.5)
round(0.5 - 1)
round(0.5 - i32)
round(0.5 / 0.5)
round(0.5 / 1)
round(0.5 / f64)
round(0.5 / i32)
round(0.5 ^ f64)
round(0.5 ^ i)
round(0.5 ^ i64)
round(0.5) * f32
round(0.5) ** i32
round(0.5) + -f32
round(0.5) - i64 ^ i
round(0.5) < f64
round(0.5) <= i64
round(0.5) == i32
round(0.5) == i64
round(0.5) == max(i, i64)
round(0.5) > -1
round(0.5) > i
round(0.5) >= i
round(0.5) in array
round(1 % i)
round(1 % i64)
round(1 * 0.5)
round(1 * f32)
round(1 * i64)
round(1 ** 0.5)
round(1 ** 1)
round(1 ** f32)
round(1 ** f64)
round(1 ** i)
round(1 + 0.5)
round(1 + 1)
round(1 + i64)
round(1 - 0.5)
round(1 - 1)
round(1 - i)
round(1 - i32)
round(1 - i64)
round(1 / 0.5)
round(1 / 1)
round(1 / f32)
round(1 / i)
round(1 / i64)
round(1 ^ 0.5)
round(1 ^ 1)
round(1 ^ f32)
round(1 ^ i)
round(1 ^ i64)
round(1) != ceil(i32)
round(1) * i32
round(1) + i64
round(1) - i64
round(1) / i32
round(1) / i64
round(1) < i64
round(1) <= i
round(1) == i
round(1) >= f64
round(1) >= i32
round(1) >= i64
round(1) ^ f64
round(1) not in array
round(abs(0.5))
round(abs(1))
round(abs(f64))
round(abs(i))
round(abs(i64))
round(add(1, i))
round(array[1])
round(array[i32])
round(array[i64])
round(bitnot(i))
round(bitnot(i32))
round(bitnot(i64))
round(ceil(1))
round(ceil(f64))
round(ceil(i32))
round(ceil(i64))
round(count(list, true))
round(div(1, 1))
round(f32 * 0.5)
round(f32 * 1)
round(f32 * f64)
round(f32 * i32 ^ f32)
round(f32 * i64)
round(f32 ** 0.5)
round(f32 ** 1)
round(f32 + f64)
round(f32 + i32)
round(f32 - 0.5)
round(f32 - i)
round(f32 / i32)
round(f32 ^ 0.5)
round(f32 ^ f32)
round(f32 ^ i)
round(f32 ^ i64)
round(f32)
round(f32) * i32
round(f32) - i32
round(f32) / f32
round(f32) == i32
round(f64 * 0.5)
round(f64 * i)
round(f64 ** 0.5)
round(f64 ** 1)
round(f64 ** f32)
round(f64 ** i)
round(f64 + f64)
round(f64 + i)
round(f64 + i32)
round(f64 - 0.5)
round(f64 - 1)
round(f64 - i32)
round(f64 / f64)
round(f64 / i)
round(f64 / i32)
round(f64 / i64)
round(f64 ^ 1)
round(f64 ^ f64)
round(f64)
round(f64) * f32
round(f64) ** i32
round(f64) + f64
round(f64) <= f64
round(f64) > i
round(f64) > i32
round(f64) >= i64
round(f64) not in array
round(false ? f32 : f64)
round(false ? f64 : 1)
round(false ? nil : 1)
round(findIndex(array, # <= #))
round(findIndex(list, ok))
round(findLast(array, ok))
round(findLast(array, true))
round(findLastIndex(array, ok))
round(findLastIndex(list, ok))
round(float(0.5))
round(float(1))
round(float(f32))
round(float(i))
round(floor(0.5))
round(floor(1))
round(floor(f64))
round(floor(i32))
round(floor(i64))
round(get(array, i))
round(get(array, i32))
round(get(array, i64))
round(half(-1))
round(half(0.5))
round(half(1))
round(half(f64))
round(i % i32)
round(i % i64)
round(i * 1)
round(i * f64)
round(i * i32)
round(i ** 1)
round(i ** i64)
round(i + 0.5)
round(i + 1)
round(i + f64)
round(i + i)
round(i + i32)
round(i + i64)
round(i - i)
round(i - i32)
round(i / 1)
round(i / i)
round(i / i64)
round(i ^ 0.5) > f32
round(i ^ 1)
round(i ^ f32)
round(i)
round(i) * f32
round(i) * i
round(i) / f64
round(i) < i
round(i) < i32
round(i) > i
round(i) > i64 != ok
round(i) >= f32
round(i) >= i64
round(i) ^ i32
round(i32 % 1)
round(i32 * 1)
round(i32 ** 1)
round(i32 ** f32)
round(i32 ** f64)
round(i32 + 0.5)
round(i32 + 1)
round(i32 + i32)
round(i32 - 1)
round(i32 - f32)
round(i32 - f64)
round(i32 / 0.5)
round(i32 / 1)
round(i32 ^ f64)
round(i32)
round(i32) != i
round(i32) * f32
round(i32) ** f64
round(i32) - i
round(i32) < i32
round(i32) <= ceil(1)
round(i32) <= f64
round(i32) <= i64
round(i32) >= f64
round(i32) >= i32
round(i32) ^ f64
round(i64 % i)
round(i64 % i32)
round(i64 * 0.5)
round(i64 * i)
round(i64 ** 1)
round(i64 ** f64)
round(i64 ** i64)
round(i64 + f32)
round(i64 - 0.5)
round(i64 - 1)
round(i64 - i)
round(i64 / 0.5)
round(i64 / 1)
round(i64 ^ 1)
round(i64 ^ i32)
round(i64 ^ i64)
round(i64)
round(i64) != f64
round(i64) * i64
round(i64) ** i32
round(i64) - bitnot(1)
round(i64) - f32
round(i64) < f64
round(i64) ^ f64
round(int(0.5))
round(int(1))
round(int(f32))
round(int(f64))
round(int(i))
round(int(i32))
round(int(i64))
round(last(array))
round(len("bar"))
round(len("foo"))
round(len(array))
round(len(list))
round(max(0.5))
round(max(1))
round(max(i))
round(max(i32))
round(max(i64))
round(max(i64, f32))
round(mean(array))
round(median(array))
round(min(0.5))
round(min(1))
round(min(f32))
round(min(f64))
round(min(i32))
round(min(i64))
round(reduce(array, #))
round(reduce(array, 0.5))
round(reduce(array, 1))
round(reduce(array, i64))
round(reduce(list, 0.5))
round(reduce(list, f32))
round(round(0.5))
round(round(1))
round(round(f32))
round(round(f64))
round(round(i))
round(round(i32))
round(round(i64))
round(score(1))
round(score(i))
round(sum(array))
round(true ? i : ok)
score
score != add
score != add == ok
score != add ? 0.5 : div
score != div
score != foo.Qux
score != foo.String
score != foo?.Qux
score != foo?.String
score != greet
score != greet ? add : i64
score != greet ? div : i
score != half
score != half || ok
score != nil != ok
score != nil ? half : f64
score != nil or i32 > 0.5
score != nil || ok
score != score
score != score != ok
score != score ? i32 : i32
score == add
score == div
score == div != nil
score == div == ok
score == foo.Qux
score == foo.String
score == foo?.Qux
score == foo?.String
score == greet
score == greet != ok
score == half
score == half ? 1 : add
score == half ? half : f64
score == nil != nil
score == nil && ok
score == nil ? 0.5 : "bar"
score == reduce(array, half)
score == score
score == score == true
score == score ? 0.5 : score
score in groupBy(list, #)?.array
score in map(list, add)
score in sort(array)
score(-1)
score(-1, i)
score(-get(array, i))
score(-i)
score(-i, i)
score(1 % 1)
score(1 % i)
score(1 % i32)
score(1 % i64)
score(1 * 1)
score(1 * i)
score(1 * i32)
score(1 * i64)
score(1 + 1)
score(1 + i)
score(1 + i32)
score(1 + i64)
score(1 - 1)
score(1 - i)
score(1 - i32)
score(1) != -f32
score(1) != i
score(1) != i32
score(1) % -1
score(1) % i
score(1) % i64
score(1) * f32
score(1) * i
score(1) * i64
score(1) ** i32
score(1) + f64
score(1) + i32
score(1) - f32
score(1) - i
score(1) - i32
score(1) - int(0.5)
score(1) .. i
score(1) .. i32
score(1) .. i64
score(1) .. score(1)
score(1) / f32
score(1) / i32
score(1) < i
score(1) < i32
score(1) < i64
score(1) < i64 - 0.5
score(1) <= 0.5 * 1
score(1) <= i
score(1) <= i64
score(1) == i32
score(1) == i64
score(1) > bitshr(i64, 1)
score(1) > f32
score(1) > i64
score(1) >= 0.5 + f64
score(1) >= f32
score(1) >= i
score(1) >= sum(array)
score(1) ^ f64
score(1) ^ i
score(1) ^ i32
score(1) in array
score(1) not in groupBy(list, false)
score(1, 1) < i
score(1, i) < f64
score(1, i) ^ f32
score(abs(1))
score(abs(i))
score(add(1, i))
score(array[1])
score(array[i64])
score(array[i])
score(bitnand(1, i64))
score(bitnand(i64, i32))
score(bitnot(1))
score(bitnot(i))
score(bitnot(i32))
score(bitnot(i64))
score(bitshl(i32, i))
score(bitshr(1, i64))
score(bitshr(i32, i64))
score(bitushr(1, i))
score(count(array, false))
score(count(array, ok))
score(count(array, true))
score(count(list, ok))
score(false ? f64 : 1)
score(false ? foo : 1)
score(find(array, i != #))
score(find(array, ok))
score(find(array, true))
score(findIndex(array, ok))
score(findIndex(array, true))
score(findIndex(list, true))
score(findLast(array, true))
score(findLastIndex(array, true))
score(findLastIndex(list, ok))
score(findLastIndex(list, true))
score(first(array))
score(get(array, 1))
score(get(array, i))
score(get(array, i32))
score(get(array, i64))
score(i % 1)
score(i % i)
score(i % i64)
score(i * 1 * i)
score(i * 1)
score(i * i)
score(i * i32)
score(i * i64)
score(i + 1)
score(i + i)
score(i + i32)
score(i - 1)
score(i - i)
score(i - i32)
score(i)
score(i) != f32
score(i) != f64
score(i) % i
score(i) % i * f64
score(i) * f32
score(i) * i32
score(i) ** (0.5 / 0.5)
score(i) ** -0.5
score(i) ** i32
score(i) ** i64
score(i) + f64
score(i) - f64
score(i) - i32
score(i) / i64
score(i) < 1 != ok
score(i) < f32
score(i) < f64 / 0.5
score(i) < i32
score(i) < i64
score(i) <= 0.5 / f32
score(i) <= f32
score(i) <= f64
score(i) <= i
score(i) <= i32
score(i) == f32
score(i) > f32
score(i) > i
score(i) > i64
score(i) >= f32
score(i) >= f64
score(i) >= i
score(i) >= i32
score(i) >= i64
score(i) ^ f32
score(i) ^ i32
score(i) ^ i64
score(i) ^ score(1)
score(i, 1) + -1
score(i, 1) .. i64
score(i, 1) <= f32
score(i, i)
score(i, i) ** f32
score(i32 % 1)
score(i32 % i)
score(i32 % i32)
score(i32 * 1)
score(i32 * i)
score(i32 * i32)
score(i32 * i64)
score(i32 + 1)
score(i32 + i)
score(i32 + i32)
score(i32 + i64)
score(i32 - 1)
score(i32 - i)
score(i32 - i32)
score(i32 - i64)
score(i64 % 1)
score(i64 % i)
score(i64 % i32)
score(i64 % i64)
score(i64 * 1)
score(i64 * i32)
score(i64 * i64)
score(i64 + 1)
score(i64 + i)
score(i64 + i32)
score(i64 - 1)
score(i64 - i64)
score(int(0.5))
score(int(1))
score(int(f32))
score(int(f64))
score(int(float(0.5)))
score(int(i))
score(int(i32))
score(int(i64))
score(last(array))
score(len("bar"))
score(len("foo"))
score(len(array))
score(len(list))
score(max(1))
score(max(1, i32, 0.5))
score(max(i))
score(max(i, i32))
score(min(1))
score(min(i))
score(min(i, i32))
score(ok ? 1 : "bar")
score(ok ? 1 : list)
score(reduce(array, #))
score(reduce(array, i))
score(reduce(list, 1))
score(reduce(list, i))
score(score(1))
score(score(i))
score(score(i32 + i))
score(sum(array))
sort(1 .. 1)
sort(1 .. i)
sort([add])
sort([greet])
sort([half])
sort([i64])
sort([list])
sort(array)
sort(array) == array
sort(false ? greet : array)
sort(groupBy(list, #)?.foo)
sort(groupBy(list, i32).half)
sort(i .. i32)
sort(i .. i64)
sort(i32 .. 1)
sort(i64 .. 1)
sort(map(array, "bar"))
sort(map(array, "foo"))
sort(map(array, #))
sort(map(array, 1))
sort(map(array, f64))
sort(map(array, i))
sort(map(array, i64))
sort(reduce(array, array))
sortBy(array, string(true))
string(!!false)
string(!false)
string(!ok)
string(!true)
string("bar" != nil)
string("bar" <= "bar")
string("bar" == "bar")
string("bar" > "foo")
string("bar" >= "bar")
string("bar" not endsWith "bar")
string("bar" not matches "bar")
string("bar" not startsWith "foo")
string("bar" startsWith "foo")
string("bar") > type(i64)
string("bar") >= toJSON("bar")
string("foo" != nil)
string("foo" == "foo")
string("foo" == nil)
string("foo" > "bar")
string("foo" in foo)
string("foo" matches "bar")
string("foo" not contains "bar")
string("foo" not contains "foo")
string("foo" not in foo)
string(--i)
string(-0.5)
string(-1)
string(-f32)
string(-f64)
string(-i)
string(-i32)
string(-i64)
string(0.5 != 0.5)
string(0.5 != f64)
string(0.5 != i)
string(0.5 != i32)
string(0.5 * 0.5)
string(0.5 * i)
string(0.5 * i32)
string(0.5 ** f32)
string(0.5 ** i32)
string(0.5 + f64)
string(0.5 + i)
string(0.5 + i64)
string(0.5 - f32)
string(0.5 - f64)
string(0.5 / 0.5)
string(0.5 / 1)
string(0.5 / f32)
string(0.5 / i)
string(0.5 < 0.5)
string(0.5 < 1)
string(0.5 < i64)
string(0.5 <= 0.5)
string(0.5 <= f64)
string(0.5 <= i)
string(0.5 <= i32)
string(0.5 == 0.5)
string(0.5 == 1)
string(0.5 == i64)
string(0.5 == nil)
string(0.5 > 0.5)
string(0.5 > 1)
string(0.5 > i)
string(0.5 > i64)
string(0.5 >= 0.5)
string(0.5 >= 1)
string(0.5 >= f32)
string(0.5 >= i32)
string(0.5 >= i64)
string(0.5 ^ f32)
string(0.5 ^ i)
string(0.5 ^ i32)
string(0.5 ^ i64)
string(0.5 in array)
string(0.5 not in array)
string(1 != 0.5)
string(1 != 1)
string(1 != i)
string(1 != i64)
string(1 != nil)
string(1 % 1)
string(1 % i)
string(1 % i32)
string(1 * 0.5)
string(1 * f32)
string(1 * f64)
string(1 ** 0.5)
string(1 ** 1)
string(1 ** i)
string(1 ** i64)
string(1 + 0.5)
string(1 + 1)
string(1 + f64)
string(1 - 0.5)
string(1 - f32)
string(1 - i32)
string(1 - i64)
string(1 .. 1)
string(1 .. i32)
string(1 .. i64)
string(1 / 0.5)
string(1 / f64)
string(1 / i)
string(1 / i32)
string(1 / i64)
string(1 < 0.5)
string(1 <= 1)
string(1 <= f32)
string(1 <= i)
string(1 <= i32)
string(1 <= i64)
string(1 == 1)
string(1 == f32)
string(1 == i32)
string(1 > 0.5)
string(1 > 1)
string(1 > i64)
string(1 >= f32)
string(1 >= i)
string(1 ^ 0.5)
string(1 ^ 1)
string(1 ^ f32)
string(1 ^ f64)
string(1 ^ i64)
string(1 not in array)
string([0.5])
string([div])
string([f64])
string([list])
string([score])
string([true])
string(abs(0.5))
string(abs(1))
string(abs(f32))
string(abs(i))
string(abs(i32))
string(add != add)
string(add != div)
string(add != score)
string(add == div)
string(add == greet)
string(add == nil)
string(add == score)
string(add)
string(add) in foo ? i64 : i32
string(add) not endsWith foo.Bar
string(all(array, ok))
string(all(array, true))
string(any(array, ok))
string(any(list, false))
string(any(list, ok))
string(array != array)
string(array != nil)
string(array)
string(array[i32])
string(bitnot(1))
string(bitnot(i32))
string(bitnot(i64))
string(ceil(0.5))
string(ceil(1))
string(ceil(f32))
string(ceil(f64))
string(ceil(i))
string(ceil(i64))
string(div != div)
string(div != greet)
string(div != nil)
string(div != score)
string(div == add)
string(div == div)
string(div == greet)
string(div)
string(f32 != 0.5)
string(f32 != f64)
string(f32 != i)
string(f32 != nil)
string(f32 * 0.5)
string(f32 * 1)
string(f32 * f64)
string(f32 * i)
string(f32 * i32)
string(f32 ** 1)
string(f32 ** f64)
string(f32 + f32)
string(f32 + f64)
string(f32 + i32)
string(f32 + i64)
string(f32 - 0.5)
string(f32 - 1)
string(f32 - i64)
string(f32 / 0.5)
string(f32 / f64)
string(f32 / i64)
string(f32 < f32)
string(f32 <= i)
string(f32 <= i32)
string(f32 == 0.5)
string(f32 == i)
string(f32 > 0.5)
string(f32 > f64)
string(f32)
string(f32) in foo
string(f64 != 1)
string(f64 != i)
string(f64 != nil)
string(f64 * 0.5)
string(f64 * i)
string(f64 * i32)
string(f64 * i64)
string(f64 ** 0.5)
string(f64 ** f64)
string(f64 ** i)
string(f64 + 0.5)
string(f64 + 1)
string(f64 + f32)
string(f64 - 0.5)
string(f64 - 1)
string(f64 - i)
string(f64 / 0.5)
string(f64 < f32)
string(f64 < i)
string(f64 <= 1)
string(f64 <= f32)
string(f64 <= f64)
string(f64 == 1)
string(f64 == f32)
string(f64 == i)
string(f64 == i64)
string(f64 > 1)
string(f64 >= f32)
string(f64 >= i)
string(f64 ^ 0.5)
string(f64 ^ f32)
string(f64 ^ i)
string(f64 in array)
string(f64 not in array)
string(f64)
string(false != nil)
string(false != ok)
string(false != true)
string(false ? array : 0.5)
string(false ? f64 : i32)
string(false ? false : i)
string(false ? greet : f64)
string(false ? half : "bar")
string(false ? half : i)
string(false ? i : i)
string(false ? nil : nil)
string(false and ok)
string(false) endsWith toBase64("foo")
string(filter(array, false))
string(filter(array, ok))
string(filter(array, true))
string(filter(list, false))
string(find(array, ok))
string(find(array, true))
string(find(list, ok))
string(findIndex(array, true))
string(findLast(array, false))
string(findLast(array, ok))
string(findLast(array, true))
string(findLastIndex(array, ok))
string(first(array))
string(first(list))
string(float(0.5))
string(float(1))
string(float(f64))
string(float(i))
string(float(i64))
string(floor(0.5))
string(floor(f32))
string(floor(f64))
string(floor(i))
string(floor(i32))
string(floor(i64))
string(foo == foo)
string(foo == nil)
string(foo not in list)
string(foo)
string(foo.Bar)
string(foo.Qux)
string(foo.String())
string(foo.String)
string(foo?.Bar)
string(foo?.Qux)
string(foo?.String())
string(foo?.String)
string(get(array, i))
string(get(array, i64))
string(get(list, 1))
string(get(list, i32))
string(get(list, i64))
string(greet != add)
string(greet != nil)
string(greet == greet)
string(greet == nil)
string(greet == score)
string(greet("bar"))
string(greet("foo"))
string(greet)
string(greet) == nil ? 0.5 : i
string(groupBy(array, #))
string(groupBy(array, 1))
string(groupBy(array, f32))
string(groupBy(array, false))
string(groupBy(array, i32))
string(groupBy(list, #))
string(groupBy(list, 0.5))
string(groupBy(list, 1))
string(groupBy(list, f64))
string(groupBy(list, false))
string(groupBy(list, i))
string(half != nil)
string(half != score)
string(half == nil)
string(half == sum(array))
string(half(0.5))
string(half(1))
string(half(f64))
string(half)
string(i != 1)
string(i != i64)
string(i % 1)
string(i % i32)
string(i % i64)
string(i * 1)
string(i * f64)
string(i ** f32)
string(i ** f64)
string(i ** i64)
string(i + 0.5)
string(i + i)
string(i - f32)
string(i .. 1)
string(i .. i)
string(i .. i32)
string(i / 1)
string(i / f32)
string(i / f64)
string(i / i32)
string(i / i64)
string(i < 0.5)
string(i < 1)
string(i < i32)
string(i <= f32)
string(i <= i)
string(i == 1)
string(i == i)
string(i > 0.5)
string(i > 1)
string(i > f32)
string(i >= 0.5)
string(i >= i64)
string(i ^ 1)
string(i ^ f32)
string(i ^ i)
string(i ^ i64)
string(i)
string(i) in foo
string(i32 != 0.5)
string(i32 != 1)
string(i32 != f64)
string(i32 != i32)
string(i32 != nil)
string(i32 % 1)
string(i32 % i)
string(i32 % i64)
string(i32 * 1)
string(i32 * f32)
string(i32 * f64)
string(i32 * i)
string(i32 ** 0.5)
string(i32 ** f64)
string(i32 + 0.5)
string(i32 - 0.5)
string(i32 - 1)
string(i32 - f32)
string(i32 - f64)
string(i32 - i32)
string(i32 - i64)
string(i32 .. 1)
string(i32 .. i)
string(i32 / 0.5)
string(i32 < 1)
string(i32 < f64)
string(i32 < i64)
string(i32 == f32)
string(i32 == i64)
string(i32 == nil)
string(i32 > 1)
string(i32 > i)
string(i32 >= 0.5)
string(i32 >= 1)
string(i32 >= i)
string(i32 ^ f32)
string(i32 ^ f64)
string(i32 ^ i32)
string(i32 in array)
string(i32 not in array)
string(i32)
string(i32) not startsWith trimSuffix("foo")
string(i64 != 1)
string(i64 != i)
string(i64 != i32)
string(i64 != i64)
string(i64 % i32)
string(i64 * 1)
string(i64 * f32)
string(i64 * i)
string(i64 ** 0.5)
string(i64 + i64)
string(i64 - i)
string(i64 - i32)
string(i64 - i64)
string(i64 .. 1)
string(i64 .. i)
string(i64 .. i32)
string(i64 / f64)
string(i64 / i)
string(i64 / i64)
string(i64 < 0.5)
string(i64 < i)
string(i64 <= i64)
string(i64 == 0.5)
string(i64 == i)
string(i64 > 0.5)
string(i64 > i64)
string(i64 >= 0.5)
string(i64 >= 1)
string(i64 ^ 0.5)
string(i64 ^ f64)
string(i64 in array)
string(i64)
string(i64) matches greet("bar")
string(i64) not in foo
string(int(0.5))
string(int(1))
string(int(i32))
string(int(i64))
string(last(array))
string(last(list).String())
string(len("bar"))
string(len(array))
string(len(list))
string(list != nil)
string(list == array)
string(list == list)
string(list == nil)
string(list)
string(list[1])
string(list[i32])
string(list[i64])
string(list[i])
string(map(array, #))
string(map(array, 0.5))
string(map(array, add))
string(map(array, div))
string(map(array, i))
string(map(array, i32))
string(map(array, true))
string(map(list, "bar"))
string(map(list, "foo"))
string(map(list, #))
string(map(list, 0.5))
string(map(list, 1))
string(map(list, array))
string(map(list, half))
string(map(list, i32))
string(map(list, i64))
string(max(0.5))
string(max(0.5, f32))
string(max(1))
string(max(f32))
string(max(f64))
string(max(i))
string(max(i64))
string(mean(array))
string(min(0.5))
string(min(f32))
string(min(i))
string(min(i32))
string(min(i64))
string(nil != "bar")
string(nil != div)
string(nil != false)
string(nil != greet)
string(nil != half)
string(nil != i)
string(nil != ok)
string(nil == "bar")
string(nil == 0.5)
string(nil == 1)
string(nil == div)
string(nil == foo)
string(nil == list)
string(nil == nil)
string(nil == ok)
string(nil == score)
string(nil in list)
string(nil not in list)
string(nil) <= list[i].Bar
string(none(array, ok))
string(none(list, false))
string(none(list, ok))
string(not !false)
string(not (i64 == 0.5))
string(not false)
string(not ok)
string(not true)
string(ok != nil)
string(ok != true)
string(ok ? 0.5 : nil)
string(ok ? 0.5 : true)
string(ok ? 1 : array)
string(ok ? 1 : f32)
string(ok ? array : add)
string(ok ? div : array)
string(ok ? half : score)
string(ok ? i : 1)
string(ok ? nil : half)
string(ok ? nil : list)
string(ok or false)
string(ok || false)
string(ok)
string(one(array, true))
string(one(list, true))
string(reduce(array, #))
string(reduce(array, 0.5))
string(reduce(array, 1))
string(reduce(array, f64))
string(reduce(array, greet))
string(reduce(array, half))
string(reduce(array, i64))
string(reduce(array, list))
string(reduce(array, score))
string(reduce(list, "bar"))
string(reduce(list, #))
string(reduce(list, 1))
string(reduce(list, add))
string(reduce(list, div))
string(reduce(list, foo))
string(reduce(list, i))
string(reduce(list, i64))
string(reduce(list, list))
string(round(0.5))
string(round(1))
string(round(ceil(i32)))
string(round(f64))
string(round(i64))
string(score != div)
string(score != greet)
string(score != half)
string(score != nil)
string(score == greet)
string(score == nil)
string(score(1 % 1))
string(score(1))
string(score(i))
string(score)
string(sort(array))
string(sortBy(array, "foo"))
string(string("bar"))
string(string("foo"))
string(string(0.5))
string(string(1))
string(string(array))
string(string(div))
string(string(f32))
string(string(f64))
string(string(false))
string(string(greet))
string(string(half))
string(string(i))
string(string(i64))
string(string(nil))
string(string(ok))
string(string(score))
string(sum(array))
string(toBase64("foo"))
string(toJSON("bar"))
string(toJSON(0.5))
string(toJSON(1))
string(toJSON(array))
string(toJSON(f32))
string(toJSON(f64))
string(toJSON(false))
string(toJSON(i))
string(toJSON(i32))
string(toJSON(i64))
string(toJSON(list))
string(toJSON(nil))
string(toJSON(ok))
string(toJSON(true))
string(trim("bar"))
string(trim(type(nil)))
string(trimPrefix("foo"))
string(trimSuffix("foo"))
string(true != false)
string(true && ok)
string(true == nil)
string(true ? 0.5 : true)
string(true ? f64 : score)
string(true ? false : nil)
string(true ? greet : i)
string(true ? list : ok)
string(true and false)
string(true or false)
string(true or ok)
string(true || true)
string(type("bar"))
string(type("foo"))
string(type(-i64))
string(type(0.5))
string(type(1))
string(type(array))
string(type(f32))
string(type(f64))
string(type(foo))
string(type(greet))
string(type(half))
string(type(i))
string(type(i32))
string(type(i64))
string(type(list))
string(type(nil))
string(type(ok))
string(type(score))
string(upper("foo"))
string({"bar": "foo", "foo": half})
string({"bar": f32, "foo": i32})
string({"bar": f32})
string({"bar": true})
string({"foo": add})
string({"foo": array, "foo": list})
sum(1 .. 1)
sum(1 .. i)
sum(1 .. i32)
sum(1 .. i64)
sum([0.5])
sum([f32])
sum(array)
sum(array) != f32
sum(array) != half
sum(array) != ok
sum(array) % i
sum(array) % i64
sum(array) - f32
sum(array) / -f64
sum(array) < i
sum(array) == div
sum(array) == i64 - i
sum(array) ^ f64
sum(array) not in array
sum(array) not in list
sum(filter(array, ok))
sum(groupBy(array, i32).String)
sum(groupBy(list, #)?.greet)
sum(i32 .. 1)
sum(i64 .. i32)
sum(i64 .. i64)
sum(list[i:1])
sum(map(array, #))
sum(map(array, f32))
sum(map(list, 0.5))
sum(map(list, f32))
sum(map(list, i32))
sum(ok ? array : i64)
sum(reduce(array, array))
sum(reduce(list, array))
sum(sort(array))
sum(true ? array : i32)
take(array, i)
take(array, i32)
take(array, i64)
take(list, i)
take(list, i32)
take(list, i64)
take(map(array, #), i)
toBase64("bar" + "bar")
toBase64("bar" + "foo")
toBase64("bar") startsWith type(score)
toBase64("foo" + "bar")
toBase64(foo.Bar)
toBase64(foo.String())
toBase64(foo?.Bar)
toBase64(foo?.String())
toBase64(greet("bar"))
toBase64(greet("foo"))
toBase64(lower("bar"))
toBase64(lower("foo"))
toBase64(ok ? "bar" : f64)
toBase64(reduce(list, "bar"))
toBase64(string("foo"))
toBase64(string(0.5))
toBase64(string(1))
toBase64(string(add))
toBase64(string(array))
toBase64(string(f32))
toBase64(string(f64))
toBase64(string(foo))
toBase64(string(greet))
toBase64(string(half))
toBase64(string(i))
toBase64(string(list))
toBase64(string(ok))
toBase64(toBase64("bar"))
toBase64(toJSON("bar"))
toBase64(toJSON(0.5))
toBase64(toJSON(1))
toBase64(toJSON(f32))
toBase64(toJSON(f64))
toBase64(toJSON(foo))
toBase64(toJSON(i64))
toBase64(toJSON(list))
toBase64(toJSON(nil))
toBase64(toJSON(ok))
toBase64(toJSON(true))
toBase64(trim("bar"))
toBase64(trimPrefix("foo"))
toBase64(trimSuffix("foo"))
toBase64(type(0.5))
toBase64(type(1))
toBase64(type(add))
toBase64(type(div))
toBase64(type(f32))
toBase64(type(f64))
toBase64(type(false))
toBase64(type(foo))
toBase64(type(greet))
toBase64(type(half))
toBase64(type(i))
toBase64(type(i32))
toBase64(type(i64))
toBase64(type(list))
toBase64(type(nil))
toBase64(type(score))
toBase64(upper("foo"))
toJSON(!false)
toJSON(!ok)
toJSON(!true)
toJSON("bar" < "foo")
toJSON("bar" >= "bar")
toJSON("bar" endsWith "bar")
toJSON("bar" matches "foo")
toJSON("bar" not in foo)
toJSON("bar" not matches "bar")
toJSON("bar" not startsWith "foo")
toJSON("bar" startsWith "bar")
toJSON("bar") not in foo
toJSON("foo" != "bar")
toJSON("foo" != "foo")
toJSON("foo" < "foo")
toJSON("foo" == "bar")
toJSON("foo" > "foo")
toJSON("foo" >= "foo")
toJSON("foo" startsWith "bar")
toJSON(-0.5)
toJSON(-1)
toJSON(-f32)
toJSON(-f64)
toJSON(-i)
toJSON(-i32)
toJSON(-i64)
toJSON(0.5 != 1)
toJSON(0.5 != f64)
toJSON(0.5 != nil)
toJSON(0.5 * i)
toJSON(0.5 * i32)
toJSON(0.5 * i64)
toJSON(0.5 ** 0.5)
toJSON(0.5 ** 1)
toJSON(0.5 ** f32)
toJSON(0.5 ** f64)
toJSON(0.5 ** i)
toJSON(0.5 ** i32)
toJSON(0.5 + 0.5)
toJSON(0.5 + 1)
toJSON(0.5 + f32)
toJSON(0.5 - 0.5)
toJSON(0.5 - 1)
toJSON(0.5 - f32)
toJSON(0.5 - f64)
toJSON(0.5 - i)
toJSON(0.5 - i32)
toJSON(0.5 / 1)
toJSON(0.5 / f32)
toJSON(0.5 / f64)
toJSON(0.5 / i32)
toJSON(0.5 < 1)
toJSON(0.5 < f32)
toJSON(0.5 < f64)
toJSON(0.5 < i)
toJSON(0.5 <= 0.5)
toJSON(0.5 <= 1)
toJSON(0.5 <= f32)
toJSON(0.5 <= i64)
toJSON(0.5 == 0.5)
toJSON(0.5 == f64)
toJSON(0.5 == i)
toJSON(0.5 == i32)
toJSON(0.5 == i64)
toJSON(0.5 >= 0.5)
toJSON(0.5 >= 1)
toJSON(0.5 >= f32)
toJSON(0.5 ^ f32)
toJSON(0.5 ^ i32)
toJSON(0.5 ^ i64)
toJSON(0.5) not in foo
toJSON(1 != 0.5)
toJSON(1 != f32)
toJSON(1 != nil)
toJSON(1 % 1)
toJSON(1 % i)
toJSON(1 % i32)
toJSON(1 * f64)
toJSON(1 * i32)
toJSON(1 * i64)
toJSON(1 ** 0.5)
toJSON(1 ** 1)
toJSON(1 ** i32)
toJSON(1 + 0.5)
toJSON(1 + 1)
toJSON(1 + f64)
toJSON(1 + i)
toJSON(1 + i32)
toJSON(1 - i)
toJSON(1 - i32)
toJSON(1 .. i32)
toJSON(1 .. i64)
toJSON(1 / 1)
toJSON(1 / f64)
toJSON(1 / i64)
toJSON(1 < 0.5)
toJSON(1 < 1)
toJSON(1 < f64)
toJSON(1 < i)
toJSON(1 <= 0.5)
toJSON(1 <= f32)
toJSON(1 <= f64)
toJSON(1 == 0.5)
toJSON(1 == 1)
toJSON(1 == f64)
toJSON(1 == i)
toJSON(1 == i32)
toJSON(1 == nil)
toJSON(1 > f32)
toJSON(1 > i)
toJSON(1 >= 1)
toJSON(1 >= f32)
toJSON(1 >= i32)
toJSON(1 ^ 1)
toJSON(1 ^ f32)
toJSON(1 ^ i32)
toJSON(1 ^ i64)
toJSON(1) > reduce(list, "bar")
toJSON(1) not contains string(true)
toJSON([f64])
toJSON([false])
toJSON([foo])
toJSON([nil])
toJSON([true])
toJSON(abs(0.5))
toJSON(abs(1))
toJSON(abs(f32))
toJSON(abs(f64))
toJSON(abs(i))
toJSON(abs(i32))
toJSON(abs(i64))
toJSON(add != greet)
toJSON(add != half)
toJSON(add == add)
toJSON(add == score)
toJSON(any(array, false))
toJSON(array == array)
toJSON(array == list)
toJSON(array == nil)
toJSON(array)
toJSON(array[1:i64])
toJSON(array[1])
toJSON(array[i])
toJSON(bitnot(1))
toJSON(bitnot(i))
toJSON(bitnot(i32))
toJSON(bitnot(i64))
toJSON(bitshl(i, i32))
toJSON(ceil(1))
toJSON(ceil(f64))
toJSON(ceil(i))
toJSON(ceil(i32))
toJSON(ceil(i64))
toJSON(count(array, ok))
toJSON(div != div)
toJSON(div != score)
toJSON(div == div)
toJSON(f32 != 0.5)
toJSON(f32 != 1 || ok)
toJSON(f32 != f32)
toJSON(f32 != i32)
toJSON(f32 * f32)
toJSON(f32 ** 0.5)
toJSON(f32 ** 1)
toJSON(f32 ** f64)
toJSON(f32 ** i32)
toJSON(f32 + 0.5)
toJSON(f32 + f32)
toJSON(f32 - 0.5)
toJSON(f32 - f32)
toJSON(f32 - f64)
toJSON(f32 - i64)
toJSON(f32 < 0.5)
toJSON(f32 < i)
toJSON(f32 < i64)
toJSON(f32 <= 0.5)
toJSON(f32 <= 1)
toJSON(f32 <= i64)
toJSON(f32 == f64)
toJSON(f32 == i)
toJSON(f32 == nil)
toJSON(f32 > i)
toJSON(f32 > i32)
toJSON(f32 >= 0.5)
toJSON(f32 ^ i64)
toJSON(f32)
toJSON(f32) in foo
toJSON(f64 != 0.5)
toJSON(f64 != f32)
toJSON(f64 != i)
toJSON(f64 != i32)
toJSON(f64 != nil)
toJSON(f64 * 1)
toJSON(f64 * f64)
toJSON(f64 * i64)
toJSON(f64 ** 0.5)
toJSON(f64 ** f32)
toJSON(f64 + 0.5)
toJSON(f64 + f32)
toJSON(f64 + i32)
toJSON(f64 - f64)
toJSON(f64 - i)
toJSON(f64 - i64)
toJSON(f64 / 1)
toJSON(f64 < f64)
toJSON(f64 <= 0.5)
toJSON(f64 == f64)
toJSON(f64 >= 1)
toJSON(f64 >= f64)
toJSON(f64 ^ f32)
toJSON(f64)
toJSON(false != ok)
toJSON(false ? 0.5 : "foo")
toJSON(false ? add : f64)
toJSON(false ? array : 1)
toJSON(false ? false : foo)
toJSON(false ? nil : ok)
toJSON(false ? ok : i32)
toJSON(filter(list, true))
toJSON(find(list, ok))
toJSON(findIndex(map(array, list), ok))
toJSON(first(array))
toJSON(first(list))
toJSON(float(0.5))
toJSON(float(1))
toJSON(float(f32))
toJSON(float(f64))
toJSON(float(i))
toJSON(float(i64))
toJSON(floor(0.5))
toJSON(floor(f64))
toJSON(floor(i))
toJSON(floor(i32))
toJSON(foo != nil)
toJSON(foo in list)
toJSON(foo)
toJSON(foo.Bar)
toJSON(foo.String())
toJSON(foo?.Bar)
toJSON(foo?.String())
toJSON(get(array, i32))
toJSON(get(array, i64))
toJSON(get(list, 1))
toJSON(get(list, i))
toJSON(get(list, i32))
toJSON(get(list, i64))
toJSON(greet != nil)
toJSON(greet != score)
toJSON(greet == div)
toJSON(greet == greet)
toJSON(greet == half)
toJSON(greet == nil)
toJSON(greet == score)
toJSON(greet("bar"))
toJSON(greet("foo"))
toJSON(groupBy(array, #)?.div)
toJSON(groupBy(array, ok)?.foo)
toJSON(groupBy(list, #)?.foo)
toJSON(half(0.5))
toJSON(half(1))
toJSON(half(f64))
toJSON(i != 0.5)
toJSON(i != 1)
toJSON(i % i)
toJSON(i % i32)
toJSON(i * 0.5)
toJSON(i * 1)
toJSON(i * f32)
toJSON(i * i)
toJSON(i * i32)
toJSON(i ** f32)
toJSON(i ** i)
toJSON(i + 0.5)
toJSON(i + 1)
toJSON(i + i)
toJSON(i - 1)
toJSON(i - f32)
toJSON(i .. i)
toJSON(i .. i32)
toJSON(i / i64)
toJSON(i < f32)
toJSON(i < f64)
toJSON(i < i)
toJSON(i < i32)
toJSON(i <= 1)
toJSON(i <= f32)
toJSON(i <= f64)
toJSON(i <= i)
toJSON(i <= i32)
toJSON(i <= i64)
toJSON(i == 0.5)
toJSON(i == 1)
toJSON(i == i32)
toJSON(i == nil)
toJSON(i > 0.5)
toJSON(i > i)
toJSON(i > i32)
toJSON(i > i64)
toJSON(i >= f64)
toJSON(i >= i32)
toJSON(i ^ i64)
toJSON(i not in array)
toJSON(i)
toJSON(i) matches string("bar")
toJSON(i32 != i)
toJSON(i32 != i64)
toJSON(i32 % 1)
toJSON(i32 * 0.5)
toJSON(i32 * i)
toJSON(i32 * i32)
toJSON(i32 * i64)
toJSON(i32 ** f64)
toJSON(i32 ** i64)
toJSON(i32 + 0.5)
toJSON(i32 + 1)
toJSON(i32 + f64)
toJSON(i32 .. i)
toJSON(i32 .. i64)
toJSON(i32 / 0.5)
toJSON(i32 / f32)
toJSON(i32 / f64)
toJSON(i32 / i64)
toJSON(i32 < 0.5)
toJSON(i32 < 1)
toJSON(i32 < i)
toJSON(i32 < i32)
toJSON(i32 <= 0.5)
toJSON(i32 > f64)
toJSON(i32 > i)
toJSON(i32 > i32)
toJSON(i32 >= f64)
toJSON(i32 ^ 0.5)
toJSON(i32 ^ f32)
toJSON(i32 ^ f64)
toJSON(i32 ^ i32)
toJSON(i32 in array)
toJSON(i32 not in array)
toJSON(i32)
toJSON(i32) contains foo.Bar
toJSON(i64 != 1)
toJSON(i64 != i)
toJSON(i64 != i32)
toJSON(i64 % i32)
toJSON(i64 * 0.5)
toJSON(i64 * f64)
toJSON(i64 ** f64)
toJSON(i64 ** i)
toJSON(i64 ** i32)
toJSON(i64 + 1)
toJSON(i64 - i32)
toJSON(i64 .. 1)
toJSON(i64 .. i32)
toJSON(i64 / f64)
toJSON(i64 / i)
toJSON(i64 / i64)
toJSON(i64 < 1)
toJSON(i64 < f64)
toJSON(i64 < i32)
toJSON(i64 <= 1)
toJSON(i64 <= i64)
toJSON(i64 == 0.5)
toJSON(i64 > 0.5)
toJSON(i64 > 1)
toJSON(i64 > i)
toJSON(i64 > i32)
toJSON(i64 > i64)
toJSON(i64 >= 1)
toJSON(i64 >= i)
toJSON(i64 >= i64)
toJSON(i64 ^ 0.5)
toJSON(i64 ^ f32)
toJSON(i64 ^ i32)
toJSON(i64 in array)
toJSON(i64)
toJSON(int(0.5))
toJSON(int(1))
toJSON(int(i))
toJSON(int(i32))
toJSON(int(i64))
toJSON(len("bar"))
toJSON(len(array))
toJSON(len(greet("foo")))
toJSON(len(list))
toJSON(list != array)
toJSON(list != nil)
toJSON(list == array)
toJSON(list == list)
toJSON(list)
toJSON(list[1])
toJSON(lower("bar"))
toJSON(map(array, #))
toJSON(map(array, -#))
toJSON(map(array, array))
toJSON(map(array, false))
toJSON(map(array, i))
toJSON(map(array, i64))
toJSON(map(array, list))
toJSON(map(list, #))
toJSON(map(list, 0.5))
toJSON(map(list, 1))
toJSON(map(list, foo))
toJSON(map(list, i32))
toJSON(map(list, i64))
toJSON(map(list, list))
toJSON(map(list, ok))
toJSON(max(1))
toJSON(max(f32))
toJSON(max(f64))
toJSON(max(i32))
toJSON(mean(array))
toJSON(median(array))
toJSON(min(0.5))
toJSON(min(1))
toJSON(min(f32))
toJSON(min(f64))
toJSON(min(f64, f64))
toJSON(min(i))
toJSON(min(i32))
toJSON(min(i64))
toJSON(nil != 0.5)
toJSON(nil != 1)
toJSON(nil != add)
toJSON(nil != array)
toJSON(nil != f32)
toJSON(nil != false)
toJSON(nil != foo)
toJSON(nil != greet)
toJSON(nil != half)
toJSON(nil == 0.5)
toJSON(nil == 1)
toJSON(nil == div)
toJSON(nil == f64)
toJSON(nil == half)
toJSON(nil == i)
toJSON(nil == i64)
toJSON(nil == list)
toJSON(nil == nil)
toJSON(nil == ok)
toJSON(nil in array)
toJSON(nil) + foo.Bar
toJSON(none(array, ok))
toJSON(none(array, true))
toJSON(none(list, false))
toJSON(none(list, ok))
toJSON(not ("foo" not in foo))
toJSON(not (f32 != 1))
toJSON(not false)
toJSON(not ok)
toJSON(not true)
toJSON(ok != false)
toJSON(ok && false)
toJSON(ok && ok)
toJSON(ok == nil)
toJSON(ok == ok)
toJSON(ok ? "foo" : f32)
toJSON(ok ? 0.5 : f32)
toJSON(ok ? f64 : 0.5)
toJSON(ok ? i : false)
toJSON(ok ? nil : i)
toJSON(ok ? nil : true)
toJSON(ok ? true : greet)
toJSON(ok and ok)
toJSON(ok or true)
toJSON(ok)
toJSON(one(array, false))
toJSON(one(array, true))
toJSON(reduce(array, #))
toJSON(reduce(array, 0.5))
toJSON(reduce(array, array))
toJSON(reduce(array, foo))
toJSON(reduce(array, i64))
toJSON(reduce(array, list))
toJSON(reduce(array, score(i32 * i64)))
toJSON(reduce(list, #))
toJSON(reduce(list, 1))
toJSON(reduce(list, f32))
toJSON(reduce(list, false))
toJSON(reduce(list, i))
toJSON(reduce(list, i32))
toJSON(reduce(list, list))
toJSON(reduce(list, ok))
toJSON(reduce(list, true))
toJSON(round(1))
toJSON(round(f64))
toJSON(round(i32))
toJSON(score != add)
toJSON(score != div)
toJSON(score != score)
toJSON(score == half)
toJSON(score(1))
toJSON(score(1, 1))
toJSON(score(i))
toJSON(sort(array))
toJSON(string("bar"))
toJSON(string(0.5))
toJSON(string(1))
toJSON(string(array))
toJSON(string(f32))
toJSON(string(f64))
toJSON(string(false))
toJSON(string(foo))
toJSON(string(half))
toJSON(string(i))
toJSON(string(i32))
toJSON(string(i64))
toJSON(string(list))
toJSON(string(nil))
toJSON(string(ok))
toJSON(string(score))
toJSON(string(true))
toJSON(sum(array))
toJSON(take(array, i32))
toJSON(toBase64("bar"))
toJSON(toJSON("bar"))
toJSON(toJSON(array))
toJSON(toJSON(f32))
toJSON(toJSON(f64))
toJSON(toJSON(false))
toJSON(toJSON(foo))
toJSON(toJSON(i))
toJSON(toJSON(i32))
toJSON(toJSON(i64))
toJSON(toJSON(list))
toJSON(toJSON(nil))
toJSON(toJSON(ok))
toJSON(trim("bar"))
toJSON(trimPrefix("foo"))
toJSON(trimSuffix("bar"))
toJSON(true != true)
toJSON(true && ok)
toJSON(true == ok)
toJSON(true ? "bar" : "bar")
toJSON(true ? nil : score)
toJSON(true and false)
toJSON(true and true)
toJSON(true) in foo
toJSON(type("foo"))
toJSON(type(add))
toJSON(type(array))
toJSON(type(f32))
toJSON(type(f64))
toJSON(type(false))
toJSON(type(foo))
toJSON(type(i))
toJSON(type(i32))
toJSON(type(i64))
toJSON(type(list))
toJSON(type(ok))
toJSON(type(score))
toJSON(type(true))
toJSON(upper("bar"))
toJSON({"bar": 1, "bar": array})
toJSON({"bar": 1})
toJSON({"bar": f64})
toJSON({"bar": list})
toJSON({"foo": i})
toJSON({"foo": nil})
toPairs(groupBy(array, # / #))
toPairs(groupBy(array, #))
toPairs(groupBy(array, 0.5))
toPairs(groupBy(array, 1))
toPairs(groupBy(array, false))
toPairs(groupBy(array, foo))
toPairs(groupBy(array, i))
toPairs(groupBy(array, i32))
toPairs(groupBy(array, ok))
toPairs(groupBy(array, true))
toPairs(groupBy(list, #))
toPairs(groupBy(list, 1))
toPairs(groupBy(list, f32))
toPairs(groupBy(list, i))
toPairs(groupBy(list, ok))
toPairs({"bar": f32})
toPairs({"foo": i32, "bar": score})
toPairs({"foo": nil})
trim("bar") not in foo
trim(false ? "bar" : "bar")
trim(foo.Bar)
trim(foo.String())
trim(foo?.Bar)
trim(foo?.String())
trim(greet("bar"))
trim(greet("foo"))
trim(lower("bar"))
trim(lower("foo"))
trim(reduce(list, "bar"))
trim(string("bar"))
trim(string(-f64))
trim(string(0.5))
trim(string(1))
trim(string(add))
trim(string(array))
trim(string(f32))
trim(string(foo))
trim(string(i64))
trim(string(list))
trim(string(nil))
trim(toJSON("bar"))
trim(toJSON(1))
trim(toJSON(f32))
trim(toJSON(false))
trim(toJSON(foo))
trim(toJSON(i32))
trim(toJSON(i64))
trim(toJSON(ok))
trim(toJSON(true))
trim(trim("bar"))
trim(trimPrefix("foo"))
trim(trimSuffix("bar"))
trim(true ? "foo" : greet)
trim(type("bar"))
trim(type("foo"))
trim(type(0.5))
trim(type(1))
trim(type(add))
trim(type(div))
trim(type(f32))
trim(type(f64))
trim(type(greet))
trim(type(i))
trim(type(list))
trim(type(nil))
trim(type(ok))
trim(type(score))
trim(type(true))
trimPrefix("bar" + "foo")
trimPrefix("foo" + "bar")
trimPrefix(false ? 1 : "bar")
trimPrefix(foo.Bar)
trimPrefix(foo.String())
trimPrefix(foo?.Bar)
trimPrefix(foo?.String())
trimPrefix(greet("bar"))
trimPrefix(greet("foo"))
trimPrefix(greet(type(0.5)))
trimPrefix(lower("bar"))
trimPrefix(string("foo"))
trimPrefix(string(0.5))
trimPrefix(string(1))
trimPrefix(string(add))
trimPrefix(string(array))
trimPrefix(string(div))
trimPrefix(string(f32))
trimPrefix(string(f64))
trimPrefix(string(foo))
trimPrefix(string(greet))
trimPrefix(string(half))
trimPrefix(string(i))
trimPrefix(string(i32))
trimPrefix(string(i64))
trimPrefix(string(nil))
trimPrefix(string(score))
trimPrefix(string(true))
trimPrefix(string({"bar": greet}))
trimPrefix(toBase64("bar"))
trimPrefix(toJSON("foo"))
trimPrefix(toJSON(1))
trimPrefix(toJSON(array))
trimPrefix(toJSON(f32))
trimPrefix(toJSON(foo))
trimPrefix(toJSON(i32))
trimPrefix(toJSON(i64))
trimPrefix(toJSON(list))
trimPrefix(toJSON(nil))
trimPrefix(toJSON(true))
trimPrefix(trimPrefix("foo"))
trimPrefix(type("bar"))
trimPrefix(type(0.5))
trimPrefix(type(1))
trimPrefix(type(array))
trimPrefix(type(f32))
trimPrefix(type(f64))
trimPrefix(type(greet))
trimPrefix(type(half))
trimPrefix(type(i))
trimPrefix(type(i32))
trimPrefix(type(i64))
trimPrefix(type(list))
trimPrefix(type(nil))
trimPrefix(type(ok))
trimPrefix(type(true))
trimPrefix(upper("bar"))
trimPrefix(upper("foo"))
trimSuffix("bar" + "foo")
trimSuffix("bar") not contains reduce(list, "bar")
trimSuffix("foo" + "bar")
trimSuffix(false ? i64 : "foo")
trimSuffix(foo.Bar)
trimSuffix(foo.String())
trimSuffix(foo?.Bar)
trimSuffix(foo?.String())
trimSuffix(greet("bar"))
trimSuffix(greet("foo"))
trimSuffix(lower("bar"))
trimSuffix(reduce(array, "foo"))
trimSuffix(reduce(list, #)?.Bar)
trimSuffix(string("bar"))
trimSuffix(string("foo"))
trimSuffix(string(0.5))
trimSuffix(string(add))
trimSuffix(string(array))
trimSuffix(string(div))
trimSuffix(string(f64))
trimSuffix(string(false))
trimSuffix(string(foo))
trimSuffix(string(half))
trimSuffix(string(i))
trimSuffix(string(i32))
trimSuffix(string(i64))
trimSuffix(string(list))
trimSuffix(string(nil))
trimSuffix(string(ok))
trimSuffix(string(true))
trimSuffix(toBase64("bar"))
trimSuffix(toBase64("foo"))
trimSuffix(toJSON(1 > f64))
trimSuffix(toJSON(1))
trimSuffix(toJSON(f32))
trimSuffix(toJSON(f64))
trimSuffix(toJSON(false))
trimSuffix(toJSON(foo))
trimSuffix(toJSON(i))
trimSuffix(toJSON(i32))
trimSuffix(toJSON(i64))
trimSuffix(toJSON(list))
trimSuffix(toJSON(nil))
trimSuffix(toJSON(true))
trimSuffix(trim("bar"))
trimSuffix(trim("foo"))
trimSuffix(trimPrefix("bar"))
trimSuffix(trimPrefix("foo"))
trimSuffix(trimSuffix("bar"))
trimSuffix(type(1))
trimSuffix(type(add))
trimSuffix(type(array))
trimSuffix(type(div))
trimSuffix(type(f32))
trimSuffix(type(foo))
trimSuffix(type(greet))
trimSuffix(type(half))
trimSuffix(type(i32))
trimSuffix(type(list))
trimSuffix(type(nil))
trimSuffix(type(ok))
trimSuffix(upper("foo"))
true != nil || true == true
true != ok != ok
true == ok == ok
true ? 0.5 : i <= f32
true ? 1 : foo?.Bar
true ? 1 : ok or i64 == 0.5
true ? add : foo?.Bar
true ? array : 0.5 >= i32
true ? array : foo.String
true ? array : foo?.Bar
true ? array : foo?.String
true ? array : i32 ** f64
true ? div : i64 ** 1 ^ i32
true ? false : 0.5 > i
true ? false : foo.Qux
true ? foo : 0.5 + -1
true ? foo : foo.Bar
true ? foo : i64 / f32
true ? greet : foo.Bar
true ? greet : ok == ok
true ? half : 0.5 / i32
true ? half : foo.String
true ? i : 1 * i64
true ? i : greet == half
true ? i32 : i32 - f32
true ? i32 : i32 >= f32
true ? i64 : f64 != i
true ? list : div != greet
true ? list : f32 != i
true ? nil : foo.String
true ? nil : foo?.String
true ? nil : i32 != f64 + 1
true ? ok : foo.Qux
true ? ok : foo?.String
true ? score : ok or f64 < f32
true and nil not in list
true and ok or ok
true and true || ok
true or 0.5 not in array
true || f32 not in groupBy(list, #)
true || false ? half : half
type(!false)
type(!ok)
type(!true)
type("bar" != "bar")
type("bar" < "foo")
type("bar" <= "bar")
type("bar" == "foo")
type("bar" >= "bar")
type("bar" not endsWith "foo")
type("bar" startsWith "bar")
type("bar") startsWith greet("bar")
type("foo" != nil)
type("foo" + "bar")
type("foo" not startsWith "bar")
type("foo") not in foo
type(-0.5)
type(-1)
type(-f32)
type(-f64)
type(-i)
type(-i32)
type(-i64)
type(-int(f64))
type(0.5 != f64)
type(0.5 != i32)
type(0.5 != nil)
type(0.5 * 0.5)
type(0.5 * f32)
type(0.5 * f64)
type(0.5 * i64)
type(0.5 ** 0.5)
type(0.5 ** 1)
type(0.5 ** f32)
type(0.5 ** f64)
type(0.5 ** i)
type(0.5 ** i32)
type(0.5 + 0.5)
type(0.5 + 1)
type(0.5 + f32)
type(0.5 + f64)
type(0.5 + i)
type(0.5 + i64)
type(0.5 - 1)
type(0.5 - f64)
type(0.5 - i32)
type(0.5 / 1)
type(0.5 / f32)
type(0.5 / i)
type(0.5 / i32)
type(0.5 / i64)
type(0.5 < 1)
type(0.5 < f32)
type(0.5 < i32)
type(0.5 < i64)
type(0.5 <= 1)
type(0.5 <= f32)
type(0.5 <= i64)
type(0.5 == 0.5)
type(0.5 == f32)
type(0.5 == f64)
type(0.5 == i32)
type(0.5 > 0.5)
type(0.5 > f32)
type(0.5 > i)
type(0.5 > i32)
type(0.5 > i64)
type(0.5 >= 0.5)
type(0.5 >= i)
type(0.5 >= i32)
type(0.5 ^ 0.5)
type(0.5 ^ i)
type(0.5 ^ i32)
type(0.5 ^ i64)
type(0.5 not in array)
type(0.5) in foo
type(1 != i32)
type(1 != nil)
type(1 % 1)
type(1 % i)
type(1 * 0.5)
type(1 * f32)
type(1 * i)
type(1 * i32)
type(1 ** 0.5)
type(1 ** f64)
type(1 ** i)
type(1 ** i64)
type(1 + 0.5)
type(1 + 1)
type(1 + f32)
type(1 + i64)
type(1 - 0.5)
type(1 - 1)
type(1 - i64)
type(1 .. 1)
type(1 .. i64)
type(1 / f64)
type(1 / i)
type(1 < i32)
type(1 < i64)
type(1 <= 0.5)
type(1 <= 1)
type(1 <= f64)
type(1 <= i)
type(1 == f32)
type(1 == f64)
type(1 == i)
type(1 == i32)
type(1 == i64)
type(1 > i)
type(1 >= 0.5)
type(1 >= i)
type(1 >= i64)
type(1 ^ 1)
type(1 ^ i)
type(1 ^ i64)
type(1) endsWith foo.Bar
type(1) in reduce(list, #)
type(1) not endsWith "bar" ? i64 : nil
type(1) not startsWith string(0.5)
type([div])
type([f32])
type(abs(0.5))
type(abs(f32))
type(abs(f64))
type(abs(i))
type(abs(i32))
type(abs(i64))
type(add != greet)
type(add != half)
type(add)
type(all(array, ok))
type(all(list, ok))
type(all(list, true))
type(any(array, false))
type(any(array, ok))
type(any(list, false))
type(array != list)
type(array != nil)
type(array == array)
type(array)
type(array) >= trimPrefix("foo")
type(array[1])
type(array[i32])
type(array[i])
type(bitand(1, i))
type(bitnot(i))
type(bitnot(i32))
type(bitnot(i64))
type(bitxor(i64, 1))
type(ceil(0.5))
type(ceil(f32))
type(ceil(f64))
type(ceil(i64))
type(count(array, true))
type(div != div)
type(div != half)
type(div == div)
type(div)
type(f32 != 0.5)
type(f32 != 1)
type(f32 * 1)
type(f32 * i)
type(f32 * i32)
type(f32 ** f32)
type(f32 + 1)
type(f32 + i)
type(f32 - f32)
type(f32 - i32)
type(f32 / 1)
type(f32 / f32)
type(f32 < 1)
type(f32 < f32)
type(f32 <= f64)
type(f32 == 0.5)
type(f32 == f64)
type(f32 == i)
type(f32 == i32)
type(f32 == i64)
type(f32 > 1)
type(f32 >= f32)
type(f32 >= i)
type(f32 >= i32)
type(f32 ^ i64)
type(f32 not in array)
type(f32)
type(f64 != 0.5)
type(f64 != i)
type(f64 * 0.5)
type(f64 * 1)
type(f64 * f32)
type(f64 ** 1)
type(f64 + f32)
type(f64 + i32)
type(f64 - 0.5)
type(f64 - 1)
type(f64 - f64)
type(f64 - i)
type(f64 / 1)
type(f64 / f32)
type(f64 / i64)
type(f64 < 0.5)
type(f64 < f32)
type(f64 < f64)
type(f64 < i32)
type(f64 < i64)
type(f64 <= 0.5)
type(f64 <= f64)
type(f64 <= i64)
type(f64 == 0.5)
type(f64 == f32)
type(f64 == i64)
type(f64 == nil)
type(f64 > i)
type(f64 > i32)
type(f64 >= 0.5)
type(f64 >= i)
type(f64 ^ 0.5)
type(f64 not in array)
type(f64)
type(false != nil)
type(false != ok)
type(false && true)
type(false ? "bar" : score)
type(false ? div : f64)
type(false ? half : greet)
type(false ? true : foo)
type(false || true)
type(false) startsWith "bar" ? ok : f32
type(find(array, false))
type(find(array, true))
type(find(list, true))
type(findIndex(array, ok))
type(findLast(array, false))
type(findLast(array, ok))
type(findLastIndex(array, false))
type(findLastIndex(list, false))
type(findLastIndex(list, ok))
type(findLastIndex(list, true))
type(first(list))
type(float(f32))
type(float(i32))
type(floor(0.5))
type(floor(1))
type(floor(f64))
type(floor(i64))
type(foo != foo)
type(foo != nil)
type(foo in list)
type(foo)
type(foo.Bar)
type(foo.Qux)
type(foo.String())
type(foo.String)
type(foo?.Bar)
type(foo?.Qux)
type(foo?.String())
type(foo?.String)
type(get(array, 1))
type(get(array, i64))
type(get(list, 1))
type(get(list, i))
type(get(list, i32))
type(get(list, i64))
type(greet != div)
type(greet == div)
type(greet("bar"))
type(greet("foo"))
type(greet)
type(groupBy(array, #))
type(groupBy(array, #).score)
type(groupBy(array, 0.5))
type(groupBy(array, false)?.add)
type(groupBy(array, i))
type(groupBy(array, i32))
type(groupBy(array, i64))
type(groupBy(list, "bar"))
type(groupBy(list, #))
type(groupBy(list, #)?.Bar)
type(groupBy(list, 1))
type(groupBy(list, i64))
type(groupBy(list, true))
type(half != div)
type(half != greet)
type(half != score)
type(half(0.5))
type(half(1))
type(half(f64))
type(half)
type(half) not in foo
type(i % 1)
type(i % i32)
type(i * 0.5)
type(i * i32)
type(i ** f32)
type(i ** f64)
type(i ** i)
type(i + i32)
type(i - 0.5)
type(i - 1)
type(i - i)
type(i - i64)
type(i .. i)
type(i / 0.5)
type(i / i32)
type(i < 0.5)
type(i < 1)
type(i <= 0.5)
type(i <= 1)
type(i == 1)
type(i > 0.5)
type(i > 1)
type(i > f32)
type(i > i64)
type(i >= i32)
type(i ^ 1)
type(i ^ i)
type(i ^ i32)
type(i ^ i64)
type(i)
type(i) + foo.Bar
type(i32 != 1)
type(i32 != f64)
type(i32 * 0.5)
type(i32 * i)
type(i32 ** 0.5)
type(i32 ** f64)
type(i32 ** i)
type(i32 + 1)
type(i32 - 1)
type(i32 .. i32)
type(i32 / 0.5)
type(i32 / f64)
type(i32 < 0.5)
type(i32 <= 0.5)
type(i32 <= f64)
type(i32 <= i32)
type(i32 == 1)
type(i32 == nil)
type(i32 > 0.5)
type(i32 > f64)
type(i32 > i64)
type(i32 >= 1)
type(i32 >= f32)
type(i32 >= i64)
type(i32 ^ 1)
type(i32 ^ f32)
type(i32 ^ f64)
type(i32 ^ i)
type(i32 not in array)
type(i32)
type(i32) in foo
type(i32) not matches trim("foo")
type(i64 != 1)
type(i64 != f64)
type(i64 % 1)
type(i64 * f32)
type(i64 * i64)
type(i64 ** 0.5)
type(i64 ** f64)
type(i64 ** i32)
type(i64 + 0.5)
type(i64 + 1)
type(i64 + i64)
type(i64 - 0.5)
type(i64 - f32)
type(i64 - f64)
type(i64 - i32)
type(i64 .. i32)
type(i64 / 0.5)
type(i64 / f32)
type(i64 / i64)
type(i64 < 0.5)
type(i64 < f32)
type(i64 < f64)
type(i64 < i)
type(i64 < i64)
type(i64 <= 0.5)
type(i64 <= 1)
type(i64 <= f32)
type(i64 <= i)
type(i64 == 1)
type(i64 == f64)
type(i64 > i64)
type(i64 >= 1)
type(i64 ^ f64)
type(i64 ^ i)
type(i64 not in array)
type(i64)
type(int(0.5))
type(int(f32))
type(int(f64))
type(int(i))
type(int(i32))
type(int(i64))
type(last(array))
type(last(list))
type(len(array))
type(len(list))
type(list != nil)
type(list == array)
type(list == nil)
type(list)
type(list[1])
type(list[i32])
type(list[i64])
type(list[i])
type(map(array, "bar"))
type(map(array, "foo"))
type(map(array, #))
type(map(array, 1))
type(map(array, div))
type(map(array, f32))
type(map(array, foo))
type(map(array, greet))
type(map(array, ok))
type(map(array, true))
type(map(list, "bar"))
type(map(list, #))
type(map(list, array))
type(map(list, greet))
type(map(list, i64))
type(map(list, list))
type(map(list, ok))
type(max(0.5))
type(max(0.5, f64))
type(max(1))
type(max(1, i32))
type(max(f64))
type(max(i64))
type(median(array))
type(min(1))
type(min(f32))
type(min(i))
type(min(i32))
type(min(i64))
type(nil != "foo")
type(nil != 0.5)
type(nil != 1)
type(nil != greet)
type(nil != half)
type(nil != i32)
type(nil != i64)
type(nil != nil)
type(nil != score)
type(nil == "foo")
type(nil == array)
type(nil == f32)
type(nil == false)
type(nil == foo)
type(nil == greet)
type(nil == nil)
type(nil == score)
type(nil in array)
type(nil in list)
type(nil not in array)
type(nil not in list)
type(none(list, ok))
type(none(list, true))
type(not (f64 <= i))
type(not false)
type(not ok)
type(not true)
type(ok != false)
type(ok != nil)
type(ok != true)
type(ok && false)
type(ok == nil)
type(ok ? "bar" : half)
type(ok ? 1 : "bar")
type(ok ? array : i64)
type(ok ? array : score)
type(ok ? i : "bar")
type(ok ? i : nil)
type(ok ? nil : 0.5)
type(ok ? nil : div)
type(ok and ok)
type(ok or false)
type(ok || false)
type(ok)
type(one(array, false))
type(one(array, true))
type(one(list, false))
type(one(list, true))
type(reduce(array, "bar"))
type(reduce(array, #))
type(reduce(array, 1))
type(reduce(array, foo))
type(reduce(array, greet))
type(reduce(array, i))
type(reduce(array, ok))
type(reduce(list, "foo"))
type(reduce(list, #))
type(reduce(list, array))
type(reduce(list, i64))
type(reduce(list, ok))
type(round(0.5))
type(round(1))
type(round(f64))
type(round(i))
type(round(i64))
type(score != score)
type(score == div)
type(score == greet)
type(score == nil)
type(score(1))
type(score(1, 1))
type(score(i))
type(score)
type(sort(array))
type(string(0.5))
type(string(1))
type(string(add))
type(string(div))
type(string(f32))
type(string(f64))
type(string(false))
type(string(greet))
type(string(i32))
type(string(i64))
type(string(list))
type(string(nil))
type(string(ok))
type(string(score))
type(toBase64("bar"))
type(toJSON("bar"))
type(toJSON("foo"))
type(toJSON(0.5))
type(toJSON(1))
type(toJSON(array))
type(toJSON(false))
type(toJSON(i))
type(toJSON(i32))
type(toJSON(i64))
type(toJSON(list))
type(toJSON(nil))
type(trim("foo"))
type(trimPrefix("bar"))
type(true != nil)
type(true == false)
type(true == nil)
type(true ? array : false)
type(true ? array : half)
type(true ? div : add)
type(true ? f64 : i32)
type(true ? ok : 1)
type(true and false)
type(true and true)
type(true or true)
type(true || ok)
type(true || true)
type(true) in foo
type(true) matches string(list)
type(type(0.5))
type(type(1))
type(type(add))
type(type(div))
type(type(foo))
type(type(greet))
type(type(half))
type(type(i))
type(type(i32))
type(type(i64))
type(type(nil))
type(type(ok))
type(type(true))
type(upper("foo"))
type({"bar": 1})
type({"bar": array})
type({"foo": "foo"})
type({"foo": f64})
type({"foo": false, "foo": foo}.Bar)
upper("bar") not in foo
upper("foo" + "foo")
upper("foo") == toJSON("bar")
upper(foo.Bar)
upper(foo.String())
upper(foo?.Bar)
upper(foo?.String())
upper(greet("bar"))
upper(greet("foo"))
upper(last(list).Bar)
upper(lower("bar"))
upper(lower("foo"))
upper(reduce(list, #)?.Bar)
upper(string("foo"))
upper(string(0.5))
upper(string(1))
upper(string(add))
upper(string(array))
upper(string(f32))
upper(string(i32))
upper(string(i64))
upper(string(list))
upper(string(nil))
upper(string(score))
upper(string(true))
upper(toBase64("bar"))
upper(toBase64("foo"))
upper(toJSON("foo"))
upper(toJSON(1))
upper(toJSON(f32))
upper(toJSON(false))
upper(toJSON(foo))
upper(toJSON(i))
upper(toJSON(i32))
upper(toJSON(list))
upper(toJSON(nil))
upper(toJSON(true))
upper(trim("bar"))
upper(trim("foo"))
upper(trimSuffix("bar"))
upper(trimSuffix("foo"))
upper(type("bar"))
upper(type("foo"))
upper(type(array))
upper(type(div))
upper(type(f32))
upper(type(foo.Bar))
upper(type(greet))
upper(type(i))
upper(type(i32))
upper(type(list))
upper(type(nil))
upper(type(ok))
upper(type(score))
upper(type(true))
upper(upper("foo"))
values(groupBy(array, "bar"))
values(groupBy(array, "foo"))
values(groupBy(array, #))
values(groupBy(array, 0.5))
values(groupBy(array, 1))
values(groupBy(array, foo))
values(groupBy(array, i))
values(groupBy(list, #))
values(groupBy(list, 1))
values(groupBy(list, i))
values(groupBy(list, i32))
values(groupBy(list, true))
values({"bar": "bar"})
values({"bar": array})
values({"foo": add, "bar": div})
values({"foo": ok})
{"bar": "bar" <= "foo"}
{"bar": "bar", "bar": half}.add
{"bar": "bar", "bar": i}.Qux
{"bar": "bar", "bar": i}.String
{"bar": "bar", "foo": 0.5}.i64
{"bar": "bar", "foo": i64}?.Qux
{"bar": "bar", "foo": score}.f32
{"bar": "bar"}.String?.foo
{"bar": "bar"}.array
{"bar": "bar"}.f64
{"bar": "bar"}.greet
{"bar": "bar"}.list
{"bar": "bar"}.ok
{"bar": "bar"}?.Qux
{"bar": "bar"}?.array
{"bar": "bar"}?.half
{"bar": "bar"}?.list
{"bar": "foo", "bar": div}.half
{"bar": "foo", "foo": f32}.String
{"bar": "foo", "foo": i64}.ok?.f64
{"bar": "foo", "foo": ok}?.i64
{"bar": "foo"}.Bar
{"bar": "foo"}.f32
{"bar": "foo"}.foo
{"bar": "foo"}.half
{"bar": "foo"}.i
{"bar": "foo"}.i64
{"bar": "foo"}?.String
{"bar": "foo"}?.f32
{"bar": "foo"}?.foo
{"bar": "foo"}?.greet
{"bar": "foo"}?.i
{"bar": "foo"}?.i32
{"bar": "foo"}?.i?.String()
{"bar": "foo"}?.list
{"bar": "foo"}?.ok
{"bar": -0.5}
{"bar": -f32}
{"bar": -f64}
{"bar": -i32}
{"bar": 0.5 != nil}
{"bar": 0.5 * 1}.foo
{"bar": 0.5, "bar": 0.5}.half
{"bar": 0.5, "bar": add, "foo": i32}.list
{"bar": 0.5, "bar": i}?.add
{"bar": 0.5, "bar": list}?.div
{"bar": 0.5, "bar": nil, "bar": nil}.i32
{"bar": 0.5, "bar": ok, "foo": 1}?.String
{"bar": 0.5, "bar": true}.score
{"bar": 0.5, "foo": 0.5}?.f32
{"bar": 0.5, "foo": array}?.list
{"bar": 0.5, "foo": f32}.i32?.Bar
{"bar": 0.5, "foo": ok}?.array
{"bar": 0.5}.Qux
{"bar": 0.5}.String
{"bar": 0.5}.add
{"bar": 0.5}.array
{"bar": 0.5}.f32
{"bar": 0.5}.f64
{"bar": 0.5}.half
{"bar": 0.5}.i
{"bar": 0.5}.i32
{"bar": 0.5}.i64
{"bar": 0.5}.ok
{"bar": 0.5}?.Bar
{"bar": 0.5}?.Qux
{"bar": 0.5}?.String
{"bar": 0.5}?.div
{"bar": 0.5}?.foo
{"bar": 0.5}?.greet
{"bar": 0.5}?.half
{"bar": 0.5}?.i
{"bar": 0.5}?.i32
{"bar": 0.5}?.i64
{"bar": 0.5}?.list
{"bar": 0.5}?.score
{"bar": 1 * i}
{"bar": 1 ** 0.5}
{"bar": 1 / 0.5}
{"bar": 1 / f32}
{"bar": 1 ^ 1}
{"bar": 1, "bar": add, "foo": "bar"}?.add
{"bar": 1, "bar": add}.div
{"bar": 1, "bar": f32}?.Bar
{"bar": 1, "bar": f64, "foo": array}.ok
{"bar": 1, "foo": "bar"}.half
{"bar": 1, "foo": array, "bar": score}?.i
{"bar": 1, "foo": i}?.list
{"bar": 1, "foo": i}?.ok
{"bar": 1, "foo": ok}?.f32
{"bar": 1, "foo": score}.f64
{"bar": 1}.String
{"bar": 1}.add
{"bar": 1}.f32
{"bar": 1}.foo
{"bar": 1}.greet
{"bar": 1}.half
{"bar": 1}.i
{"bar": 1}.i32
{"bar": 1}.list
{"bar": 1}.score
{"bar": 1}?.Qux
{"bar": 1}?.add
{"bar": 1}?.div
{"bar": 1}?.f32
{"bar": 1}?.f64
{"bar": 1}?.i
{"bar": 1}?.i32
{"bar": 1}?.i64
{"bar": 1}?.list
{"bar": 1}?.ok
{"bar": add, "bar": half}.div
{"bar": add, "bar": i, "bar": ok}?.foo
{"bar": add, "bar": list}
{"bar": add, "bar": ok, "foo": 1}?.ok
{"bar": add, "foo": "foo"}?.f64
{"bar": add}
{"bar": add}.Qux
{"bar": add}.String
{"bar": add}.add
{"bar": add}.array
{"bar": add}.div
{"bar": add}.half
{"bar": add}?.Qux
{"bar": add}?.String
{"bar": add}?.add
{"bar": add}?.array
{"bar": add}?.div
{"bar": add}?.f64
{"bar": add}?.f64 != half
{"bar": add}?.half
{"bar": add}?.ok
{"bar": add}?.score?.div
{"bar": array, "bar": "bar"}?.i
{"bar": array, "bar": array}?.foo
{"bar": array, "bar": f32}
{"bar": array, "bar": nil}.i64
{"bar": array, "foo": f32}?.String
{"bar": array, "foo": f64}
{"bar": array, "foo": half}?.add
{"bar": array, "foo": i32}
{"bar": array, "foo": score}
{"bar": array}
{"bar": array}.Bar
{"bar": array}.div
{"bar": array}.div?.Qux
{"bar": array}.greet
{"bar": array}.i
{"bar": array}.i64
{"bar": array}.list
{"bar": array}.score
{"bar": array}?.add?.ok
{"bar": array}?.div
{"bar": array}?.f64
{"bar": array}?.greet
{"bar": array}?.half
{"bar": array}?.i64
{"bar": array}?.ok
{"bar": div, "bar": array, "bar": 0.5}.i64
{"bar": div, "bar": div}?.f32
{"bar": div, "bar": foo}.foo
{"bar": div, "bar": ok}
{"bar": div, "foo": 1, "bar": ok}.Qux
{"bar": div, "foo": false}?.String
{"bar": div, "foo": foo, "foo": score}.Bar
{"bar": div, "foo": greet}.i
{"bar": div, "foo": greet}?.ok
{"bar": div, "foo": score}
{"bar": div}
{"bar": div}.array
{"bar": div}.f32
{"bar": div}.f64
{"bar": div}.i64?.Qux
{"bar": div}.list
{"bar": div}.ok
{"bar": div}?.Bar
{"bar": div}?.array
{"bar": div}?.f64
{"bar": div}?.greet
{"bar": div}?.half
{"bar": div}?.list
{"bar": div}?.ok
{"bar": div}?.score
{"bar": f32 ** i}
{"bar": f32 - 0.5}
{"bar": f32 >= 0.5}
{"bar": f32 ^ 1}
{"bar": f32, "bar": "foo"}.add
{"bar": f32, "bar": false}?.Bar
{"bar": f32, "bar": true}?.String
{"bar": f32, "foo": add, "foo": false}?.String
{"bar": f32, "foo": f32}.ok
{"bar": f32, "foo": f64}
{"bar": f32, "foo": half, "foo": ok}
{"bar": f32, "foo": half}
{"bar": f32, "foo": list}?.f32
{"bar": f32, "foo": nil}?.f64?.foo
{"bar": f32}
{"bar": f32}.Qux
{"bar": f32}.div
{"bar": f32}.f64
{"bar": f32}.greet
{"bar": f32}.i
{"bar": f32}.i32
{"bar": f32}.i64
{"bar": f32}?.Bar
{"bar": f32}?.String
{"bar": f32}?.array
{"bar": f32}?.f64
{"bar": f32}?.half
{"bar": f32}?.list
{"bar": f64 + 1}
{"bar": f64 == i32}
{"bar": f64 > 0.5}
{"bar": f64 ^ i32}
{"bar": f64, "bar": "bar"}.i
{"bar": f64, "bar": foo}?.i
{"bar": f64, "bar": i64}?.i64
{"bar": f64, "bar": i}.f64
{"bar": f64, "bar": true}?.i
{"bar": f64, "foo": 0.5, "foo": score}.ok
{"bar": f64, "foo": 1}.f32
{"bar": f64, "foo": f64}?.score
{"bar": f64, "foo": i}?.Qux?.f64
{"bar": f64}
{"bar": f64}.array
{"bar": f64}.f32?.Bar
{"bar": f64}.f64
{"bar": f64}.foo
{"bar": f64}.i
{"bar": f64}.i32
{"bar": f64}.ok
{"bar": f64}?.Bar
{"bar": f64}?.Bar?.Qux
{"bar": f64}?.add
{"bar": f64}?.div
{"bar": f64}?.f32
{"bar": f64}?.foo
{"bar": f64}?.i
{"bar": f64}?.i64
{"bar": f64}?.list
{"bar": f64}?.ok
{"bar": false, "bar": array}?.list
{"bar": false, "bar": i32}?.div
{"bar": false, "bar": i}?.i64
{"bar": false, "bar": nil}.ok
{"bar": false}.Bar
{"bar": false}.Qux
{"bar": false}.array
{"bar": false}.f32
{"bar": false}.f64
{"bar": false}.half
{"bar": false}.i
{"bar": false}.i32
{"bar": false}.ok
{"bar": false}.score
{"bar": false}?.Bar
{"bar": false}?.array
{"bar": false}?.div
{"bar": false}?.foo
{"bar": false}?.half
{"bar": false}?.i
{"bar": false}?.list
{"bar": false}?.ok
{"bar": filter(list, ok)}
{"bar": float(0.5)}
{"bar": floor(0.5)}.score
{"bar": floor(i32)}
{"bar": foo != nil, "foo": array}
{"bar": foo, "bar": "foo", "bar": score}?.score
{"bar": foo, "bar": 1, "bar": score}?.ok
{"bar": foo, "bar": greet}
{"bar": foo, "bar": i}?.i
{"bar": foo, "bar": score}?.ok
{"bar": foo, "foo": 0.5, "foo": ok}?.half
{"bar": foo, "foo": 0.5}.score
{"bar": foo, "foo": 1, "foo": i}?.add
{"bar": foo, "foo": f64}
{"bar": foo, "foo": f64}.Bar
{"bar": foo.Bar}
{"bar": foo.String()}
{"bar": foo?.Qux, "bar": f32}
{"bar": foo?.String}
{"bar": foo}
{"bar": foo}.Bar
{"bar": foo}.array
{"bar": foo}.f32
{"bar": foo}.half
{"bar": foo}.i
{"bar": foo}.list
{"bar": foo}.ok
{"bar": foo}?.Bar
{"bar": foo}?.add
{"bar": foo}?.greet
{"bar": foo}?.i
{"bar": foo}?.i32
{"bar": foo}?.i64
{"bar": foo}?.list
{"bar": foo}?.ok
{"bar": foo}?.score
{"bar": get(list, i32)}
{"bar": greet("foo")}
{"bar": greet, "bar": 0.5}.i32
{"bar": greet, "bar": 1}.Bar
{"bar": greet, "bar": f32}.Bar
{"bar": greet, "bar": i32}
{"bar": greet, "bar": not ok}
{"bar": greet, "foo": "bar"}.ok
{"bar": greet, "foo": f64}
{"bar": greet, "foo": false, "bar": ok}.i32
{"bar": greet, "foo": i32}
{"bar": greet}
{"bar": greet}.Bar
{"bar": greet}.array
{"bar": greet}.f32
{"bar": greet}.greet
{"bar": greet}.half
{"bar": greet}.list
{"bar": greet}?.Qux
{"bar": greet}?.div
{"bar": greet}?.f32
{"bar": greet}?.f64
{"bar": greet}?.greet
{"bar": greet}?.half
{"bar": greet}?.i32
{"bar": greet}?.ok
{"bar": greet}?.score
{"bar": groupBy(array, f32)}
{"bar": half == nil}
{"bar": half(f64)}
{"bar": half, "bar": add, "bar": f64}?.i32
{"bar": half, "bar": foo}
{"bar": half, "bar": list}
{"bar": half, "bar": score}
{"bar": half, "foo": 1}?.i64
{"bar": half, "foo": list}
{"bar": half, "foo": ok, "bar": i}
{"bar": half, "foo": ok}.Qux
{"bar": half, "foo": true}?.String
{"bar": half}
{"bar": half}.Bar?.i
{"bar": half}.Qux
{"bar": half}.String
{"bar": half}.div?.i
{"bar": half}.f32
{"bar": half}.foo
{"bar": half}.half
{"bar": half}.i32
{"bar": half}.list
{"bar": half}.list?.String()
{"bar": half}?.Bar
{"bar": half}?.String
{"bar": half}?.array
{"bar": half}?.f32
{"bar": half}?.greet
{"bar": half}?.i32
{"bar": half}?.list
{"bar": i % i32}
{"bar": i ** f64}
{"bar": i < 1}?.half
{"bar": i, "bar": 1}.add
{"bar": i, "bar": 1}?.i64
{"bar": i, "bar": array}?.half
{"bar": i, "bar": div}.ok
{"bar": i, "bar": f64, "bar": "foo"}?.foo
{"bar": i, "bar": f64, "bar": nil}.i32
{"bar": i, "bar": score}
{"bar": i, "foo": half}
{"bar": i, "foo": i32}?.score
{"bar": i, "foo": nil}?.String
{"bar": i32 ^ 0.5}
{"bar": i32 ^ f64}
{"bar": i32, "bar": list}
{"bar": i32, "foo": "bar"}.i64
{"bar": i32, "foo": array}.div
{"bar": i32, "foo": f64, "foo": add}.f64
{"bar": i32, "foo": foo}?.add
{"bar": i32, "foo": ok}.ok
{"bar": i32}
{"bar": i32}.Qux
{"bar": i32}.f64
{"bar": i32}.i
{"bar": i32}.i32
{"bar": i32}.list
{"bar": i32}.ok
{"bar": i32}.score
{"bar": i32}?.Qux
{"bar": i32}?.add
{"bar": i32}?.array
{"bar": i32}?.div
{"bar": i32}?.f32
{"bar": i32}?.i32
{"bar": i32}?.list
{"bar": i32}?.ok
{"bar": i64 + 1}
{"bar": i64 <= 0.5}
{"bar": i64 == 0.5}
{"bar": i64 in array}
{"bar": i64, "bar": !ok}
{"bar": i64, "bar": 0.5}.f32
{"bar": i64, "bar": greet}.array
{"bar": i64, "bar": score}.ok
{"bar": i64, "foo": nil}?.i32
{"bar": i64, "foo": ok}
{"bar": i64, "foo": ok}?.f32
{"bar": i64}
{"bar": i64}.array?.Bar
{"bar": i64}.div
{"bar": i64}.f32
{"bar": i64}.f64
{"bar": i64}.i
{"bar": i64}.list
{"bar": i64}.ok
{"bar": i64}.score
{"bar": i64}?.div
{"bar": i64}?.f32
{"bar": i64}?.f64
{"bar": i64}?.half
{"bar": i64}?.i
{"bar": i64}?.i32
{"bar": i64}?.i?.ok
{"bar": i64}?.list
{"bar": int(f64)}
{"bar": i}
{"bar": i}.add
{"bar": i}.array
{"bar": i}.div?.Qux.div
{"bar": i}.f64
{"bar": i}.half
{"bar": i}.i
{"bar": i}.i64
{"bar": i}.list
{"bar": i}?.String
{"bar": i}?.array
{"bar": i}?.f64
{"bar": i}?.foo
{"bar": i}?.greet
{"bar": i}?.i
{"bar": i}?.i32
{"bar": i}?.i64
{"bar": i}?.score
{"bar": list == nil}
{"bar": list, "bar": half}?.Bar
{"bar": list, "bar": score}
{"bar": list, "foo": "foo"}.String
{"bar": list, "foo": 1, "foo": nil}.score
{"bar": list, "foo": 1, "foo": score}?.array
{"bar": list, "foo": array}?.i64
{"bar": list, "foo": f64}.div?.Qux
{"bar": list, "foo": f64}.list
{"bar": list, "foo": half}?.f32
{"bar": list, "foo": i64}?.array
{"bar": list, "foo": nil}.i64
{"bar": list[i32:i32]}
{"bar": list}
{"bar": list}.String
{"bar": list}.add
{"bar": list}.array
{"bar": list}.array?.i64
{"bar": list}.f64
{"bar": list}.greet
{"bar": list}.i
{"bar": list}.list
{"bar": list}?.Bar
{"bar": list}?.Qux
{"bar": list}?.add
{"bar": list}?.div
{"bar": list}?.f64
{"bar": list}?.i64
{"bar": list}?.score
{"bar": lower("bar")}
{"bar": map(array, #)}
{"bar": map(array, i)}
{"bar": map(list, #)}
{"bar": nil != "bar"}
{"bar": nil != nil}
{"bar": nil == 0.5}
{"bar": nil == nil}
{"bar": nil, "bar": "bar"}?.i32
{"bar": nil, "bar": add, "bar": i}.add
{"bar": nil, "bar": foo}?.list
{"bar": nil, "foo": "foo"}.f64
{"bar": nil, "foo": 1, "foo": add}.ok
{"bar": nil, "foo": foo}?.add
{"bar": nil, "foo": i}?.f64
{"bar": nil, "foo": list}?.f32
{"bar": nil}.Bar
{"bar": nil}.add
{"bar": nil}.div
{"bar": nil}.f32
{"bar": nil}.foo
{"bar": nil}.greet
{"bar": nil}.half
{"bar": nil}.i
{"bar": nil}.i32
{"bar": nil}.i32?.greet
{"bar": nil}.i64
{"bar": nil}.i?.f64
{"bar": nil}.list
{"bar": nil}.ok
{"bar": nil}?.Qux
{"bar": nil}?.String
{"bar": nil}?.add
{"bar": nil}?.div
{"bar": nil}?.f32
{"bar": nil}?.f64
{"bar": nil}?.half
{"bar": nil}?.i
{"bar": nil}?.i32
{"bar": nil}?.list
{"bar": nil}?.ok
{"bar": none(list, ok)}
{"bar": not true}
{"bar": ok ? "bar" : i}
{"bar": ok ? i32 : "foo"}
{"bar": ok ? nil : greet}
{"bar": ok, "bar": 1, "foo": f64}.half
{"bar": ok, "bar": array}
{"bar": ok, "bar": i64, "foo": 1}?.Qux
{"bar": ok, "bar": i}
{"bar": ok, "bar": list}?.div
{"bar": ok, "bar": ok}.f32
{"bar": ok, "foo": 0.5}?.score
{"bar": ok, "foo": 1}.i
{"bar": ok, "foo": greet}
{"bar": ok, "foo": half}
{"bar": ok, "foo": list}
{"bar": ok, "foo": list}?.f64
{"bar": ok, "foo": nil}?.i32
{"bar": ok, "foo": ok}.div
{"bar": ok}
{"bar": ok}.Bar
{"bar": ok}.div
{"bar": ok}.f32
{"bar": ok}.greet
{"bar": ok}.i32
{"bar": ok}.i64
{"bar": ok}.list
{"bar": ok}.ok
{"bar": ok}.score
{"bar": ok}?.Qux
{"bar": ok}?.add
{"bar": ok}?.f32
{"bar": ok}?.i32
{"bar": ok}?.i64
{"bar": ok}?.list
{"bar": ok}?.score
{"bar": one(list, false)}
{"bar": reduce(array, i)}.i64
{"bar": reduce(list, half)}
{"bar": score != add}
{"bar": score(i)}
{"bar": score, "bar": "bar", "bar": "foo"}?.f32
{"bar": score, "bar": add}.String
{"bar": score, "bar": i64}.f32
{"bar": score, "bar": nil}.i
{"bar": score, "foo": div}
{"bar": score, "foo": foo}.i
{"bar": score, "foo": half, "foo": i}?.array
{"bar": score, "foo": half}
{"bar": score, "foo": score}?.greet
{"bar": score}
{"bar": score}.add
{"bar": score}.array
{"bar": score}.div
{"bar": score}.f64
{"bar": score}.foo
{"bar": score}.half
{"bar": score}.list
{"bar": score}?.String
{"bar": score}?.array
{"bar": score}?.f32
{"bar": score}?.foo
{"bar": score}?.half
{"bar": score}?.i
{"bar": score}?.i32
{"bar": score}?.list
{"bar": score}?.score
{"bar": string(0.5)}
{"bar": string(i64)}
{"bar": string(ok)}
{"bar": toJSON(list)}
{"bar": true == false}
{"bar": true, "bar": f64}?.score
{"bar": true, "bar": i32}.array
{"bar": true, "foo": nil}?.f32
{"bar": true}.Bar
{"bar": true}.Qux
{"bar": true}.String
{"bar": true}.div
{"bar": true}.half
{"bar": true}.i32
{"bar": true}?.Bar
{"bar": true}?.add
{"bar": true}?.array
{"bar": true}?.div
{"bar": true}?.half
{"bar": true}?.i32
{"bar": true}?.i64
{"bar": type(greet)}.Bar
{"bar": type(half)}
{"bar": type(score)}
{"foo": !ok}
{"foo": "bar" < "bar"}
{"foo": "bar" > "bar"}
{"foo": "bar", "bar": list}.div
{"foo": "bar", "bar": nil}.f64
{"foo": "bar", "foo": 0.5}?.add
{"foo": "bar", "foo": 0.5}?.list
{"foo": "bar", "foo": array}?.f64?.list()
{"foo": "bar", "foo": list}.list
{"foo": "bar"}.Bar
{"foo": "bar"}.Qux
{"foo": "bar"}.String
{"foo": "bar"}.foo
{"foo": "bar"}.half
{"foo": "bar"}.i
{"foo": "bar"}.i64
{"foo": "bar"}?.Bar
{"foo": "bar"}?.String
{"foo": "bar"}?.add
{"foo": "bar"}?.array
{"foo": "bar"}?.div
{"foo": "bar"}?.f32
{"foo": "bar"}?.f64
{"foo": "bar"}?.foo
{"foo": "bar"}?.half
{"foo": "bar"}?.i32
{"foo": "bar"}?.score
{"foo": "foo" <= "foo"}
{"foo": "foo" endsWith "foo"}
{"foo": "foo", "bar": false}.greet
{"foo": "foo", "bar": half}?.String
{"foo": "foo", "bar": list, "bar": div}?.String
{"foo": "foo", "foo": add}?.f32
{"foo": "foo"}.Qux
{"foo": "foo"}.div
{"foo": "foo"}.f32
{"foo": "foo"}.i
{"foo": "foo"}.i32
{"foo": "foo"}.list
{"foo": "foo"}?.div
{"foo": "foo"}?.f32
{"foo": "foo"}?.foo
{"foo": "foo"}?.i
{"foo": "foo"}?.i32
{"foo": "foo"}?.score
{"foo": -0.5}
{"foo": -1}
{"foo": -f64}
{"foo": -i64}
{"foo": 0.5 != 0.5}
{"foo": 0.5 ** f64}
{"foo": 0.5 < i64}.div
{"foo": 0.5 <= 0.5}
{"foo": 0.5, "bar": 0.5}.String
{"foo": 0.5, "bar": 0.5}.foo
{"foo": 0.5, "bar": 0.5}?.score
{"foo": 0.5, "bar": 1}?.div
{"foo": 0.5, "bar": i64}.i32
{"foo": 0.5, "bar": list}?.i64
{"foo": 0.5, "foo": 1}.Qux
{"foo": 0.5, "foo": array}.i64
{"foo": 0.5, "foo": f64}.i
{"foo": 0.5, "foo": false, "bar": list}.add
{"foo": 0.5, "foo": greet}.i32
{"foo": 0.5, "foo": score}.foo
{"foo": 0.5}.Qux?.half
{"foo": 0.5}.String
{"foo": 0.5}.add
{"foo": 0.5}.array
{"foo": 0.5}.div
{"foo": 0.5}.f32
{"foo": 0.5}.half
{"foo": 0.5}.i64
{"foo": 0.5}.list
{"foo": 0.5}.score
{"foo": 0.5}?.Bar
{"foo": 0.5}?.String
{"foo": 0.5}?.div
{"foo": 0.5}?.f32
{"foo": 0.5}?.f64
{"foo": 0.5}?.half
{"foo": 0.5}?.i
{"foo": 0.5}?.list
{"foo": 0.5}?.ok
{"foo": 1 / i64}
{"foo": 1 == f32}
{"foo": 1, "bar": nil}?.add
{"foo": 1, "bar": score}.greet
{"foo": 1, "foo": 1}.f64
{"foo": 1, "foo": f64}.i
{"foo": 1, "foo": false}?.f32
{"foo": 1, "foo": half}?.f32
{"foo": 1, "foo": ok}.Bar
{"foo": 1, "foo": ok}.f32
{"foo": 1, "foo": ok}.i32
{"foo": 1, "foo": score}.half
{"foo": 1}.Bar
{"foo": 1}.add
{"foo": 1}.div
{"foo": 1}.f32
{"foo": 1}.f64
{"foo": 1}.foo
{"foo": 1}.greet
{"foo": 1}.half
{"foo": 1}.i
{"foo": 1}.i64
{"foo": 1}.list
{"foo": 1}?.String
{"foo": 1}?.add
{"foo": 1}?.f64
{"foo": 1}?.greet
{"foo": 1}?.half
{"foo": 1}?.list
{"foo": 1}?.ok
{"foo": abs(i64)}
{"foo": add, "bar": half}
{"foo": add, "bar": nil}.i
{"foo": add, "bar": nil}?.i
{"foo": add, "bar": ok, "foo": array}?.i32
{"foo": add, "foo": 1, "bar": i32}.add
{"foo": add, "foo": array}?.f32
{"foo": add, "foo": foo}?.i64
{"foo": add, "foo": half}
{"foo": add, "foo": score, "bar": i32}.list
{"foo": add}
{"foo": add}.array
{"foo": add}.div
{"foo": add}.f32
{"foo": add}.foo
{"foo": add}.half
{"foo": add}.i
{"foo": add}.i32
{"foo": add}.i?.score
{"foo": add}.list
{"foo": add}?.Bar
{"foo": add}?.Qux
{"foo": add}?.String
{"foo": add}?.div
{"foo": add}?.f32
{"foo": add}?.foo
{"foo": add}?.greet
{"foo": add}?.half
{"foo": add}?.i
{"foo": add}?.i64
{"foo": add}?.score
{"foo": array, "bar": "bar"}.add
{"foo": array, "bar": 0.5}?.div
{"foo": array, "bar": add}.ok
{"foo": array, "bar": array}.f32
{"foo": array, "bar": i64}?.add
{"foo": array, "bar": list}
{"foo": array, "bar": nil}.half
{"foo": array, "bar": ok, "bar": i}
{"foo": array, "foo": "foo"}.array
{"foo": array, "foo": array}
{"foo": array, "foo": f32, "foo": half}.ok
{"foo": array, "foo": f64}
{"foo": array, "foo": list}
{"foo": array}
{"foo": array}.Bar
{"foo": array}.Qux
{"foo": array}.f32
{"foo": array}.foo
{"foo": array}.greet
{"foo": array}.i
{"foo": array}.i32
{"foo": array}.i64
{"foo": array}.score
{"foo": array}?.Qux
{"foo": array}?.add
{"foo": array}?.array
{"foo": array}?.greet
{"foo": array}?.i64?.add
{"foo": array}?.list
{"foo": array}?.ok
{"foo": div, "bar": "foo"}.array
{"foo": div, "bar": array}
{"foo": div, "bar": foo, "foo": true}?.i64
{"foo": div, "bar": half}
{"foo": div, "bar": i64}
{"foo": div, "foo": array}
{"foo": div, "foo": f32}
{"foo": div, "foo": greet}?.i64
{"foo": div}
{"foo": div}.Qux
{"foo": div}.array
{"foo": div}.div
{"foo": div}.f32
{"foo": div}.greet?.i
{"foo": div}.i32
{"foo": div}.i64
{"foo": div}?.Bar
{"foo": div}?.Qux
{"foo": div}?.String
{"foo": div}?.div
{"foo": div}?.greet
{"foo": div}?.half
{"foo": div}?.i32
{"foo": div}?.i64
{"foo": div}?.list
{"foo": div}?.score
{"foo": f32 > 1}
{"foo": f32 >= 1}
{"foo": f32, "bar": 0.5}.list
{"foo": f32, "bar": div}
{"foo": f32, "bar": f32}
{"foo": f32, "bar": f64}
{"foo": f32, "bar": greet}.greet
{"foo": f32, "bar": half}
{"foo": f32, "bar": ok}?.add
{"foo": f32, "bar": score}?.i64
{"foo": f32, "foo": "foo"}.ok
{"foo": f32, "foo": add}?.half?.f64()
{"foo": f32, "foo": foo}?.half
{"foo": f32}
{"foo": f32}.Qux
{"foo": f32}.add
{"foo": f32}.f32
{"foo": f32}.foo
{"foo": f32}.greet
{"foo": f32}.half
{"foo": f32}.i
{"foo": f32}.i32
{"foo": f32}.i64
{"foo": f32}.list
{"foo": f32}.score?.greet
{"foo": f32}?.Bar
{"foo": f32}?.String
{"foo": f32}?.array
{"foo": f32}?.f64?.i
{"foo": f32}?.i
{"foo": f32}?.ok
{"foo": f64 < f64}
{"foo": f64 > f32}
{"foo": f64 >= 0.5}
{"foo": f64 >= f32}
{"foo": f64 in array}
{"foo": f64, "bar": 0.5}.greet
{"foo": f64, "bar": add, "foo": greet}.Bar
{"foo": f64, "bar": list}.i64
{"foo": f64, "bar": sum(array)}
{"foo": f64, "bar": true}?.greet
{"foo": f64, "foo": list, "foo": i}?.add
{"foo": f64}
{"foo": f64}.Bar
{"foo": f64}.Qux
{"foo": f64}.div
{"foo": f64}.f32
{"foo": f64}.f64
{"foo": f64}.greet
{"foo": f64}.i32
{"foo": f64}.list
{"foo": f64}.ok
{"foo": f64}?.String
{"foo": f64}?.f32
{"foo": f64}?.f64
{"foo": f64}?.foo
{"foo": f64}?.greet
{"foo": f64}?.i32
{"foo": f64}?.i64
{"foo": f64}?.ok
{"foo": f64}?.ok?.ok
{"foo": f64}?.score
{"foo": false or false}.array
{"foo": false, "bar": 0.5, "foo": add}.score
{"foo": false, "foo": foo, "bar": half}.array
{"foo": false, "foo": score, "foo": nil}?.div
{"foo": false, "foo": true}?.i32
{"foo": false}.array
{"foo": false}.i
{"foo": false}.ok
{"foo": false}?.f32
{"foo": false}?.f64
{"foo": false}?.list
{"foo": foo == nil}
{"foo": foo, "bar": div}
{"foo": foo, "bar": foo}
{"foo": foo, "bar": ok}.i32
{"foo": foo, "bar": {"foo": 1}}
{"foo": foo, "foo": add}
{"foo": foo, "foo": half}
{"foo": foo, "foo": i}
{"foo": foo, "foo": ok}
{"foo": foo, "foo": score, "foo": f64}.i
{"foo": foo.Bar}
{"foo": foo.String, "bar": foo}
{"foo": foo.String}
{"foo": foo?.Bar}
{"foo": foo?.Qux}
{"foo": foo?.String()}
{"foo": foo?.String}
{"foo": foo}
{"foo": foo}.Bar?.Bar
{"foo": foo}.Qux
{"foo": foo}.String
{"foo": foo}.String?.String
{"foo": foo}.f32
{"foo": foo}.greet
{"foo": foo}.half
{"foo": foo}.i64
{"foo": foo}?.Qux
{"foo": foo}?.add
{"foo": foo}?.array
{"foo": foo}?.array?.Bar
{"foo": foo}?.f64
{"foo": foo}?.greet
{"foo": foo}?.i32
{"foo": foo}?.list
{"foo": foo}?.ok
{"foo": greet("foo")}
{"foo": greet, "bar": "bar"}?.i32
{"foo": greet, "bar": i64}
{"foo": greet, "bar": i}.list
{"foo": greet, "foo": add}.String
{"foo": greet, "foo": nil}?.add
{"foo": greet}
{"foo": greet}.Bar
{"foo": greet}.Qux
{"foo": greet}.String
{"foo": greet}.add
{"foo": greet}.array
{"foo": greet}.f32
{"foo": greet}.i
{"foo": greet}.i32
{"foo": greet}.i64
{"foo": greet}.i64?.greet
{"foo": greet}.ok
{"foo": greet}.score
{"foo": greet}?.Qux
{"foo": greet}?.array
{"foo": greet}?.div
{"foo": greet}?.f32
{"foo": greet}?.f64
{"foo": greet}?.i32
{"foo": greet}?.i64
{"foo": greet}?.list
{"foo": greet}?.ok
{"foo": greet}?.score
{"foo": groupBy(array, 1)}
{"foo": groupBy(list, #)}
{"foo": half, "bar": "foo"}?.half
{"foo": half, "bar": add, "foo": true}?.array
{"foo": half, "bar": array}.half
{"foo": half, "bar": greet}?.half
{"foo": half, "bar": half}?.i
{"foo": half, "bar": list, "foo": 1}?.f64
{"foo": half, "bar": list}
{"foo": half, "bar": true}?.Qux
{"foo": half, "foo": 1}?.i32
{"foo": half, "foo": div, "foo": array}?.i32
{"foo": half, "foo": f64}
{"foo": half, "foo": list, "foo": half}.half
{"foo": half, "foo": score, "foo": list}.String
{"foo": half}
{"foo": half}.Bar
{"foo": half}.String
{"foo": half}.add
{"foo": half}.div
{"foo": half}.f32
{"foo": half}.foo
{"foo": half}.half
{"foo": half}.i
{"foo": half}.i64
{"foo": half}.ok
{"foo": half}.score
{"foo": half}?.Bar
{"foo": half}?.Qux
{"foo": half}?.String
{"foo": half}?.div
{"foo": half}?.f32
{"foo": half}?.foo
{"foo": half}?.i32
{"foo": half}?.i64
{"foo": half}?.score
{"foo": i != 1}
{"foo": i - f64}
{"foo": i / 1}
{"foo": i ^ 1}
{"foo": i, "bar": 0.5}?.half
{"foo": i, "bar": f32}
{"foo": i, "bar": foo}
{"foo": i, "bar": list}.foo
{"foo": i, "foo": "bar"}?.div?.f32
{"foo": i, "foo": 1}.list
{"foo": i, "foo": 1}?.list
{"foo": i, "foo": add}
{"foo": i, "foo": array, "bar": 0.5}?.f32
{"foo": i, "foo": half}?.list
{"foo": i, "foo": score}
{"foo": i, "foo": score}?.f32
{"foo": i32 != i}
{"foo": i32 * 0.5}
{"foo": i32 + 1}
{"foo": i32 - f32}.foo
{"foo": i32 - f64}
{"foo": i32 / 1}
{"foo": i32 < 1}
{"foo": i32, "bar": 0.5, "bar": foo}.i64
{"foo": i32, "bar": foo}?.score
{"foo": i32, "bar": nil}?.ok
{"foo": i32, "foo": false, "bar": f32}?.foo
{"foo": i32, "foo": greet}?.greet
{"foo": i32}
{"foo": i32}.i
{"foo": i32}.ok
{"foo": i32}?.Bar
{"foo": i32}?.String
{"foo": i32}?.add
{"foo": i32}?.f32
{"foo": i32}?.f64
{"foo": i32}?.i
{"foo": i32}?.i32
{"foo": i32}?.i64
{"foo": i32}?.list
{"foo": i32}?.score
{"foo": i64 % 1}
{"foo": i64 * f32}
{"foo": i64 .. i64}
{"foo": i64, "bar": array}
{"foo": i64, "foo": array}.f32
{"foo": i64, "foo": f32}
{"foo": i64, "foo": i32}?.foo
{"foo": i64, "foo": i64, "bar": f64}.foo
{"foo": i64, "foo": i64}
{"foo": i64, "foo": i64}.greet
{"foo": i64, "foo": i64}?.foo
{"foo": i64}
{"foo": i64}.Bar
{"foo": i64}.array
{"foo": i64}.div
{"foo": i64}.foo
{"foo": i64}.greet
{"foo": i64}.half
{"foo": i64}.i
{"foo": i64}.i32
{"foo": i64}.list
{"foo": i64}?.Qux
{"foo": i64}?.add
{"foo": i64}?.array
{"foo": i64}?.f32
{"foo": i64}?.f64
{"foo": i64}?.half
{"foo": i64}?.i32
{"foo": i64}?.i32?.f32
{"foo": i64}?.i64
{"foo": i64}?.score?.list
{"foo": int(i)}
{"foo": int(i32)}
{"foo": int(i64)}
{"foo": i}
{"foo": i}.Bar
{"foo": i}.String
{"foo": i}.add
{"foo": i}.array
{"foo": i}.f64
{"foo": i}.greet
{"foo": i}.i
{"foo": i}.ok
{"foo": i}?.div
{"foo": i}?.greet
{"foo": i}?.i
{"foo": i}?.i32
{"foo": i}?.i64
{"foo": i}?.score
{"foo": last(list)}
{"foo": len(list)}
{"foo": list, "bar": add}
{"foo": list, "bar": all(list, false)}
{"foo": list, "bar": array}
{"foo": list, "bar": f32}.f64
{"foo": list, "bar": half}
{"foo": list, "bar": i32, "bar": score}.array
{"foo": list, "bar": true}?.foo
{"foo": list}
{"foo": list}.Qux
{"foo": list}.String
{"foo": list}.add
{"foo": list}.div
{"foo": list}.f32
{"foo": list}.greet
{"foo": list}.half
{"foo": list}.i
{"foo": list}.i32
{"foo": list}?.String
{"foo": list}?.div
{"foo": list}?.f32
{"foo": list}?.foo
{"foo": list}?.i
{"foo": list}?.i32
{"foo": list}?.i64
{"foo": list}?.ok
{"foo": list}?.score
{"foo": map(array, #)}
{"foo": map(array, i64)}
{"foo": nil, "bar": 0.5}.ok
{"foo": nil, "bar": add, "bar": f32}?.list
{"foo": nil, "bar": div, "bar": 1}.i64
{"foo": nil, "bar": f32}.score
{"foo": nil, "bar": foo}?.String
{"foo": nil, "bar": score}?.ok?.div
{"foo": nil, "foo": "foo"}.Bar
{"foo": nil, "foo": greet}.String
{"foo": nil, "foo": half}.f64
{"foo": nil, "foo": i64, "bar": f64}?.list
{"foo": nil, "foo": i}.div
{"foo": nil, "foo": list}.add
{"foo": nil, "foo": list}?.array
{"foo": nil, "foo": nil}.ok
{"foo": nil}.array?.half()
{"foo": nil}.div
{"foo": nil}.f32
{"foo": nil}.f64
{"foo": nil}.half
{"foo": nil}.i
{"foo": nil}.i32
{"foo": nil}.i64?.Bar()
{"foo": nil}.list
{"foo": nil}.ok
{"foo": nil}.score
{"foo": nil}?.Bar
{"foo": nil}?.Bar?.score
{"foo": nil}?.add
{"foo": nil}?.array
{"foo": nil}?.f64
{"foo": nil}?.foo
{"foo": nil}?.half
{"foo": nil}?.i32
{"foo": nil}?.i64
{"foo": nil}?.list
{"foo": ok == false}
{"foo": ok, "bar": "foo"}?.i64
{"foo": ok, "bar": add}.String
{"foo": ok, "bar": f32}
{"foo": ok, "foo": half}.ok
{"foo": ok, "foo": list}
{"foo": ok}
{"foo": ok}.Bar
{"foo": ok}.Bar?.i
{"foo": ok}.String
{"foo": ok}.array
{"foo": ok}.div
{"foo": ok}.f64
{"foo": ok}.foo
{"foo": ok}.i32
{"foo": ok}.i64
{"foo": ok}.ok
{"foo": ok}?.Qux
{"foo": ok}?.String
{"foo": ok}?.String?.Bar
{"foo": ok}?.array
{"foo": ok}?.f32
{"foo": ok}?.foo
{"foo": ok}?.greet
{"foo": ok}?.half
{"foo": ok}?.i32
{"foo": ok}?.i64
{"foo": ok}?.list
{"foo": reduce(array, "foo")}
{"foo": reduce(array, #)}
{"foo": reduce(list, #).String()}
{"foo": reduce(list, #)}
{"foo": reduce(list, #)}?.list
{"foo": score, "bar": add}.add
{"foo": score, "bar": div}
{"foo": score, "bar": f64}
{"foo": score, "bar": false}?.array
{"foo": score, "bar": false}?.i
{"foo": score, "bar": true}.div?.i
{"foo": score, "foo": 0.5}?.String
{"foo": score, "foo": 1}.array
{"foo": score, "foo": add}
{"foo": score, "foo": array}.array
{"foo": score, "foo": f32}
{"foo": score, "foo": greet}
